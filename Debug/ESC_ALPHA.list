
ESC_ALPHA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d208  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000061c  0800d398  0800d398  0001d398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9b4  0800d9b4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d9b4  0800d9b4  0001d9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d9bc  0800d9bc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9bc  0800d9bc  0001d9bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9c0  0800d9c0  0001d9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d9c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          00004b9c  200001e4  200001e4  000201e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d80  20004d80  000201e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a3c3  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036f1  00000000  00000000  0003a5d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  0003dcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012b8  00000000  00000000  0003f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000298d1  00000000  00000000  00040368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000186f4  00000000  00000000  00069c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012e48a  00000000  00000000  0008232d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b07b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006844  00000000  00000000  001b080c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d380 	.word	0x0800d380

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	0800d380 	.word	0x0800d380

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ffc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <vApplicationGetIdleTaskMemory+0x30>)
 8001002:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800100a:	bf00      	nop
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000200 	.word	0x20000200
 800101c:	20000254 	.word	0x20000254

08001020 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	b2da      	uxtb	r2, r3
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	4053      	eors	r3, r2
 8001036:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8001038:	7bfb      	ldrb	r3, [r7, #15]
 800103a:	011b      	lsls	r3, r3, #4
 800103c:	b25a      	sxtb	r2, r3
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4053      	eors	r3, r2
 8001044:	b25b      	sxtb	r3, r3
 8001046:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	b29b      	uxth	r3, r3
 8001050:	b21a      	sxth	r2, r3
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b21b      	sxth	r3, r3
 8001058:	4053      	eors	r3, r2
 800105a:	b21a      	sxth	r2, r3
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	b21b      	sxth	r3, r3
 8001062:	4053      	eors	r3, r2
 8001064:	b21a      	sxth	r2, r3
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	b2db      	uxtb	r3, r3
 800106c:	b21b      	sxth	r3, r3
 800106e:	4053      	eors	r3, r2
 8001070:	b21b      	sxth	r3, r3
 8001072:	b29a      	uxth	r2, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	801a      	strh	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <crc_init>:
 * @brief Initiliaze the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001092:	801a      	strh	r2, [r3, #0]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 80010ac:	f107 030e 	add.w	r3, r7, #14
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ffe7 	bl	8001084 <crc_init>
	while (length--) {
 80010b6:	e009      	b.n	80010cc <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	f107 020e 	add.w	r2, r7, #14
 80010c4:	4611      	mov	r1, r2
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffaa 	bl	8001020 <crc_accumulate>
	while (length--) {
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	807a      	strh	r2, [r7, #2]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f0      	bne.n	80010b8 <crc_calculate+0x18>
        }
        return crcTmp;
 80010d6:	89fb      	ldrh	r3, [r7, #14]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3710      	adds	r7, #16
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	4613      	mov	r3, r2
 80010ec:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	617b      	str	r3, [r7, #20]
	while (length--) {
 80010f2:	e007      	b.n	8001104 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	617a      	str	r2, [r7, #20]
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	68f9      	ldr	r1, [r7, #12]
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff ff8e 	bl	8001020 <crc_accumulate>
	while (length--) {
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	1e5a      	subs	r2, r3, #1
 8001108:	80fa      	strh	r2, [r7, #6]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d1f2      	bne.n	80010f4 <crc_accumulate_buffer+0x14>
        }
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2200      	movs	r2, #0
 800112a:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <mavlink_sha256_init+0x50>)
 8001130:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a0d      	ldr	r2, [pc, #52]	; (800116c <mavlink_sha256_init+0x54>)
 8001136:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <mavlink_sha256_init+0x58>)
 800113c:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a0c      	ldr	r2, [pc, #48]	; (8001174 <mavlink_sha256_init+0x5c>)
 8001142:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <mavlink_sha256_init+0x60>)
 8001148:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a0b      	ldr	r2, [pc, #44]	; (800117c <mavlink_sha256_init+0x64>)
 800114e:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <mavlink_sha256_init+0x68>)
 8001154:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <mavlink_sha256_init+0x6c>)
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	6a09e667 	.word	0x6a09e667
 800116c:	bb67ae85 	.word	0xbb67ae85
 8001170:	3c6ef372 	.word	0x3c6ef372
 8001174:	a54ff53a 	.word	0xa54ff53a
 8001178:	510e527f 	.word	0x510e527f
 800117c:	9b05688c 	.word	0x9b05688c
 8001180:	1f83d9ab 	.word	0x1f83d9ab
 8001184:	5be0cd19 	.word	0x5be0cd19

08001188 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8001188:	b480      	push	{r7}
 800118a:	b0cf      	sub	sp, #316	; 0x13c
 800118c:	af00      	add	r7, sp, #0
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	6018      	str	r0, [r3, #0]
 8001192:	463b      	mov	r3, r7
 8001194:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    BB = m->counter[1];
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    CC = m->counter[2];
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    DD = m->counter[3];
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    EE = m->counter[4];
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    FF = m->counter[5];
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	69db      	ldr	r3, [r3, #28]
 80011ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    GG = m->counter[6];
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HH = m->counter[7];
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    for (i = 0; i < 16; ++i)
 80011e6:	2300      	movs	r3, #0
 80011e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80011ec:	e011      	b.n	8001212 <mavlink_sha256_calc+0x8a>
	data[i] = in[i];
 80011ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	463a      	mov	r2, r7
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	6819      	ldr	r1, [r3, #0]
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001204:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8001208:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800120c:	3301      	adds	r3, #1
 800120e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001216:	2b0f      	cmp	r3, #15
 8001218:	dde9      	ble.n	80011ee <mavlink_sha256_calc+0x66>
    for (i = 16; i < 64; ++i)
 800121a:	2310      	movs	r3, #16
 800121c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001220:	e057      	b.n	80012d2 <mavlink_sha256_calc+0x14a>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8001222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001226:	1e9a      	subs	r2, r3, #2
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001230:	ea4f 4273 	mov.w	r2, r3, ror #17
 8001234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001238:	1e99      	subs	r1, r3, #2
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001242:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8001246:	405a      	eors	r2, r3
 8001248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800124c:	1e99      	subs	r1, r3, #2
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001256:	0a9b      	lsrs	r3, r3, #10
 8001258:	405a      	eors	r2, r3
 800125a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800125e:	1fd9      	subs	r1, r3, #7
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001268:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800126a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800126e:	f1a3 010f 	sub.w	r1, r3, #15
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800127a:	ea4f 11f3 	mov.w	r1, r3, ror #7
 800127e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001282:	f1a3 000f 	sub.w	r0, r3, #15
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800128e:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8001292:	4059      	eors	r1, r3
 8001294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001298:	f1a3 000f 	sub.w	r0, r3, #15
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80012a8:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 80012aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012ae:	f1a3 0110 	sub.w	r1, r3, #16
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012ba:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80012c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 80012c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012cc:	3301      	adds	r3, #1
 80012ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80012d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012d6:	2b3f      	cmp	r3, #63	; 0x3f
 80012d8:	dda3      	ble.n	8001222 <mavlink_sha256_calc+0x9a>

    for (i = 0; i < 64; i++) {
 80012da:	2300      	movs	r3, #0
 80012dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80012e0:	e076      	b.n	80013d0 <mavlink_sha256_calc+0x248>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80012e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012e6:	ea4f 12b3 	mov.w	r2, r3, ror #6
 80012ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012ee:	ea4f 23f3 	mov.w	r3, r3, ror #11
 80012f2:	405a      	eors	r2, r3
 80012f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012f8:	ea4f 6373 	mov.w	r3, r3, ror #25
 80012fc:	405a      	eors	r2, r3
 80012fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001302:	441a      	add	r2, r3
 8001304:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001308:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800130c:	4019      	ands	r1, r3
 800130e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001312:	43d8      	mvns	r0, r3
 8001314:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001318:	4003      	ands	r3, r0
 800131a:	404b      	eors	r3, r1
 800131c:	441a      	add	r2, r3
 800131e:	4956      	ldr	r1, [pc, #344]	; (8001478 <mavlink_sha256_calc+0x2f0>)
 8001320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001324:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001328:	441a      	add	r2, r3
 800132a:	f107 030c 	add.w	r3, r7, #12
 800132e:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001332:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001336:	4413      	add	r3, r2
 8001338:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 800133c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001340:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8001344:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001348:	ea4f 3373 	mov.w	r3, r3, ror #13
 800134c:	405a      	eors	r2, r3
 800134e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001352:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8001356:	405a      	eors	r2, r3
 8001358:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800135c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001360:	4059      	eors	r1, r3
 8001362:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001366:	4019      	ands	r1, r3
 8001368:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 800136c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001370:	4003      	ands	r3, r0
 8001372:	404b      	eors	r3, r1
 8001374:	4413      	add	r3, r2
 8001376:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			     
	HH = GG;
 800137a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800137e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	GG = FF;
 8001382:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001386:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	FF = EE;
 800138a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800138e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	EE = DD + T1;
 8001392:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8001396:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800139a:	4413      	add	r3, r2
 800139c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	DD = CC;
 80013a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80013a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	CC = BB;
 80013a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	BB = AA;
 80013b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	AA = T1 + T2;
 80013b8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80013bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80013c0:	4413      	add	r3, r2
 80013c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    for (i = 0; i < 64; i++) {
 80013c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013ca:	3301      	adds	r3, #1
 80013cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80013d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013d4:	2b3f      	cmp	r3, #63	; 0x3f
 80013d6:	dd84      	ble.n	80012e2 <mavlink_sha256_calc+0x15a>
    }

    m->counter[0] += AA;
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80013e2:	441a      	add	r2, r3
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80013f4:	441a      	add	r2, r3
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	691a      	ldr	r2, [r3, #16]
 8001402:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001406:	441a      	add	r2, r3
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001418:	441a      	add	r2, r3
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	699a      	ldr	r2, [r3, #24]
 8001426:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800142a:	441a      	add	r2, r3
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	69da      	ldr	r2, [r3, #28]
 8001438:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800143c:	441a      	add	r2, r3
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6a1a      	ldr	r2, [r3, #32]
 800144a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800144e:	441a      	add	r2, r3
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800145c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001460:	441a      	add	r2, r3
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001468:	bf00      	nop
 800146a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	0800d3e8 	.word	0x0800d3e8

0800147c <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b09c      	sub	sp, #112	; 0x70
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	66fb      	str	r3, [r7, #108]	; 0x6c
    uint32_t old_sz = m->sz[0];
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	65fb      	str	r3, [r7, #92]	; 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	441a      	add	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d904      	bls.n	80014b4 <mavlink_sha256_update+0x38>
	++m->sz[1];
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 80014b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014b6:	08db      	lsrs	r3, r3, #3
 80014b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014bc:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 80014be:	e054      	b.n	800156a <mavlink_sha256_update+0xee>
	uint32_t l = 64 - offset;
 80014c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014c2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80014c6:	667b      	str	r3, [r7, #100]	; 0x64
        if (len < l) {
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d201      	bcs.n	80014d4 <mavlink_sha256_update+0x58>
            l = len;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	667b      	str	r3, [r7, #100]	; 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80014da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014dc:	4413      	add	r3, r2
 80014de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80014e0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80014e2:	4618      	mov	r0, r3
 80014e4:	f007 fb1c 	bl	8008b20 <memcpy>
	offset += l;
 80014e8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80014ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014ec:	4413      	add	r3, r2
 80014ee:	66bb      	str	r3, [r7, #104]	; 0x68
	p += l;
 80014f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80014f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014f4:	4413      	add	r3, r2
 80014f6:	66fb      	str	r3, [r7, #108]	; 0x6c
	len -= l;
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8001500:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001502:	2b40      	cmp	r3, #64	; 0x40
 8001504:	d131      	bne.n	800156a <mavlink_sha256_update+0xee>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	; 0x28
 800150a:	65bb      	str	r3, [r7, #88]	; 0x58
	    for (i = 0; i < 16; i++){
 800150c:	2300      	movs	r3, #0
 800150e:	663b      	str	r3, [r7, #96]	; 0x60
 8001510:	e020      	b.n	8001554 <mavlink_sha256_update+0xd8>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8001512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001518:	4413      	add	r3, r2
 800151a:	657b      	str	r3, [r7, #84]	; 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 800151c:	f107 0210 	add.w	r2, r7, #16
 8001520:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	653b      	str	r3, [r7, #80]	; 0x50
                p2[0] = p1[3];
 8001528:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152a:	78da      	ldrb	r2, [r3, #3]
 800152c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800152e:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8001530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001532:	3301      	adds	r3, #1
 8001534:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001536:	7892      	ldrb	r2, [r2, #2]
 8001538:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 800153a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800153c:	3302      	adds	r3, #2
 800153e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001540:	7852      	ldrb	r2, [r2, #1]
 8001542:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8001544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001546:	3303      	adds	r3, #3
 8001548:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 800154e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001550:	3301      	adds	r3, #1
 8001552:	663b      	str	r3, [r7, #96]	; 0x60
 8001554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001556:	2b0f      	cmp	r3, #15
 8001558:	dddb      	ble.n	8001512 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4619      	mov	r1, r3
 8001560:	68f8      	ldr	r0, [r7, #12]
 8001562:	f7ff fe11 	bl	8001188 <mavlink_sha256_calc>
	    offset = 0;
 8001566:	2300      	movs	r3, #0
 8001568:	66bb      	str	r3, [r7, #104]	; 0x68
    while(len > 0){
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1a7      	bne.n	80014c0 <mavlink_sha256_update+0x44>
	}
    }
}
 8001570:	bf00      	nop
 8001572:	bf00      	nop
 8001574:	3770      	adds	r7, #112	; 0x70
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b098      	sub	sp, #96	; 0x60
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800158e:	65fb      	str	r3, [r7, #92]	; 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8001590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001592:	f1c3 0377 	rsb	r3, r3, #119	; 0x77
 8001596:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800159a:	3301      	adds	r3, #1
 800159c:	65bb      	str	r3, [r7, #88]	; 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3308      	adds	r3, #8
 80015a2:	657b      	str	r3, [r7, #84]	; 0x54
    
    *zeros = 0x80;
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80015a8:	f107 030c 	add.w	r3, r7, #12
 80015ac:	3301      	adds	r3, #1
 80015ae:	2247      	movs	r2, #71	; 0x47
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f007 fac2 	bl	8008b3c <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015be:	3307      	adds	r3, #7
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80015c6:	440b      	add	r3, r1
 80015c8:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	0a1a      	lsrs	r2, r3, #8
 80015d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015d4:	3306      	adds	r3, #6
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80015dc:	440b      	add	r3, r1
 80015de:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	0c1a      	lsrs	r2, r3, #16
 80015e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015ea:	3305      	adds	r3, #5
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80015f2:	440b      	add	r3, r1
 80015f4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	0e1a      	lsrs	r2, r3, #24
 80015fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001600:	3304      	adds	r3, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001608:	440b      	add	r3, r1
 800160a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001614:	3303      	adds	r3, #3
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800161c:	440b      	add	r3, r1
 800161e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	0a1a      	lsrs	r2, r3, #8
 8001628:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800162a:	3302      	adds	r3, #2
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001632:	440b      	add	r3, r1
 8001634:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	0c1a      	lsrs	r2, r3, #16
 800163e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001640:	3301      	adds	r3, #1
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8001648:	440b      	add	r3, r1
 800164a:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	0e1b      	lsrs	r3, r3, #24
 8001654:	b2d9      	uxtb	r1, r3
 8001656:	f107 020c 	add.w	r2, r7, #12
 800165a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800165c:	4413      	add	r3, r2
 800165e:	460a      	mov	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8001662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001664:	f103 0208 	add.w	r2, r3, #8
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4619      	mov	r1, r3
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff ff04 	bl	800147c <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8001674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001676:	78da      	ldrb	r2, [r3, #3]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	3301      	adds	r3, #1
 8001680:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001682:	7892      	ldrb	r2, [r2, #2]
 8001684:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	3302      	adds	r3, #2
 800168a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800168c:	7852      	ldrb	r2, [r2, #1]
 800168e:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	3303      	adds	r3, #3
 8001694:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001696:	7812      	ldrb	r2, [r2, #0]
 8001698:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	3304      	adds	r3, #4
 800169e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016a0:	79d2      	ldrb	r2, [r2, #7]
 80016a2:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	3305      	adds	r3, #5
 80016a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016aa:	7992      	ldrb	r2, [r2, #6]
 80016ac:	701a      	strb	r2, [r3, #0]
}
 80016ae:	bf00      	nop
 80016b0:	3760      	adds	r7, #96	; 0x60
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <mavlink_get_channel_status+0x24>)
 80016ce:	4413      	add	r3, r2
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	2000050c 	.word	0x2000050c

080016e0 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 80016e0:	b5b0      	push	{r4, r5, r7, lr}
 80016e2:	b0a0      	sub	sp, #128	; 0x80
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
 80016ec:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <mavlink_sign_packet+0x20>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d101      	bne.n	8001704 <mavlink_sign_packet+0x24>
	    return 0;
 8001700:	2300      	movs	r3, #0
 8001702:	e04f      	b.n	80017a4 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	785a      	ldrb	r2, [r3, #1]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001712:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	3301      	adds	r3, #1
 800171a:	f107 0110 	add.w	r1, r7, #16
 800171e:	2206      	movs	r2, #6
 8001720:	4618      	mov	r0, r3
 8001722:	f007 f9fd 	bl	8008b20 <memcpy>
	signing->timestamp++;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800172c:	1c54      	adds	r4, r2, #1
 800172e:	f143 0500 	adc.w	r5, r3, #0
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 8001738:	f107 0318 	add.w	r3, r7, #24
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fceb 	bl	8001118 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f103 0110 	add.w	r1, r3, #16
 8001748:	f107 0318 	add.w	r3, r7, #24
 800174c:	2220      	movs	r2, #32
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fe94 	bl	800147c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	f107 0318 	add.w	r3, r7, #24
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff fe8d 	bl	800147c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8001762:	f897 2094 	ldrb.w	r2, [r7, #148]	; 0x94
 8001766:	f107 0318 	add.w	r3, r7, #24
 800176a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fe84 	bl	800147c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 8001774:	f107 0318 	add.w	r3, r7, #24
 8001778:	2202      	movs	r2, #2
 800177a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fe7c 	bl	800147c <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 8001784:	f107 0318 	add.w	r3, r7, #24
 8001788:	2207      	movs	r2, #7
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fe75 	bl	800147c <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1dda      	adds	r2, r3, #7
 8001796:	f107 0318 	add.w	r3, r7, #24
 800179a:	4611      	mov	r1, r2
 800179c:	4618      	mov	r0, r3
 800179e:	f7ff feec 	bl	800157a <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 80017a2:	230d      	movs	r3, #13
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3780      	adds	r7, #128	; 0x80
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bdb0      	pop	{r4, r5, r7, pc}

080017ac <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80017b8:	e002      	b.n	80017c0 <_mav_trim_payload+0x14>
		length--;
 80017ba:	78fb      	ldrb	r3, [r7, #3]
 80017bc:	3b01      	subs	r3, #1
 80017be:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80017c0:	78fb      	ldrb	r3, [r7, #3]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d906      	bls.n	80017d4 <_mav_trim_payload+0x28>
 80017c6:	78fb      	ldrb	r3, [r7, #3]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f2      	beq.n	80017ba <_mav_trim_payload+0xe>
	}
	return length;
 80017d4:	78fb      	ldrb	r3, [r7, #3]
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80017e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e4:	b08f      	sub	sp, #60	; 0x3c
 80017e6:	af04      	add	r7, sp, #16
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	72fb      	strb	r3, [r7, #11]
 80017f0:	4613      	mov	r3, r2
 80017f2:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7b1b      	ldrb	r3, [r3, #12]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	bf14      	ite	ne
 8001800:	2301      	movne	r3, #1
 8001802:	2300      	moveq	r3, #0
 8001804:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 8001808:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800180c:	f083 0301 	eor.w	r3, r3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00c      	beq.n	8001830 <mavlink_finalize_message_buffer+0x4e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d008      	beq.n	8001830 <mavlink_finalize_message_buffer+0x4e>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <mavlink_finalize_message_buffer+0x4e>
 800182c:	2301      	movs	r3, #1
 800182e:	e000      	b.n	8001832 <mavlink_finalize_message_buffer+0x50>
 8001830:	2300      	movs	r3, #0
 8001832:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001836:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8001842:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <mavlink_finalize_message_buffer+0x6c>
 800184a:	230d      	movs	r3, #13
 800184c:	e000      	b.n	8001850 <mavlink_finalize_message_buffer+0x6e>
 800184e:	2300      	movs	r3, #0
 8001850:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 8001854:	230a      	movs	r3, #10
 8001856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 800185a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	22fe      	movs	r2, #254	; 0xfe
 8001866:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 8001868:	2306      	movs	r3, #6
 800186a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800186e:	e002      	b.n	8001876 <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	22fd      	movs	r2, #253	; 0xfd
 8001874:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001876:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10a      	bne.n	8001894 <mavlink_finalize_message_buffer+0xb2>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	330c      	adds	r3, #12
 8001882:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff8f 	bl	80017ac <_mav_trim_payload>
 800188e:	4603      	mov	r3, r0
 8001890:	461a      	mov	r2, r3
 8001892:	e001      	b.n	8001898 <mavlink_finalize_message_buffer+0xb6>
 8001894:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	7afa      	ldrb	r2, [r7, #11]
 80018a0:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	7aba      	ldrb	r2, [r7, #10]
 80018a6:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2200      	movs	r2, #0
 80018ac:	711a      	strb	r2, [r3, #4]
	if (signing) {
 80018ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d006      	beq.n	80018c4 <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	791b      	ldrb	r3, [r3, #4]
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	799a      	ldrb	r2, [r3, #6]
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	799b      	ldrb	r3, [r3, #6]
 80018d6:	3301      	adds	r3, #1
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	789b      	ldrb	r3, [r3, #2]
 80018e2:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	78db      	ldrb	r3, [r3, #3]
 80018e8:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 80018ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d013      	beq.n	800191a <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	799b      	ldrb	r3, [r3, #6]
 80018f6:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	79db      	ldrb	r3, [r3, #7]
 80018fc:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	7a1b      	ldrb	r3, [r3, #8]
 8001902:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	7a5a      	ldrb	r2, [r3, #9]
 8001908:	7a99      	ldrb	r1, [r3, #10]
 800190a:	0209      	lsls	r1, r1, #8
 800190c:	430a      	orrs	r2, r1
 800190e:	7adb      	ldrb	r3, [r3, #11]
 8001910:	041b      	lsls	r3, r3, #16
 8001912:	4313      	orrs	r3, r2
 8001914:	b2db      	uxtb	r3, r3
 8001916:	777b      	strb	r3, [r7, #29]
 8001918:	e030      	b.n	800197c <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	791b      	ldrb	r3, [r3, #4]
 800191e:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	795b      	ldrb	r3, [r3, #5]
 8001924:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	799b      	ldrb	r3, [r3, #6]
 800192a:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	79db      	ldrb	r3, [r3, #7]
 8001930:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	7a1b      	ldrb	r3, [r3, #8]
 8001936:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	7a5a      	ldrb	r2, [r3, #9]
 800193c:	7a99      	ldrb	r1, [r3, #10]
 800193e:	0209      	lsls	r1, r1, #8
 8001940:	430a      	orrs	r2, r1
 8001942:	7adb      	ldrb	r3, [r3, #11]
 8001944:	041b      	lsls	r3, r3, #16
 8001946:	4313      	orrs	r3, r2
 8001948:	b2db      	uxtb	r3, r3
 800194a:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	7a5a      	ldrb	r2, [r3, #9]
 8001950:	7a99      	ldrb	r1, [r3, #10]
 8001952:	0209      	lsls	r1, r1, #8
 8001954:	430a      	orrs	r2, r1
 8001956:	7adb      	ldrb	r3, [r3, #11]
 8001958:	041b      	lsls	r3, r3, #16
 800195a:	4313      	orrs	r3, r2
 800195c:	121b      	asrs	r3, r3, #8
 800195e:	b2db      	uxtb	r3, r3
 8001960:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	7a5a      	ldrb	r2, [r3, #9]
 8001968:	7a99      	ldrb	r1, [r3, #10]
 800196a:	0209      	lsls	r1, r1, #8
 800196c:	430a      	orrs	r2, r1
 800196e:	7adb      	ldrb	r3, [r3, #11]
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	4313      	orrs	r3, r2
 8001974:	141b      	asrs	r3, r3, #16
 8001976:	b2db      	uxtb	r3, r3
 8001978:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 800197c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001980:	b29b      	uxth	r3, r3
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	f107 0318 	add.w	r3, r7, #24
 800198a:	3301      	adds	r3, #1
 800198c:	4611      	mov	r1, r2
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fb86 	bl	80010a0 <crc_calculate>
 8001994:	4603      	mov	r3, r0
 8001996:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f103 010c 	add.w	r1, r3, #12
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	78db      	ldrb	r3, [r3, #3]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f107 0316 	add.w	r3, r7, #22
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fb99 	bl	80010e0 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 80019ae:	f107 0216 	add.w	r2, r7, #22
 80019b2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fb31 	bl	8001020 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 80019be:	8af9      	ldrh	r1, [r7, #22]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	330c      	adds	r3, #12
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	78d2      	ldrb	r2, [r2, #3]
 80019c8:	4413      	add	r3, r2
 80019ca:	b2ca      	uxtb	r2, r1
 80019cc:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80019ce:	8afb      	ldrh	r3, [r7, #22]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	b299      	uxth	r1, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f103 020c 	add.w	r2, r3, #12
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	78db      	ldrb	r3, [r3, #3]
 80019de:	3301      	adds	r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	b2ca      	uxtb	r2, r1
 80019e4:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 80019e6:	8afa      	ldrh	r2, [r7, #22]
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	801a      	strh	r2, [r3, #0]

	if (signing) {
 80019ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d01a      	beq.n	8001a2a <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f503 758b 	add.w	r5, r3, #278	; 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 8001a06:	68f9      	ldr	r1, [r7, #12]
 8001a08:	310c      	adds	r1, #12
 8001a0a:	68f8      	ldr	r0, [r7, #12]
 8001a0c:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 8001a0e:	4401      	add	r1, r0
 8001a10:	f897 6027 	ldrb.w	r6, [r7, #39]	; 0x27
 8001a14:	f107 0018 	add.w	r0, r7, #24
 8001a18:	9102      	str	r1, [sp, #8]
 8001a1a:	9201      	str	r2, [sp, #4]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	4633      	mov	r3, r6
 8001a20:	4602      	mov	r2, r0
 8001a22:	4629      	mov	r1, r5
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff fe5b 	bl	80016e0 <mavlink_sign_packet>
	}
	
	return msg->len + header_len + 2 + signature_len;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	78db      	ldrb	r3, [r3, #3]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	4413      	add	r3, r2
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	3302      	adds	r3, #2
 8001a46:	b29b      	uxth	r3, r3
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	372c      	adds	r7, #44	; 0x2c
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a50 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af04      	add	r7, sp, #16
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	4608      	mov	r0, r1
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4603      	mov	r3, r0
 8001a60:	70fb      	strb	r3, [r7, #3]
 8001a62:	460b      	mov	r3, r1
 8001a64:	70bb      	strb	r3, [r7, #2]
 8001a66:	4613      	mov	r3, r2
 8001a68:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8001a6a:	787b      	ldrb	r3, [r7, #1]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fe23 	bl	80016b8 <mavlink_get_channel_status>
 8001a72:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 8001a74:	78ba      	ldrb	r2, [r7, #2]
 8001a76:	78f9      	ldrb	r1, [r7, #3]
 8001a78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a7c:	9302      	str	r3, [sp, #8]
 8001a7e:	7f3b      	ldrb	r3, [r7, #28]
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	7e3b      	ldrb	r3, [r7, #24]
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff feaa 	bl	80017e2 <mavlink_finalize_message_buffer>
 8001a8e:	4603      	mov	r3, r0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af04      	add	r7, sp, #16
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	70fb      	strb	r3, [r7, #3]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	70bb      	strb	r3, [r7, #2]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8001ab2:	78ba      	ldrb	r2, [r7, #2]
 8001ab4:	78f9      	ldrb	r1, [r7, #3]
 8001ab6:	7d3b      	ldrb	r3, [r7, #20]
 8001ab8:	9302      	str	r3, [sp, #8]
 8001aba:	7c3b      	ldrb	r3, [r7, #16]
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	787b      	ldrb	r3, [r7, #1]
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ffc3 	bl	8001a50 <mavlink_finalize_message_chan>
 8001aca:	4603      	mov	r3, r0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	78db      	ldrb	r3, [r3, #3]
 8001ae2:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	789b      	ldrb	r3, [r3, #2]
 8001ae8:	2bfe      	cmp	r3, #254	; 0xfe
 8001aea:	d13a      	bne.n	8001b62 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 8001af0:	2305      	movs	r3, #5
 8001af2:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	789a      	ldrb	r2, [r3, #2]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3301      	adds	r3, #1
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3302      	adds	r3, #2
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	7992      	ldrb	r2, [r2, #6]
 8001b0c:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3303      	adds	r3, #3
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	79d2      	ldrb	r2, [r2, #7]
 8001b16:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	7a12      	ldrb	r2, [r2, #8]
 8001b20:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7a5a      	ldrb	r2, [r3, #9]
 8001b26:	7a99      	ldrb	r1, [r3, #10]
 8001b28:	0209      	lsls	r1, r1, #8
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	7adb      	ldrb	r3, [r3, #11]
 8001b2e:	041b      	lsls	r3, r3, #16
 8001b30:	4313      	orrs	r3, r2
 8001b32:	461a      	mov	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3305      	adds	r3, #5
 8001b38:	b2d2      	uxtb	r2, r2
 8001b3a:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	1d98      	adds	r0, r3, #6
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	f103 010c 	add.w	r1, r3, #12
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	78db      	ldrb	r3, [r3, #3]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f006 ffe8 	bl	8008b20 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8001b50:	7dbb      	ldrb	r3, [r7, #22]
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	78d2      	ldrb	r2, [r2, #3]
 8001b56:	4413      	add	r3, r2
 8001b58:	3301      	adds	r3, #1
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	e06c      	b.n	8001c3c <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	330c      	adds	r3, #12
 8001b66:	7bfa      	ldrb	r2, [r7, #15]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fe1e 	bl	80017ac <_mav_trim_payload>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 8001b74:	2309      	movs	r3, #9
 8001b76:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	789a      	ldrb	r2, [r3, #2]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3301      	adds	r3, #1
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	7912      	ldrb	r2, [r2, #4]
 8001b90:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	3303      	adds	r3, #3
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	7952      	ldrb	r2, [r2, #5]
 8001b9a:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3304      	adds	r3, #4
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	7992      	ldrb	r2, [r2, #6]
 8001ba4:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3305      	adds	r3, #5
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	79d2      	ldrb	r2, [r2, #7]
 8001bae:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3306      	adds	r3, #6
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	7a12      	ldrb	r2, [r2, #8]
 8001bb8:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	7a5a      	ldrb	r2, [r3, #9]
 8001bbe:	7a99      	ldrb	r1, [r3, #10]
 8001bc0:	0209      	lsls	r1, r1, #8
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	7adb      	ldrb	r3, [r3, #11]
 8001bc6:	041b      	lsls	r3, r3, #16
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	461a      	mov	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3307      	adds	r3, #7
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	7a5a      	ldrb	r2, [r3, #9]
 8001bd8:	7a99      	ldrb	r1, [r3, #10]
 8001bda:	0209      	lsls	r1, r1, #8
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	7adb      	ldrb	r3, [r3, #11]
 8001be0:	041b      	lsls	r3, r3, #16
 8001be2:	4313      	orrs	r3, r2
 8001be4:	121a      	asrs	r2, r3, #8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3308      	adds	r3, #8
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	7a5a      	ldrb	r2, [r3, #9]
 8001bf2:	7a99      	ldrb	r1, [r3, #10]
 8001bf4:	0209      	lsls	r1, r1, #8
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	7adb      	ldrb	r3, [r3, #11]
 8001bfa:	041b      	lsls	r3, r3, #16
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	141a      	asrs	r2, r3, #16
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3309      	adds	r3, #9
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f103 000a 	add.w	r0, r3, #10
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	330c      	adds	r3, #12
 8001c12:	7bfa      	ldrb	r2, [r7, #15]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f006 ff83 	bl	8008b20 <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8001c1a:	7dba      	ldrb	r2, [r7, #22]
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	4413      	add	r3, r2
 8001c20:	3301      	adds	r3, #1
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	4413      	add	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	791b      	ldrb	r3, [r3, #4]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <mavlink_msg_to_send_buffer+0x164>
 8001c34:	230d      	movs	r3, #13
 8001c36:	e000      	b.n	8001c3a <mavlink_msg_to_send_buffer+0x166>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	881b      	ldrh	r3, [r3, #0]
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	0a1b      	lsrs	r3, r3, #8
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	3301      	adds	r3, #1
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1c98      	adds	r0, r3, #2
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f503 738b 	add.w	r3, r3, #278	; 0x116
 8001c6a:	7dfa      	ldrb	r2, [r7, #23]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f006 ff57 	bl	8008b20 <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8001c72:	7dbb      	ldrb	r3, [r7, #22]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	4413      	add	r3, r2
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	3303      	adds	r3, #3
 8001c88:	b29b      	uxth	r3, r3
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static inline void mav_array_memcpy(void *dest, const void *src, size_t n)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
	if (src == NULL) {
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <mav_array_memcpy+0x1e>
		memset(dest, 0, n);
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f006 ff47 	bl	8008b3c <memset>
	} else {
		memcpy(dest, src, n);
	}
}
 8001cae:	e004      	b.n	8001cba <mav_array_memcpy+0x28>
		memcpy(dest, src, n);
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f006 ff33 	bl	8008b20 <memcpy>
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <mavlink_msg_esc_telemetry_1_to_4_pack>:
 * @param count  count of telemetry packets received (wraps at 65535).
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_esc_telemetry_1_to_4_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               const uint8_t *temperature, const uint16_t *voltage, const uint16_t *current, const uint16_t *totalcurrent, const uint16_t *rpm, const uint16_t *count)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b092      	sub	sp, #72	; 0x48
 8001cc6:	af02      	add	r7, sp, #8
 8001cc8:	60ba      	str	r2, [r7, #8]
 8001cca:	607b      	str	r3, [r7, #4]
 8001ccc:	4603      	mov	r3, r0
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	73bb      	strb	r3, [r7, #14]
    _mav_put_uint8_t_array(buf, 40, temperature, 4);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ESC_TELEMETRY_1_TO_4_LEN);
#else
    mavlink_esc_telemetry_1_to_4_t packet;

    mav_array_memcpy(packet.voltage, voltage, sizeof(uint16_t)*4);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2208      	movs	r2, #8
 8001cda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ffd8 	bl	8001c92 <mav_array_memcpy>
    mav_array_memcpy(packet.current, current, sizeof(uint16_t)*4);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	2208      	movs	r2, #8
 8001cea:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ffd0 	bl	8001c92 <mav_array_memcpy>
    mav_array_memcpy(packet.totalcurrent, totalcurrent, sizeof(uint16_t)*4);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	3310      	adds	r3, #16
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ffc8 	bl	8001c92 <mav_array_memcpy>
    mav_array_memcpy(packet.rpm, rpm, sizeof(uint16_t)*4);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	3318      	adds	r3, #24
 8001d08:	2208      	movs	r2, #8
 8001d0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff ffc0 	bl	8001c92 <mav_array_memcpy>
    mav_array_memcpy(packet.count, count, sizeof(uint16_t)*4);
 8001d12:	f107 0314 	add.w	r3, r7, #20
 8001d16:	3320      	adds	r3, #32
 8001d18:	2208      	movs	r2, #8
 8001d1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ffb8 	bl	8001c92 <mav_array_memcpy>
    mav_array_memcpy(packet.temperature, temperature, sizeof(uint8_t)*4);
 8001d22:	f107 0314 	add.w	r3, r7, #20
 8001d26:	3328      	adds	r3, #40	; 0x28
 8001d28:	2204      	movs	r2, #4
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ffb0 	bl	8001c92 <mav_array_memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ESC_TELEMETRY_1_TO_4_LEN);
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	330c      	adds	r3, #12
 8001d36:	f107 0114 	add.w	r1, r7, #20
 8001d3a:	222c      	movs	r2, #44	; 0x2c
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f006 feef 	bl	8008b20 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_ESC_TELEMETRY_1_TO_4;
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f042 0216 	orr.w	r2, r2, #22
 8001d4a:	725a      	strb	r2, [r3, #9]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8001d52:	729a      	strb	r2, [r3, #10]
 8001d54:	2200      	movs	r2, #0
 8001d56:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ESC_TELEMETRY_1_TO_4_MIN_LEN, MAVLINK_MSG_ID_ESC_TELEMETRY_1_TO_4_LEN, MAVLINK_MSG_ID_ESC_TELEMETRY_1_TO_4_CRC);
 8001d58:	7bba      	ldrb	r2, [r7, #14]
 8001d5a:	7bf9      	ldrb	r1, [r7, #15]
 8001d5c:	2390      	movs	r3, #144	; 0x90
 8001d5e:	9301      	str	r3, [sp, #4]
 8001d60:	232c      	movs	r3, #44	; 0x2c
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	232c      	movs	r3, #44	; 0x2c
 8001d66:	68b8      	ldr	r0, [r7, #8]
 8001d68:	f7ff fe96 	bl	8001a98 <mavlink_finalize_message>
 8001d6c:	4603      	mov	r3, r0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3740      	adds	r7, #64	; 0x40
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <mavlink_msg_esc_telemetry_1_to_4_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param esc_telemetry_1_to_4 C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_esc_telemetry_1_to_4_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_esc_telemetry_1_to_4_t* esc_telemetry_1_to_4)
{
 8001d76:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d78:	b08b      	sub	sp, #44	; 0x2c
 8001d7a:	af06      	add	r7, sp, #24
 8001d7c:	60ba      	str	r2, [r7, #8]
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	4603      	mov	r3, r0
 8001d82:	73fb      	strb	r3, [r7, #15]
 8001d84:	460b      	mov	r3, r1
 8001d86:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_esc_telemetry_1_to_4_pack(system_id, component_id, msg, esc_telemetry_1_to_4->temperature, esc_telemetry_1_to_4->voltage, esc_telemetry_1_to_4->current, esc_telemetry_1_to_4->totalcurrent, esc_telemetry_1_to_4->rpm, esc_telemetry_1_to_4->count);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f103 0c28 	add.w	ip, r3, #40	; 0x28
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	3110      	adds	r1, #16
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	3018      	adds	r0, #24
 8001d9c:	687c      	ldr	r4, [r7, #4]
 8001d9e:	3420      	adds	r4, #32
 8001da0:	7bbe      	ldrb	r6, [r7, #14]
 8001da2:	7bfd      	ldrb	r5, [r7, #15]
 8001da4:	9404      	str	r4, [sp, #16]
 8001da6:	9003      	str	r0, [sp, #12]
 8001da8:	9102      	str	r1, [sp, #8]
 8001daa:	9201      	str	r2, [sp, #4]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	4663      	mov	r3, ip
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	4631      	mov	r1, r6
 8001db4:	4628      	mov	r0, r5
 8001db6:	f7ff ff84 	bl	8001cc2 <mavlink_msg_esc_telemetry_1_to_4_pack>
 8001dba:	4603      	mov	r3, r0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dc4 <mavlink_msg_esc_telemetry_5_to_8_pack>:
 * @param count  count of telemetry packets received (wraps at 65535).
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_esc_telemetry_5_to_8_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               const uint8_t *temperature, const uint16_t *voltage, const uint16_t *current, const uint16_t *totalcurrent, const uint16_t *rpm, const uint16_t *count)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b092      	sub	sp, #72	; 0x48
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	60ba      	str	r2, [r7, #8]
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4603      	mov	r3, r0
 8001dd0:	73fb      	strb	r3, [r7, #15]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	73bb      	strb	r3, [r7, #14]
    _mav_put_uint8_t_array(buf, 40, temperature, 4);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_ESC_TELEMETRY_5_TO_8_LEN);
#else
    mavlink_esc_telemetry_5_to_8_t packet;

    mav_array_memcpy(packet.voltage, voltage, sizeof(uint16_t)*4);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	2208      	movs	r2, #8
 8001ddc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff ff57 	bl	8001c92 <mav_array_memcpy>
    mav_array_memcpy(packet.current, current, sizeof(uint16_t)*4);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	3308      	adds	r3, #8
 8001dea:	2208      	movs	r2, #8
 8001dec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff4f 	bl	8001c92 <mav_array_memcpy>
    mav_array_memcpy(packet.totalcurrent, totalcurrent, sizeof(uint16_t)*4);
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	3310      	adds	r3, #16
 8001dfa:	2208      	movs	r2, #8
 8001dfc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff47 	bl	8001c92 <mav_array_memcpy>
    mav_array_memcpy(packet.rpm, rpm, sizeof(uint16_t)*4);
 8001e04:	f107 0314 	add.w	r3, r7, #20
 8001e08:	3318      	adds	r3, #24
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff3f 	bl	8001c92 <mav_array_memcpy>
    mav_array_memcpy(packet.count, count, sizeof(uint16_t)*4);
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	3320      	adds	r3, #32
 8001e1a:	2208      	movs	r2, #8
 8001e1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff37 	bl	8001c92 <mav_array_memcpy>
    mav_array_memcpy(packet.temperature, temperature, sizeof(uint8_t)*4);
 8001e24:	f107 0314 	add.w	r3, r7, #20
 8001e28:	3328      	adds	r3, #40	; 0x28
 8001e2a:	2204      	movs	r2, #4
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff2f 	bl	8001c92 <mav_array_memcpy>
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_ESC_TELEMETRY_5_TO_8_LEN);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	330c      	adds	r3, #12
 8001e38:	f107 0114 	add.w	r1, r7, #20
 8001e3c:	222c      	movs	r2, #44	; 0x2c
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f006 fe6e 	bl	8008b20 <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_ESC_TELEMETRY_5_TO_8;
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f042 0217 	orr.w	r2, r2, #23
 8001e4c:	725a      	strb	r2, [r3, #9]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f042 022b 	orr.w	r2, r2, #43	; 0x2b
 8001e54:	729a      	strb	r2, [r3, #10]
 8001e56:	2200      	movs	r2, #0
 8001e58:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_ESC_TELEMETRY_5_TO_8_MIN_LEN, MAVLINK_MSG_ID_ESC_TELEMETRY_5_TO_8_LEN, MAVLINK_MSG_ID_ESC_TELEMETRY_5_TO_8_CRC);
 8001e5a:	7bba      	ldrb	r2, [r7, #14]
 8001e5c:	7bf9      	ldrb	r1, [r7, #15]
 8001e5e:	2385      	movs	r3, #133	; 0x85
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	232c      	movs	r3, #44	; 0x2c
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	232c      	movs	r3, #44	; 0x2c
 8001e68:	68b8      	ldr	r0, [r7, #8]
 8001e6a:	f7ff fe15 	bl	8001a98 <mavlink_finalize_message>
 8001e6e:	4603      	mov	r3, r0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3740      	adds	r7, #64	; 0x40
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <mavlink_msg_esc_telemetry_5_to_8_encode>:
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param esc_telemetry_5_to_8 C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_esc_telemetry_5_to_8_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_esc_telemetry_5_to_8_t* esc_telemetry_5_to_8)
{
 8001e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7a:	b08b      	sub	sp, #44	; 0x2c
 8001e7c:	af06      	add	r7, sp, #24
 8001e7e:	60ba      	str	r2, [r7, #8]
 8001e80:	607b      	str	r3, [r7, #4]
 8001e82:	4603      	mov	r3, r0
 8001e84:	73fb      	strb	r3, [r7, #15]
 8001e86:	460b      	mov	r3, r1
 8001e88:	73bb      	strb	r3, [r7, #14]
    return mavlink_msg_esc_telemetry_5_to_8_pack(system_id, component_id, msg, esc_telemetry_5_to_8->temperature, esc_telemetry_5_to_8->voltage, esc_telemetry_5_to_8->current, esc_telemetry_5_to_8->totalcurrent, esc_telemetry_5_to_8->rpm, esc_telemetry_5_to_8->count);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f103 0c28 	add.w	ip, r3, #40	; 0x28
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	3208      	adds	r2, #8
 8001e96:	6879      	ldr	r1, [r7, #4]
 8001e98:	3110      	adds	r1, #16
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	3018      	adds	r0, #24
 8001e9e:	687c      	ldr	r4, [r7, #4]
 8001ea0:	3420      	adds	r4, #32
 8001ea2:	7bbe      	ldrb	r6, [r7, #14]
 8001ea4:	7bfd      	ldrb	r5, [r7, #15]
 8001ea6:	9404      	str	r4, [sp, #16]
 8001ea8:	9003      	str	r0, [sp, #12]
 8001eaa:	9102      	str	r1, [sp, #8]
 8001eac:	9201      	str	r2, [sp, #4]
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	4663      	mov	r3, ip
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	4631      	mov	r1, r6
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	f7ff ff84 	bl	8001dc4 <mavlink_msg_esc_telemetry_5_to_8_pack>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ec6 <getdata>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t getdata(uint8_t SoftUartNumber)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
    uint8_t ch;
    while(SoftUartRxAlavailable(SoftUartNumber)==0);
 8001ed0:	bf00      	nop
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 f9a9 	bl	800322c <SoftUartRxAlavailable>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f8      	beq.n	8001ed2 <getdata+0xc>
    SoftUartReadRxBuffer(SoftUartNumber,&ch,1);
 8001ee0:	f107 010f 	add.w	r1, r7, #15
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f001 f9b3 	bl	8003254 <SoftUartReadRxBuffer>
    return ch;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <transmit_mavlink_esc_1_to_4>:

mavlink_esc_telemetry_1_to_4_t esc1 = {0};
mavlink_esc_telemetry_5_to_8_t esc2 = {0};
void transmit_mavlink_esc_1_to_4(mavlink_esc_telemetry_1_to_4_t esc){
 8001ef8:	b084      	sub	sp, #16
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b0e4      	sub	sp, #400	; 0x190
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	f507 7ccc 	add.w	ip, r7, #408	; 0x198
 8001f04:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    mavlink_message_t msg;
    uint8_t _buffer[100]= {0};
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	3304      	adds	r3, #4
 8001f10:	2260      	movs	r2, #96	; 0x60
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f006 fe11 	bl	8008b3c <memset>
    for (int i = 0; i<4; i++){
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001f20:	e065      	b.n	8001fee <transmit_mavlink_esc_1_to_4+0xf6>
        esc.voltage[i] = TelemetryArray[i].voltage;
 8001f22:	4a46      	ldr	r2, [pc, #280]	; (800203c <transmit_mavlink_esc_1_to_4+0x144>)
 8001f24:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f28:	2134      	movs	r1, #52	; 0x34
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	3314      	adds	r3, #20
 8001f32:	edd3 7a00 	vldr	s15, [r3]
 8001f36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3a:	ee17 3a90 	vmov	r3, s15
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f44:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8001f48:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        esc.count[i] = TelemetryArray[i].BaleNo;
 8001f4c:	4a3b      	ldr	r2, [pc, #236]	; (800203c <transmit_mavlink_esc_1_to_4+0x144>)
 8001f4e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f52:	2134      	movs	r1, #52	; 0x34
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	881a      	ldrh	r2, [r3, #0]
 8001f5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f62:	3310      	adds	r3, #16
 8001f64:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8001f68:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        esc.totalcurrent[i] = TelemetryArray[i].current;
 8001f6c:	4a33      	ldr	r2, [pc, #204]	; (800203c <transmit_mavlink_esc_1_to_4+0x144>)
 8001f6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f72:	2134      	movs	r1, #52	; 0x34
 8001f74:	fb01 f303 	mul.w	r3, r1, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	3318      	adds	r3, #24
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f84:	ee17 3a90 	vmov	r3, s15
 8001f88:	b29a      	uxth	r2, r3
 8001f8a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f8e:	3308      	adds	r3, #8
 8001f90:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8001f94:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        esc.rpm[i] = TelemetryArray[i].rpm;
 8001f98:	4a28      	ldr	r2, [pc, #160]	; (800203c <transmit_mavlink_esc_1_to_4+0x144>)
 8001f9a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001f9e:	2134      	movs	r1, #52	; 0x34
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3310      	adds	r3, #16
 8001fa8:	881a      	ldrh	r2, [r3, #0]
 8001faa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001fae:	330c      	adds	r3, #12
 8001fb0:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8001fb4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        esc.current[i] = TelemetryArray[i].phase;
 8001fb8:	4a20      	ldr	r2, [pc, #128]	; (800203c <transmit_mavlink_esc_1_to_4+0x144>)
 8001fba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001fbe:	2134      	movs	r1, #52	; 0x34
 8001fc0:	fb01 f303 	mul.w	r3, r1, r3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	331c      	adds	r3, #28
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fd0:	ee17 3a90 	vmov	r3, s15
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001fda:	3304      	adds	r3, #4
 8001fdc:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8001fe0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i<4; i++){
 8001fe4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001fee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	dd95      	ble.n	8001f22 <transmit_mavlink_esc_1_to_4+0x2a>
    }
    mavlink_msg_esc_telemetry_1_to_4_encode(SYSTEM_ID, COMPONENT_ID, &msg, &esc);
 8001ff6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8001ffa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001ffe:	2100      	movs	r1, #0
 8002000:	2000      	movs	r0, #0
 8002002:	f7ff feb8 	bl	8001d76 <mavlink_msg_esc_telemetry_1_to_4_encode>
    uint8_t len = mavlink_msg_to_send_buffer(_buffer, &msg);
 8002006:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fd60 	bl	8001ad4 <mavlink_msg_to_send_buffer>
 8002014:	4603      	mov	r3, r0
 8002016:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
//    SoftUartPuts(0, _buffer, len);
    HAL_UART_Transmit(&huart4, _buffer, len, 100);
 800201a:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 800201e:	b29a      	uxth	r2, r3
 8002020:	1d39      	adds	r1, r7, #4
 8002022:	2364      	movs	r3, #100	; 0x64
 8002024:	4806      	ldr	r0, [pc, #24]	; (8002040 <transmit_mavlink_esc_1_to_4+0x148>)
 8002026:	f004 fb6e 	bl	8006706 <HAL_UART_Transmit>
//    HAL_UART_Transmit_IT(&huart4, _buffer, len);
}
 800202a:	bf00      	nop
 800202c:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8002030:	46bd      	mov	sp, r7
 8002032:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002036:	b004      	add	sp, #16
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	200046cc 	.word	0x200046cc
 8002040:	20004a3c 	.word	0x20004a3c

08002044 <transmit_mavlink_esc_5_to_8>:
void transmit_mavlink_esc_5_to_8(mavlink_esc_telemetry_5_to_8_t esc){
 8002044:	b084      	sub	sp, #16
 8002046:	b580      	push	{r7, lr}
 8002048:	b0e4      	sub	sp, #400	; 0x190
 800204a:	af00      	add	r7, sp, #0
 800204c:	f507 7ccc 	add.w	ip, r7, #408	; 0x198
 8002050:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    mavlink_message_t msg;
    uint8_t _buffer[100]= {0};
 8002054:	1d3b      	adds	r3, r7, #4
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	3304      	adds	r3, #4
 800205c:	2260      	movs	r2, #96	; 0x60
 800205e:	2100      	movs	r1, #0
 8002060:	4618      	mov	r0, r3
 8002062:	f006 fd6b 	bl	8008b3c <memset>
    for (int i = 0; i<4; i++){
 8002066:	2300      	movs	r3, #0
 8002068:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800206c:	e06a      	b.n	8002144 <transmit_mavlink_esc_5_to_8+0x100>
        esc.voltage[i] = TelemetryArray[i+4].voltage;
 800206e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002072:	3304      	adds	r3, #4
 8002074:	4a46      	ldr	r2, [pc, #280]	; (8002190 <transmit_mavlink_esc_5_to_8+0x14c>)
 8002076:	2134      	movs	r1, #52	; 0x34
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	3314      	adds	r3, #20
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002088:	ee17 3a90 	vmov	r3, s15
 800208c:	b29a      	uxth	r2, r3
 800208e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002092:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8002096:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        esc.count[i] = TelemetryArray[i+4].BaleNo;
 800209a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800209e:	3304      	adds	r3, #4
 80020a0:	4a3b      	ldr	r2, [pc, #236]	; (8002190 <transmit_mavlink_esc_5_to_8+0x14c>)
 80020a2:	2134      	movs	r1, #52	; 0x34
 80020a4:	fb01 f303 	mul.w	r3, r1, r3
 80020a8:	4413      	add	r3, r2
 80020aa:	3304      	adds	r3, #4
 80020ac:	881a      	ldrh	r2, [r3, #0]
 80020ae:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80020b2:	3310      	adds	r3, #16
 80020b4:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80020b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        esc.totalcurrent[i] = TelemetryArray[i+4].current;
 80020bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80020c0:	3304      	adds	r3, #4
 80020c2:	4a33      	ldr	r2, [pc, #204]	; (8002190 <transmit_mavlink_esc_5_to_8+0x14c>)
 80020c4:	2134      	movs	r1, #52	; 0x34
 80020c6:	fb01 f303 	mul.w	r3, r1, r3
 80020ca:	4413      	add	r3, r2
 80020cc:	3318      	adds	r3, #24
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d6:	ee17 3a90 	vmov	r3, s15
 80020da:	b29a      	uxth	r2, r3
 80020dc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80020e0:	3308      	adds	r3, #8
 80020e2:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80020e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        esc.rpm[i] = TelemetryArray[i+4].rpm;
 80020ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80020ee:	3304      	adds	r3, #4
 80020f0:	4a27      	ldr	r2, [pc, #156]	; (8002190 <transmit_mavlink_esc_5_to_8+0x14c>)
 80020f2:	2134      	movs	r1, #52	; 0x34
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	3310      	adds	r3, #16
 80020fc:	881a      	ldrh	r2, [r3, #0]
 80020fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002102:	330c      	adds	r3, #12
 8002104:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8002108:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        esc.current[i] = TelemetryArray[i+4].phase;
 800210c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002110:	3304      	adds	r3, #4
 8002112:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <transmit_mavlink_esc_5_to_8+0x14c>)
 8002114:	2134      	movs	r1, #52	; 0x34
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	331c      	adds	r3, #28
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002126:	ee17 3a90 	vmov	r3, s15
 800212a:	b29a      	uxth	r2, r3
 800212c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002130:	3304      	adds	r3, #4
 8002132:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8002136:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i<4; i++){
 800213a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800213e:	3301      	adds	r3, #1
 8002140:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002144:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8002148:	2b03      	cmp	r3, #3
 800214a:	dd90      	ble.n	800206e <transmit_mavlink_esc_5_to_8+0x2a>
    }
    mavlink_msg_esc_telemetry_5_to_8_encode(SYSTEM_ID, COMPONENT_ID, &msg, &esc);
 800214c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002150:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002154:	2100      	movs	r1, #0
 8002156:	2000      	movs	r0, #0
 8002158:	f7ff fe8e 	bl	8001e78 <mavlink_msg_esc_telemetry_5_to_8_encode>
    uint8_t len = mavlink_msg_to_send_buffer(_buffer, &msg);
 800215c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fcb5 	bl	8001ad4 <mavlink_msg_to_send_buffer>
 800216a:	4603      	mov	r3, r0
 800216c:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
//    SoftUartPuts(0, _buffer, len);
    HAL_UART_Transmit(&huart4, _buffer, len, 100);
 8002170:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8002174:	b29a      	uxth	r2, r3
 8002176:	1d39      	adds	r1, r7, #4
 8002178:	2364      	movs	r3, #100	; 0x64
 800217a:	4806      	ldr	r0, [pc, #24]	; (8002194 <transmit_mavlink_esc_5_to_8+0x150>)
 800217c:	f004 fac3 	bl	8006706 <HAL_UART_Transmit>
//    HAL_UART_Transmit_IT(&huart4, _buffer, len);
}
 8002180:	bf00      	nop
 8002182:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8002186:	46bd      	mov	sp, r7
 8002188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800218c:	b004      	add	sp, #16
 800218e:	4770      	bx	lr
 8002190:	200046cc 	.word	0x200046cc
 8002194:	20004a3c 	.word	0x20004a3c

08002198 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002198:	b5b0      	push	{r4, r5, r7, lr}
 800219a:	b090      	sub	sp, #64	; 0x40
 800219c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800219e:	f002 f9d1 	bl	8004544 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021a2:	f000 f92b 	bl	80023fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a6:	f000 fb27 	bl	80027f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80021aa:	f000 faa7 	bl	80026fc <MX_USART2_UART_Init>
  MX_TIM10_Init();
 80021ae:	f000 fa05 	bl	80025bc <MX_TIM10_Init>
  MX_USART3_UART_Init();
 80021b2:	f000 facd 	bl	8002750 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80021b6:	f000 fa23 	bl	8002600 <MX_UART4_Init>
  MX_UART5_Init();
 80021ba:	f000 fa4b 	bl	8002654 <MX_UART5_Init>
  MX_USART1_UART_Init();
 80021be:	f000 fa73 	bl	80026a8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80021c2:	f000 faef 	bl	80027a4 <MX_USART6_UART_Init>
  MX_TIM4_Init();
 80021c6:	f000 f983 	bl	80024d0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80021ca:	2108      	movs	r1, #8
 80021cc:	485e      	ldr	r0, [pc, #376]	; (8002348 <main+0x1b0>)
 80021ce:	f003 fb2b 	bl	8005828 <HAL_TIM_PWM_Start>
//  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,600);
  HAL_UART_Receive_IT(&huart1, &aRxBuffer_1, RXBUFFERSIZE);
 80021d2:	2201      	movs	r2, #1
 80021d4:	495d      	ldr	r1, [pc, #372]	; (800234c <main+0x1b4>)
 80021d6:	485e      	ldr	r0, [pc, #376]	; (8002350 <main+0x1b8>)
 80021d8:	f004 fb27 	bl	800682a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &aRxBuffer_2, RXBUFFERSIZE);
 80021dc:	2201      	movs	r2, #1
 80021de:	495d      	ldr	r1, [pc, #372]	; (8002354 <main+0x1bc>)
 80021e0:	485d      	ldr	r0, [pc, #372]	; (8002358 <main+0x1c0>)
 80021e2:	f004 fb22 	bl	800682a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &aRxBuffer_3, RXBUFFERSIZE);
 80021e6:	2201      	movs	r2, #1
 80021e8:	495c      	ldr	r1, [pc, #368]	; (800235c <main+0x1c4>)
 80021ea:	485d      	ldr	r0, [pc, #372]	; (8002360 <main+0x1c8>)
 80021ec:	f004 fb1d 	bl	800682a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, &aRxBuffer_4, RXBUFFERSIZE);
 80021f0:	2201      	movs	r2, #1
 80021f2:	495c      	ldr	r1, [pc, #368]	; (8002364 <main+0x1cc>)
 80021f4:	485c      	ldr	r0, [pc, #368]	; (8002368 <main+0x1d0>)
 80021f6:	f004 fb18 	bl	800682a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart5, &aRxBuffer_5, RXBUFFERSIZE);
 80021fa:	2201      	movs	r2, #1
 80021fc:	495b      	ldr	r1, [pc, #364]	; (800236c <main+0x1d4>)
 80021fe:	485c      	ldr	r0, [pc, #368]	; (8002370 <main+0x1d8>)
 8002200:	f004 fb13 	bl	800682a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &aRxBuffer_6, RXBUFFERSIZE);
 8002204:	2201      	movs	r2, #1
 8002206:	495b      	ldr	r1, [pc, #364]	; (8002374 <main+0x1dc>)
 8002208:	485b      	ldr	r0, [pc, #364]	; (8002378 <main+0x1e0>)
 800220a:	f004 fb0e 	bl	800682a <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 800220e:	485b      	ldr	r0, [pc, #364]	; (800237c <main+0x1e4>)
 8002210:	f003 fa40 	bl	8005694 <HAL_TIM_Base_Start_IT>

  ringbuf0 = &ring_0;
 8002214:	4b5a      	ldr	r3, [pc, #360]	; (8002380 <main+0x1e8>)
 8002216:	4a5b      	ldr	r2, [pc, #364]	; (8002384 <main+0x1ec>)
 8002218:	601a      	str	r2, [r3, #0]
  ringbuf1 = &ring_1;
 800221a:	4b5b      	ldr	r3, [pc, #364]	; (8002388 <main+0x1f0>)
 800221c:	4a5b      	ldr	r2, [pc, #364]	; (800238c <main+0x1f4>)
 800221e:	601a      	str	r2, [r3, #0]
  ringbuf2 = &ring_2;
 8002220:	4b5b      	ldr	r3, [pc, #364]	; (8002390 <main+0x1f8>)
 8002222:	4a5c      	ldr	r2, [pc, #368]	; (8002394 <main+0x1fc>)
 8002224:	601a      	str	r2, [r3, #0]
  ringbuf3 = &ring_3;
 8002226:	4b5c      	ldr	r3, [pc, #368]	; (8002398 <main+0x200>)
 8002228:	4a5c      	ldr	r2, [pc, #368]	; (800239c <main+0x204>)
 800222a:	601a      	str	r2, [r3, #0]
  ringbuf4 = &ring_4;
 800222c:	4b5c      	ldr	r3, [pc, #368]	; (80023a0 <main+0x208>)
 800222e:	4a5d      	ldr	r2, [pc, #372]	; (80023a4 <main+0x20c>)
 8002230:	601a      	str	r2, [r3, #0]
  ringbuf5 = &ring_5;
 8002232:	4b5d      	ldr	r3, [pc, #372]	; (80023a8 <main+0x210>)
 8002234:	4a5d      	ldr	r2, [pc, #372]	; (80023ac <main+0x214>)
 8002236:	601a      	str	r2, [r3, #0]
  ringbuf6 = &ring_6;
 8002238:	4b5d      	ldr	r3, [pc, #372]	; (80023b0 <main+0x218>)
 800223a:	4a5e      	ldr	r2, [pc, #376]	; (80023b4 <main+0x21c>)
 800223c:	601a      	str	r2, [r3, #0]
  ringbuf7 = &ring_7;
 800223e:	4b5e      	ldr	r3, [pc, #376]	; (80023b8 <main+0x220>)
 8002240:	4a5e      	ldr	r2, [pc, #376]	; (80023bc <main+0x224>)
 8002242:	601a      	str	r2, [r3, #0]

  RINGBUF_Init((RINGBUF*)ringbuf0, ptBufferUART0, RINGBUF_BUFF_LEN);
 8002244:	4b4e      	ldr	r3, [pc, #312]	; (8002380 <main+0x1e8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2264      	movs	r2, #100	; 0x64
 800224a:	495d      	ldr	r1, [pc, #372]	; (80023c0 <main+0x228>)
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fe92 	bl	8002f76 <RINGBUF_Init>
  RINGBUF_Init((RINGBUF*)ringbuf1, ptBufferUART1, RINGBUF_BUFF_LEN);
 8002252:	4b4d      	ldr	r3, [pc, #308]	; (8002388 <main+0x1f0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2264      	movs	r2, #100	; 0x64
 8002258:	495a      	ldr	r1, [pc, #360]	; (80023c4 <main+0x22c>)
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fe8b 	bl	8002f76 <RINGBUF_Init>
  RINGBUF_Init((RINGBUF*)ringbuf2, ptBufferUART2, RINGBUF_BUFF_LEN);
 8002260:	4b4b      	ldr	r3, [pc, #300]	; (8002390 <main+0x1f8>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2264      	movs	r2, #100	; 0x64
 8002266:	4958      	ldr	r1, [pc, #352]	; (80023c8 <main+0x230>)
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fe84 	bl	8002f76 <RINGBUF_Init>
  RINGBUF_Init((RINGBUF*)ringbuf4, ptBufferUART4, RINGBUF_BUFF_LEN);
 800226e:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <main+0x208>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2264      	movs	r2, #100	; 0x64
 8002274:	4955      	ldr	r1, [pc, #340]	; (80023cc <main+0x234>)
 8002276:	4618      	mov	r0, r3
 8002278:	f000 fe7d 	bl	8002f76 <RINGBUF_Init>
  RINGBUF_Init((RINGBUF*)ringbuf3, ptBufferUART3, RINGBUF_BUFF_LEN);
 800227c:	4b46      	ldr	r3, [pc, #280]	; (8002398 <main+0x200>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2264      	movs	r2, #100	; 0x64
 8002282:	4953      	ldr	r1, [pc, #332]	; (80023d0 <main+0x238>)
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fe76 	bl	8002f76 <RINGBUF_Init>
  RINGBUF_Init((RINGBUF*)ringbuf5, ptBufferUART5, RINGBUF_BUFF_LEN);
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <main+0x210>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2264      	movs	r2, #100	; 0x64
 8002290:	4950      	ldr	r1, [pc, #320]	; (80023d4 <main+0x23c>)
 8002292:	4618      	mov	r0, r3
 8002294:	f000 fe6f 	bl	8002f76 <RINGBUF_Init>
  RINGBUF_Init((RINGBUF*)ringbuf6, ptBufferUART6, RINGBUF_BUFF_LEN);
 8002298:	4b45      	ldr	r3, [pc, #276]	; (80023b0 <main+0x218>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2264      	movs	r2, #100	; 0x64
 800229e:	494e      	ldr	r1, [pc, #312]	; (80023d8 <main+0x240>)
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 fe68 	bl	8002f76 <RINGBUF_Init>
  RINGBUF_Init((RINGBUF*)ringbuf7, ptBufferUART7, RINGBUF_BUFF_LEN);
 80022a6:	4b44      	ldr	r3, [pc, #272]	; (80023b8 <main+0x220>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2264      	movs	r2, #100	; 0x64
 80022ac:	494b      	ldr	r1, [pc, #300]	; (80023dc <main+0x244>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fe61 	bl	8002f76 <RINGBUF_Init>

  SoftUartInit(0, SU0_TX_GPIO_Port, SU0_TX_Pin, SU0_RX_GPIO_Port, SU0_RX_Pin);
 80022b4:	2320      	movs	r3, #32
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	4b49      	ldr	r3, [pc, #292]	; (80023e0 <main+0x248>)
 80022ba:	2210      	movs	r2, #16
 80022bc:	4948      	ldr	r1, [pc, #288]	; (80023e0 <main+0x248>)
 80022be:	2000      	movs	r0, #0
 80022c0:	f000 fef2 	bl	80030a8 <SoftUartInit>
  SoftUartInit(1, SU1_TX_GPIO_Port, SU1_TX_Pin, SU1_RX_GPIO_Port, SU1_RX_Pin);
 80022c4:	2320      	movs	r3, #32
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	4b46      	ldr	r3, [pc, #280]	; (80023e4 <main+0x24c>)
 80022ca:	2210      	movs	r2, #16
 80022cc:	4945      	ldr	r1, [pc, #276]	; (80023e4 <main+0x24c>)
 80022ce:	2001      	movs	r0, #1
 80022d0:	f000 feea 	bl	80030a8 <SoftUartInit>
  SoftUartInit(2, SU2_TX_GPIO_Port, SU2_TX_Pin, SU2_RX_GPIO_Port, SU2_RX_Pin);
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <main+0x248>)
 80022da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022de:	4942      	ldr	r1, [pc, #264]	; (80023e8 <main+0x250>)
 80022e0:	2002      	movs	r0, #2
 80022e2:	f000 fee1 	bl	80030a8 <SoftUartInit>
//  SoftUartInit(3, SU4_TX_GPIO_Port, SU4_TX_Pin, SU4_RX_GPIO_Port, SU4_RX_Pin);
//  SoftUartInit(5, SU5_TX_GPIO_Port, SU5_TX_Pin, SU5_RX_GPIO_Port, SU5_RX_Pin);
//  SoftUartInit(4, SU7_TX_GPIO_Port, SU7_TX_Pin, SU7_RX_GPIO_Port, SU7_RX_Pin);

  SoftUartEnableRx(0);
 80022e6:	2000      	movs	r0, #0
 80022e8:	f000 ff86 	bl	80031f8 <SoftUartEnableRx>
  SoftUartEnableRx(1);
 80022ec:	2001      	movs	r0, #1
 80022ee:	f000 ff83 	bl	80031f8 <SoftUartEnableRx>
  SoftUartEnableRx(2);
 80022f2:	2002      	movs	r0, #2
 80022f4:	f000 ff80 	bl	80031f8 <SoftUartEnableRx>
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

  /* USER CODE BEGIN RTOS_THREADS */
// osThreadDef(Task0, Parse_ESC0, osPriorityHigh, 0, 128);
// ESC0 = osThreadCreate(osThread(Task0), NULL);
  osThreadDef(Task1, Parse_ESC1, osPriorityHigh, 0, 128);
 80022f8:	4b3c      	ldr	r3, [pc, #240]	; (80023ec <main+0x254>)
 80022fa:	f107 041c 	add.w	r4, r7, #28
 80022fe:	461d      	mov	r5, r3
 8002300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002304:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002308:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ESC1 = osThreadCreate(osThread(Task1), NULL);
 800230c:	f107 031c 	add.w	r3, r7, #28
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f005 f991 	bl	800763a <osThreadCreate>
 8002318:	4603      	mov	r3, r0
 800231a:	4a35      	ldr	r2, [pc, #212]	; (80023f0 <main+0x258>)
 800231c:	6013      	str	r3, [r2, #0]
  osThreadDef(Task2, Parse_ESC2, osPriorityHigh, 0, 512);
 800231e:	4b35      	ldr	r3, [pc, #212]	; (80023f4 <main+0x25c>)
 8002320:	463c      	mov	r4, r7
 8002322:	461d      	mov	r5, r3
 8002324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800232c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ESC2 = osThreadCreate(osThread(Task2), NULL);
 8002330:	463b      	mov	r3, r7
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f005 f980 	bl	800763a <osThreadCreate>
 800233a:	4603      	mov	r3, r0
 800233c:	4a2e      	ldr	r2, [pc, #184]	; (80023f8 <main+0x260>)
 800233e:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002340:	f005 f974 	bl	800762c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002344:	e7fe      	b.n	8002344 <main+0x1ac>
 8002346:	bf00      	nop
 8002348:	20004374 	.word	0x20004374
 800234c:	20004b8c 	.word	0x20004b8c
 8002350:	20004670 	.word	0x20004670
 8002354:	20004581 	.word	0x20004581
 8002358:	20004ac8 	.word	0x20004ac8
 800235c:	20004518 	.word	0x20004518
 8002360:	200043c0 	.word	0x200043c0
 8002364:	20004580 	.word	0x20004580
 8002368:	20004a3c 	.word	0x20004a3c
 800236c:	20004a80 	.word	0x20004a80
 8002370:	20004590 	.word	0x20004590
 8002374:	200042e4 	.word	0x200042e4
 8002378:	200049f4 	.word	0x200049f4
 800237c:	20004480 	.word	0x20004480
 8002380:	20000454 	.word	0x20000454
 8002384:	200042d4 	.word	0x200042d4
 8002388:	20000458 	.word	0x20000458
 800238c:	200049e0 	.word	0x200049e0
 8002390:	2000045c 	.word	0x2000045c
 8002394:	200048d0 	.word	0x200048d0
 8002398:	20000460 	.word	0x20000460
 800239c:	20004c5c 	.word	0x20004c5c
 80023a0:	20000464 	.word	0x20000464
 80023a4:	20004ab8 	.word	0x20004ab8
 80023a8:	20000468 	.word	0x20000468
 80023ac:	200044cc 	.word	0x200044cc
 80023b0:	2000046c 	.word	0x2000046c
 80023b4:	200046b4 	.word	0x200046b4
 80023b8:	20000470 	.word	0x20000470
 80023bc:	2000446c 	.word	0x2000446c
 80023c0:	20004b28 	.word	0x20004b28
 80023c4:	20004bf8 	.word	0x20004bf8
 80023c8:	2000451c 	.word	0x2000451c
 80023cc:	2000486c 	.word	0x2000486c
 80023d0:	20004b90 	.word	0x20004b90
 80023d4:	200045d8 	.word	0x200045d8
 80023d8:	200048e0 	.word	0x200048e0
 80023dc:	2000497c 	.word	0x2000497c
 80023e0:	40020000 	.word	0x40020000
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40021000 	.word	0x40021000
 80023ec:	0800d3a8 	.word	0x0800d3a8
 80023f0:	20004584 	.word	0x20004584
 80023f4:	0800d3c4 	.word	0x0800d3c4
 80023f8:	200049f0 	.word	0x200049f0

080023fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b094      	sub	sp, #80	; 0x50
 8002400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002402:	f107 0320 	add.w	r3, r7, #32
 8002406:	2230      	movs	r2, #48	; 0x30
 8002408:	2100      	movs	r1, #0
 800240a:	4618      	mov	r0, r3
 800240c:	f006 fb96 	bl	8008b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
 8002424:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <SystemClock_Config+0xcc>)
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	4a27      	ldr	r2, [pc, #156]	; (80024c8 <SystemClock_Config+0xcc>)
 800242a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800242e:	6413      	str	r3, [r2, #64]	; 0x40
 8002430:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <SystemClock_Config+0xcc>)
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800243c:	2300      	movs	r3, #0
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	4b22      	ldr	r3, [pc, #136]	; (80024cc <SystemClock_Config+0xd0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a21      	ldr	r2, [pc, #132]	; (80024cc <SystemClock_Config+0xd0>)
 8002446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	4b1f      	ldr	r3, [pc, #124]	; (80024cc <SystemClock_Config+0xd0>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002458:	2302      	movs	r3, #2
 800245a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800245c:	2301      	movs	r3, #1
 800245e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002460:	2310      	movs	r3, #16
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002464:	2302      	movs	r3, #2
 8002466:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002468:	2300      	movs	r3, #0
 800246a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800246c:	2308      	movs	r3, #8
 800246e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002470:	23a8      	movs	r3, #168	; 0xa8
 8002472:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002474:	2302      	movs	r3, #2
 8002476:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002478:	2304      	movs	r3, #4
 800247a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800247c:	f107 0320 	add.w	r3, r7, #32
 8002480:	4618      	mov	r0, r3
 8002482:	f002 fc43 	bl	8004d0c <HAL_RCC_OscConfig>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d001      	beq.n	8002490 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800248c:	f000 fd6e 	bl	8002f6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002490:	230f      	movs	r3, #15
 8002492:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002494:	2302      	movs	r3, #2
 8002496:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800249c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80024a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80024a8:	f107 030c 	add.w	r3, r7, #12
 80024ac:	2105      	movs	r1, #5
 80024ae:	4618      	mov	r0, r3
 80024b0:	f002 fea4 	bl	80051fc <HAL_RCC_ClockConfig>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80024ba:	f000 fd57 	bl	8002f6c <Error_Handler>
  }
}
 80024be:	bf00      	nop
 80024c0:	3750      	adds	r7, #80	; 0x50
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023800 	.word	0x40023800
 80024cc:	40007000 	.word	0x40007000

080024d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08e      	sub	sp, #56	; 0x38
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e4:	f107 0320 	add.w	r3, r7, #32
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
 80024fc:	615a      	str	r2, [r3, #20]
 80024fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002500:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <MX_TIM4_Init+0xe4>)
 8002502:	4a2d      	ldr	r2, [pc, #180]	; (80025b8 <MX_TIM4_Init+0xe8>)
 8002504:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 167;
 8002506:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <MX_TIM4_Init+0xe4>)
 8002508:	22a7      	movs	r2, #167	; 0xa7
 800250a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <MX_TIM4_Init+0xe4>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002512:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <MX_TIM4_Init+0xe4>)
 8002514:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002518:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <MX_TIM4_Init+0xe4>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <MX_TIM4_Init+0xe4>)
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002526:	4823      	ldr	r0, [pc, #140]	; (80025b4 <MX_TIM4_Init+0xe4>)
 8002528:	f003 f864 	bl	80055f4 <HAL_TIM_Base_Init>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002532:	f000 fd1b 	bl	8002f6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800253c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002540:	4619      	mov	r1, r3
 8002542:	481c      	ldr	r0, [pc, #112]	; (80025b4 <MX_TIM4_Init+0xe4>)
 8002544:	f003 fc02 	bl	8005d4c <HAL_TIM_ConfigClockSource>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800254e:	f000 fd0d 	bl	8002f6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002552:	4818      	ldr	r0, [pc, #96]	; (80025b4 <MX_TIM4_Init+0xe4>)
 8002554:	f003 f90e 	bl	8005774 <HAL_TIM_PWM_Init>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800255e:	f000 fd05 	bl	8002f6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800256a:	f107 0320 	add.w	r3, r7, #32
 800256e:	4619      	mov	r1, r3
 8002570:	4810      	ldr	r0, [pc, #64]	; (80025b4 <MX_TIM4_Init+0xe4>)
 8002572:	f003 ffeb 	bl	800654c <HAL_TIMEx_MasterConfigSynchronization>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800257c:	f000 fcf6 	bl	8002f6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002580:	2360      	movs	r3, #96	; 0x60
 8002582:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002588:	2300      	movs	r3, #0
 800258a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	2208      	movs	r2, #8
 8002594:	4619      	mov	r1, r3
 8002596:	4807      	ldr	r0, [pc, #28]	; (80025b4 <MX_TIM4_Init+0xe4>)
 8002598:	f003 fb16 	bl	8005bc8 <HAL_TIM_PWM_ConfigChannel>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80025a2:	f000 fce3 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025a6:	4803      	ldr	r0, [pc, #12]	; (80025b4 <MX_TIM4_Init+0xe4>)
 80025a8:	f001 f8c2 	bl	8003730 <HAL_TIM_MspPostInit>

}
 80025ac:	bf00      	nop
 80025ae:	3738      	adds	r7, #56	; 0x38
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20004374 	.word	0x20004374
 80025b8:	40000800 	.word	0x40000800

080025bc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80025c0:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <MX_TIM10_Init+0x3c>)
 80025c2:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <MX_TIM10_Init+0x40>)
 80025c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 175;
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <MX_TIM10_Init+0x3c>)
 80025c8:	22af      	movs	r2, #175	; 0xaf
 80025ca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <MX_TIM10_Init+0x3c>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9;
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <MX_TIM10_Init+0x3c>)
 80025d4:	2209      	movs	r2, #9
 80025d6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <MX_TIM10_Init+0x3c>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <MX_TIM10_Init+0x3c>)
 80025e0:	2280      	movs	r2, #128	; 0x80
 80025e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80025e4:	4804      	ldr	r0, [pc, #16]	; (80025f8 <MX_TIM10_Init+0x3c>)
 80025e6:	f003 f805 	bl	80055f4 <HAL_TIM_Base_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80025f0:	f000 fcbc 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20004480 	.word	0x20004480
 80025fc:	40014400 	.word	0x40014400

08002600 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <MX_UART4_Init+0x4c>)
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <MX_UART4_Init+0x50>)
 8002608:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 19200;
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <MX_UART4_Init+0x4c>)
 800260c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002610:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002612:	4b0e      	ldr	r3, [pc, #56]	; (800264c <MX_UART4_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002618:	4b0c      	ldr	r3, [pc, #48]	; (800264c <MX_UART4_Init+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800261e:	4b0b      	ldr	r3, [pc, #44]	; (800264c <MX_UART4_Init+0x4c>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <MX_UART4_Init+0x4c>)
 8002626:	220c      	movs	r2, #12
 8002628:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262a:	4b08      	ldr	r3, [pc, #32]	; (800264c <MX_UART4_Init+0x4c>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <MX_UART4_Init+0x4c>)
 8002632:	2200      	movs	r2, #0
 8002634:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002636:	4805      	ldr	r0, [pc, #20]	; (800264c <MX_UART4_Init+0x4c>)
 8002638:	f004 f818 	bl	800666c <HAL_UART_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002642:	f000 fc93 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	20004a3c 	.word	0x20004a3c
 8002650:	40004c00 	.word	0x40004c00

08002654 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002658:	4b11      	ldr	r3, [pc, #68]	; (80026a0 <MX_UART5_Init+0x4c>)
 800265a:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <MX_UART5_Init+0x50>)
 800265c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 19200;
 800265e:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <MX_UART5_Init+0x4c>)
 8002660:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002664:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002666:	4b0e      	ldr	r3, [pc, #56]	; (80026a0 <MX_UART5_Init+0x4c>)
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800266c:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <MX_UART5_Init+0x4c>)
 800266e:	2200      	movs	r2, #0
 8002670:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002672:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <MX_UART5_Init+0x4c>)
 8002674:	2200      	movs	r2, #0
 8002676:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002678:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <MX_UART5_Init+0x4c>)
 800267a:	220c      	movs	r2, #12
 800267c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800267e:	4b08      	ldr	r3, [pc, #32]	; (80026a0 <MX_UART5_Init+0x4c>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002684:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <MX_UART5_Init+0x4c>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <MX_UART5_Init+0x4c>)
 800268c:	f003 ffee 	bl	800666c <HAL_UART_Init>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002696:	f000 fc69 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20004590 	.word	0x20004590
 80026a4:	40005000 	.word	0x40005000

080026a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026ac:	4b11      	ldr	r3, [pc, #68]	; (80026f4 <MX_USART1_UART_Init+0x4c>)
 80026ae:	4a12      	ldr	r2, [pc, #72]	; (80026f8 <MX_USART1_UART_Init+0x50>)
 80026b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80026b2:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <MX_USART1_UART_Init+0x4c>)
 80026b4:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80026b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_USART1_UART_Init+0x4c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_USART1_UART_Init+0x4c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <MX_USART1_UART_Init+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_USART1_UART_Init+0x4c>)
 80026ce:	220c      	movs	r2, #12
 80026d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026d2:	4b08      	ldr	r3, [pc, #32]	; (80026f4 <MX_USART1_UART_Init+0x4c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_USART1_UART_Init+0x4c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026de:	4805      	ldr	r0, [pc, #20]	; (80026f4 <MX_USART1_UART_Init+0x4c>)
 80026e0:	f003 ffc4 	bl	800666c <HAL_UART_Init>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026ea:	f000 fc3f 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026ee:	bf00      	nop
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20004670 	.word	0x20004670
 80026f8:	40011000 	.word	0x40011000

080026fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002702:	4a12      	ldr	r2, [pc, #72]	; (800274c <MX_USART2_UART_Init+0x50>)
 8002704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002706:	4b10      	ldr	r3, [pc, #64]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002708:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800270c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800271a:	4b0b      	ldr	r3, [pc, #44]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002722:	220c      	movs	r2, #12
 8002724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <MX_USART2_UART_Init+0x4c>)
 8002734:	f003 ff9a 	bl	800666c <HAL_UART_Init>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800273e:	f000 fc15 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20004ac8 	.word	0x20004ac8
 800274c:	40004400 	.word	0x40004400

08002750 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002754:	4b11      	ldr	r3, [pc, #68]	; (800279c <MX_USART3_UART_Init+0x4c>)
 8002756:	4a12      	ldr	r2, [pc, #72]	; (80027a0 <MX_USART3_UART_Init+0x50>)
 8002758:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 800275a:	4b10      	ldr	r3, [pc, #64]	; (800279c <MX_USART3_UART_Init+0x4c>)
 800275c:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002760:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002762:	4b0e      	ldr	r3, [pc, #56]	; (800279c <MX_USART3_UART_Init+0x4c>)
 8002764:	2200      	movs	r2, #0
 8002766:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002768:	4b0c      	ldr	r3, [pc, #48]	; (800279c <MX_USART3_UART_Init+0x4c>)
 800276a:	2200      	movs	r2, #0
 800276c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <MX_USART3_UART_Init+0x4c>)
 8002770:	2200      	movs	r2, #0
 8002772:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <MX_USART3_UART_Init+0x4c>)
 8002776:	2204      	movs	r2, #4
 8002778:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <MX_USART3_UART_Init+0x4c>)
 800277c:	2200      	movs	r2, #0
 800277e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <MX_USART3_UART_Init+0x4c>)
 8002782:	2200      	movs	r2, #0
 8002784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002786:	4805      	ldr	r0, [pc, #20]	; (800279c <MX_USART3_UART_Init+0x4c>)
 8002788:	f003 ff70 	bl	800666c <HAL_UART_Init>
 800278c:	4603      	mov	r3, r0
 800278e:	2b00      	cmp	r3, #0
 8002790:	d001      	beq.n	8002796 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002792:	f000 fbeb 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200043c0 	.word	0x200043c0
 80027a0:	40004800 	.word	0x40004800

080027a4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <MX_USART6_UART_Init+0x4c>)
 80027aa:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <MX_USART6_UART_Init+0x50>)
 80027ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 19200;
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <MX_USART6_UART_Init+0x4c>)
 80027b0:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80027b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80027b6:	4b0e      	ldr	r3, [pc, #56]	; (80027f0 <MX_USART6_UART_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <MX_USART6_UART_Init+0x4c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80027c2:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <MX_USART6_UART_Init+0x4c>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <MX_USART6_UART_Init+0x4c>)
 80027ca:	220c      	movs	r2, #12
 80027cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027ce:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <MX_USART6_UART_Init+0x4c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <MX_USART6_UART_Init+0x4c>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027da:	4805      	ldr	r0, [pc, #20]	; (80027f0 <MX_USART6_UART_Init+0x4c>)
 80027dc:	f003 ff46 	bl	800666c <HAL_UART_Init>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80027e6:	f000 fbc1 	bl	8002f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200049f4 	.word	0x200049f4
 80027f4:	40011400 	.word	0x40011400

080027f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08c      	sub	sp, #48	; 0x30
 80027fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fe:	f107 031c 	add.w	r3, r7, #28
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	609a      	str	r2, [r3, #8]
 800280a:	60da      	str	r2, [r3, #12]
 800280c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	4b77      	ldr	r3, [pc, #476]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002816:	4a76      	ldr	r2, [pc, #472]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 8002818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800281c:	6313      	str	r3, [r2, #48]	; 0x30
 800281e:	4b74      	ldr	r3, [pc, #464]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
 800282e:	4b70      	ldr	r3, [pc, #448]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a6f      	ldr	r2, [pc, #444]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b6d      	ldr	r3, [pc, #436]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	4b69      	ldr	r3, [pc, #420]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 800284c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284e:	4a68      	ldr	r2, [pc, #416]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	6313      	str	r3, [r2, #48]	; 0x30
 8002856:	4b66      	ldr	r3, [pc, #408]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	613b      	str	r3, [r7, #16]
 8002860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	4b62      	ldr	r3, [pc, #392]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	4a61      	ldr	r2, [pc, #388]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 800286c:	f043 0310 	orr.w	r3, r3, #16
 8002870:	6313      	str	r3, [r2, #48]	; 0x30
 8002872:	4b5f      	ldr	r3, [pc, #380]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b5b      	ldr	r3, [pc, #364]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	4a5a      	ldr	r2, [pc, #360]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	6313      	str	r3, [r2, #48]	; 0x30
 800288e:	4b58      	ldr	r3, [pc, #352]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	4b54      	ldr	r3, [pc, #336]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a53      	ldr	r2, [pc, #332]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 80028a4:	f043 0308 	orr.w	r3, r3, #8
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b51      	ldr	r3, [pc, #324]	; (80029f0 <MX_GPIO_Init+0x1f8>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0308 	and.w	r3, r3, #8
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SU0_TX_GPIO_Port, SU0_TX_Pin, GPIO_PIN_SET);
 80028b6:	2201      	movs	r2, #1
 80028b8:	2110      	movs	r1, #16
 80028ba:	484e      	ldr	r0, [pc, #312]	; (80029f4 <MX_GPIO_Init+0x1fc>)
 80028bc:	f002 fa0c 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|SU6_TX_Pin|SU7_TX_Pin, GPIO_PIN_RESET);
 80028c0:	2200      	movs	r2, #0
 80028c2:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 80028c6:	484b      	ldr	r0, [pc, #300]	; (80029f4 <MX_GPIO_Init+0x1fc>)
 80028c8:	f002 fa06 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SU1_TX_GPIO_Port, SU1_TX_Pin, GPIO_PIN_SET);
 80028cc:	2201      	movs	r2, #1
 80028ce:	2110      	movs	r1, #16
 80028d0:	4849      	ldr	r0, [pc, #292]	; (80029f8 <MX_GPIO_Init+0x200>)
 80028d2:	f002 fa01 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SU3_TX_Pin|SU2_TX_Pin|SU4_TX_Pin, GPIO_PIN_RESET);
 80028d6:	2200      	movs	r2, #0
 80028d8:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80028dc:	4847      	ldr	r0, [pc, #284]	; (80029fc <MX_GPIO_Init+0x204>)
 80028de:	f002 f9fb 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SU5_TX_GPIO_Port, SU5_TX_Pin, GPIO_PIN_RESET);
 80028e2:	2200      	movs	r2, #0
 80028e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80028e8:	4845      	ldr	r0, [pc, #276]	; (8002a00 <MX_GPIO_Init+0x208>)
 80028ea:	f002 f9f5 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SU0_TX_Pin */
  GPIO_InitStruct.Pin = SU0_TX_Pin;
 80028ee:	2310      	movs	r3, #16
 80028f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028f2:	2301      	movs	r3, #1
 80028f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028f6:	2301      	movs	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fa:	2303      	movs	r3, #3
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SU0_TX_GPIO_Port, &GPIO_InitStruct);
 80028fe:	f107 031c 	add.w	r3, r7, #28
 8002902:	4619      	mov	r1, r3
 8002904:	483b      	ldr	r0, [pc, #236]	; (80029f4 <MX_GPIO_Init+0x1fc>)
 8002906:	f002 f833 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : SU0_RX_Pin SU2_RX_Pin SU6_RX_Pin SU7_RX_Pin */
  GPIO_InitStruct.Pin = SU0_RX_Pin|SU2_RX_Pin|SU6_RX_Pin|SU7_RX_Pin;
 800290a:	f44f 632a 	mov.w	r3, #2720	; 0xaa0
 800290e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002914:	2301      	movs	r3, #1
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 031c 	add.w	r3, r7, #28
 800291c:	4619      	mov	r1, r3
 800291e:	4835      	ldr	r0, [pc, #212]	; (80029f4 <MX_GPIO_Init+0x1fc>)
 8002920:	f002 f826 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 SU6_TX_Pin SU7_TX_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_6|SU6_TX_Pin|SU7_TX_Pin;
 8002924:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8002928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800292a:	2301      	movs	r3, #1
 800292c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002932:	2300      	movs	r3, #0
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	f107 031c 	add.w	r3, r7, #28
 800293a:	4619      	mov	r1, r3
 800293c:	482d      	ldr	r0, [pc, #180]	; (80029f4 <MX_GPIO_Init+0x1fc>)
 800293e:	f002 f817 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SU1_TX_Pin */
  GPIO_InitStruct.Pin = SU1_TX_Pin;
 8002942:	2310      	movs	r3, #16
 8002944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002946:	2301      	movs	r3, #1
 8002948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294e:	2303      	movs	r3, #3
 8002950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SU1_TX_GPIO_Port, &GPIO_InitStruct);
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	4619      	mov	r1, r3
 8002958:	4827      	ldr	r0, [pc, #156]	; (80029f8 <MX_GPIO_Init+0x200>)
 800295a:	f002 f809 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : SU1_RX_Pin SU3_RX_Pin */
  GPIO_InitStruct.Pin = SU1_RX_Pin|SU3_RX_Pin;
 800295e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8002962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002964:	2300      	movs	r3, #0
 8002966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002968:	2301      	movs	r3, #1
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	4619      	mov	r1, r3
 8002972:	4821      	ldr	r0, [pc, #132]	; (80029f8 <MX_GPIO_Init+0x200>)
 8002974:	f001 fffc 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : SU3_TX_Pin SU2_TX_Pin SU4_TX_Pin */
  GPIO_InitStruct.Pin = SU3_TX_Pin|SU2_TX_Pin|SU4_TX_Pin;
 8002978:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800297c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297e:	2301      	movs	r3, #1
 8002980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800298a:	f107 031c 	add.w	r3, r7, #28
 800298e:	4619      	mov	r1, r3
 8002990:	481a      	ldr	r0, [pc, #104]	; (80029fc <MX_GPIO_Init+0x204>)
 8002992:	f001 ffed 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SU4_RX_Pin */
  GPIO_InitStruct.Pin = SU4_RX_Pin;
 8002996:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800299a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800299c:	2300      	movs	r3, #0
 800299e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029a0:	2301      	movs	r3, #1
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SU4_RX_GPIO_Port, &GPIO_InitStruct);
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	4619      	mov	r1, r3
 80029aa:	4814      	ldr	r0, [pc, #80]	; (80029fc <MX_GPIO_Init+0x204>)
 80029ac:	f001 ffe0 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SU5_RX_Pin */
  GPIO_InitStruct.Pin = SU5_RX_Pin;
 80029b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029b6:	2300      	movs	r3, #0
 80029b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ba:	2301      	movs	r3, #1
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(SU5_RX_GPIO_Port, &GPIO_InitStruct);
 80029be:	f107 031c 	add.w	r3, r7, #28
 80029c2:	4619      	mov	r1, r3
 80029c4:	480e      	ldr	r0, [pc, #56]	; (8002a00 <MX_GPIO_Init+0x208>)
 80029c6:	f001 ffd3 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SU5_TX_Pin */
  GPIO_InitStruct.Pin = SU5_TX_Pin;
 80029ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029d0:	2301      	movs	r3, #1
 80029d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2300      	movs	r3, #0
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SU5_TX_GPIO_Port, &GPIO_InitStruct);
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	4807      	ldr	r0, [pc, #28]	; (8002a00 <MX_GPIO_Init+0x208>)
 80029e4:	f001 ffc4 	bl	8004970 <HAL_GPIO_Init>

}
 80029e8:	bf00      	nop
 80029ea:	3730      	adds	r7, #48	; 0x30
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40023800 	.word	0x40023800
 80029f4:	40020000 	.word	0x40020000
 80029f8:	40020800 	.word	0x40020800
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40020400 	.word	0x40020400

08002a04 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a04:	b5b0      	push	{r4, r5, r7, lr}
 8002a06:	b088      	sub	sp, #32
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
/* ESC 1 ---------------------------------------------------------*/
	if (HAL_UART_Receive_IT(&huart1, &aRxBuffer_1, RXBUFFERSIZE) == HAL_OK) {
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4994      	ldr	r1, [pc, #592]	; (8002c60 <HAL_UART_RxCpltCallback+0x25c>)
 8002a10:	4894      	ldr	r0, [pc, #592]	; (8002c64 <HAL_UART_RxCpltCallback+0x260>)
 8002a12:	f003 ff0a 	bl	800682a <HAL_UART_Receive_IT>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d134      	bne.n	8002a86 <HAL_UART_RxCpltCallback+0x82>
		RINGBUF_Put((RINGBUF*) ringbuf1, aRxBuffer_1);
 8002a1c:	4b92      	ldr	r3, [pc, #584]	; (8002c68 <HAL_UART_RxCpltCallback+0x264>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a8f      	ldr	r2, [pc, #572]	; (8002c60 <HAL_UART_RxCpltCallback+0x25c>)
 8002a22:	7812      	ldrb	r2, [r2, #0]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 faca 	bl	8002fc0 <RINGBUF_Put>
		RINGBUF_Get((RINGBUF*) ringbuf1, &c1);
 8002a2c:	4b8e      	ldr	r3, [pc, #568]	; (8002c68 <HAL_UART_RxCpltCallback+0x264>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	498e      	ldr	r1, [pc, #568]	; (8002c6c <HAL_UART_RxCpltCallback+0x268>)
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 faea 	bl	800300c <RINGBUF_Get>
		int x1 = telemetryParse(c1, &telemetry1, &recStatus1);
 8002a38:	4b8c      	ldr	r3, [pc, #560]	; (8002c6c <HAL_UART_RxCpltCallback+0x268>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4a8c      	ldr	r2, [pc, #560]	; (8002c70 <HAL_UART_RxCpltCallback+0x26c>)
 8002a3e:	498d      	ldr	r1, [pc, #564]	; (8002c74 <HAL_UART_RxCpltCallback+0x270>)
 8002a40:	4618      	mov	r0, r3
 8002a42:	f001 fa2b 	bl	8003e9c <telemetryParse>
 8002a46:	4603      	mov	r3, r0
 8002a48:	61fb      	str	r3, [r7, #28]
		if (x1 == PARSE_OK){
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d112      	bne.n	8002a76 <HAL_UART_RxCpltCallback+0x72>
			successESC1++;
 8002a50:	4b89      	ldr	r3, [pc, #548]	; (8002c78 <HAL_UART_RxCpltCallback+0x274>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3301      	adds	r3, #1
 8002a56:	4a88      	ldr	r2, [pc, #544]	; (8002c78 <HAL_UART_RxCpltCallback+0x274>)
 8002a58:	6013      	str	r3, [r2, #0]
			TelemetryArray[1] = telemetry1;
 8002a5a:	4b88      	ldr	r3, [pc, #544]	; (8002c7c <HAL_UART_RxCpltCallback+0x278>)
 8002a5c:	4a85      	ldr	r2, [pc, #532]	; (8002c74 <HAL_UART_RxCpltCallback+0x270>)
 8002a5e:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8002a62:	4615      	mov	r5, r2
 8002a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a70:	682b      	ldr	r3, [r5, #0]
 8002a72:	6023      	str	r3, [r4, #0]
 8002a74:	e007      	b.n	8002a86 <HAL_UART_RxCpltCallback+0x82>
		}
		else if (x1 == PARSE_ERROR){
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d104      	bne.n	8002a86 <HAL_UART_RxCpltCallback+0x82>
			failESC1++;
 8002a7c:	4b80      	ldr	r3, [pc, #512]	; (8002c80 <HAL_UART_RxCpltCallback+0x27c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	3301      	adds	r3, #1
 8002a82:	4a7f      	ldr	r2, [pc, #508]	; (8002c80 <HAL_UART_RxCpltCallback+0x27c>)
 8002a84:	6013      	str	r3, [r2, #0]
		}
	}
/* ESC 2 ---------------------------------------------------------*/
	if (HAL_UART_Receive_IT(&huart2, &aRxBuffer_2, RXBUFFERSIZE) == HAL_OK) {
 8002a86:	2201      	movs	r2, #1
 8002a88:	497e      	ldr	r1, [pc, #504]	; (8002c84 <HAL_UART_RxCpltCallback+0x280>)
 8002a8a:	487f      	ldr	r0, [pc, #508]	; (8002c88 <HAL_UART_RxCpltCallback+0x284>)
 8002a8c:	f003 fecd 	bl	800682a <HAL_UART_Receive_IT>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d134      	bne.n	8002b00 <HAL_UART_RxCpltCallback+0xfc>
		RINGBUF_Put((RINGBUF*) ringbuf2, aRxBuffer_2);
 8002a96:	4b7d      	ldr	r3, [pc, #500]	; (8002c8c <HAL_UART_RxCpltCallback+0x288>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a7a      	ldr	r2, [pc, #488]	; (8002c84 <HAL_UART_RxCpltCallback+0x280>)
 8002a9c:	7812      	ldrb	r2, [r2, #0]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f000 fa8d 	bl	8002fc0 <RINGBUF_Put>
		RINGBUF_Get((RINGBUF*) ringbuf2, &c2);
 8002aa6:	4b79      	ldr	r3, [pc, #484]	; (8002c8c <HAL_UART_RxCpltCallback+0x288>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4979      	ldr	r1, [pc, #484]	; (8002c90 <HAL_UART_RxCpltCallback+0x28c>)
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 faad 	bl	800300c <RINGBUF_Get>
		int x2 = telemetryParse(c2, &telemetry2, &recStatus2);
 8002ab2:	4b77      	ldr	r3, [pc, #476]	; (8002c90 <HAL_UART_RxCpltCallback+0x28c>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	4a77      	ldr	r2, [pc, #476]	; (8002c94 <HAL_UART_RxCpltCallback+0x290>)
 8002ab8:	4977      	ldr	r1, [pc, #476]	; (8002c98 <HAL_UART_RxCpltCallback+0x294>)
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 f9ee 	bl	8003e9c <telemetryParse>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	61bb      	str	r3, [r7, #24]
		if (x2 == PARSE_OK){
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d112      	bne.n	8002af0 <HAL_UART_RxCpltCallback+0xec>
			successESC2++;
 8002aca:	4b74      	ldr	r3, [pc, #464]	; (8002c9c <HAL_UART_RxCpltCallback+0x298>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	4a72      	ldr	r2, [pc, #456]	; (8002c9c <HAL_UART_RxCpltCallback+0x298>)
 8002ad2:	6013      	str	r3, [r2, #0]
			TelemetryArray[2] = telemetry2;
 8002ad4:	4b69      	ldr	r3, [pc, #420]	; (8002c7c <HAL_UART_RxCpltCallback+0x278>)
 8002ad6:	4a70      	ldr	r2, [pc, #448]	; (8002c98 <HAL_UART_RxCpltCallback+0x294>)
 8002ad8:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8002adc:	4615      	mov	r5, r2
 8002ade:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ae6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002aea:	682b      	ldr	r3, [r5, #0]
 8002aec:	6023      	str	r3, [r4, #0]
 8002aee:	e007      	b.n	8002b00 <HAL_UART_RxCpltCallback+0xfc>
		}
		else if (x2 == PARSE_ERROR){
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d104      	bne.n	8002b00 <HAL_UART_RxCpltCallback+0xfc>
			failESC2++;
 8002af6:	4b6a      	ldr	r3, [pc, #424]	; (8002ca0 <HAL_UART_RxCpltCallback+0x29c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3301      	adds	r3, #1
 8002afc:	4a68      	ldr	r2, [pc, #416]	; (8002ca0 <HAL_UART_RxCpltCallback+0x29c>)
 8002afe:	6013      	str	r3, [r2, #0]
		}
	}
/* ESC 3 ---------------------------------------------------------*/
	if (HAL_UART_Receive_IT(&huart3, &aRxBuffer_3, RXBUFFERSIZE) == HAL_OK) {
 8002b00:	2201      	movs	r2, #1
 8002b02:	4968      	ldr	r1, [pc, #416]	; (8002ca4 <HAL_UART_RxCpltCallback+0x2a0>)
 8002b04:	4868      	ldr	r0, [pc, #416]	; (8002ca8 <HAL_UART_RxCpltCallback+0x2a4>)
 8002b06:	f003 fe90 	bl	800682a <HAL_UART_Receive_IT>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d134      	bne.n	8002b7a <HAL_UART_RxCpltCallback+0x176>
		RINGBUF_Put((RINGBUF*) ringbuf3, aRxBuffer_3);
 8002b10:	4b66      	ldr	r3, [pc, #408]	; (8002cac <HAL_UART_RxCpltCallback+0x2a8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a63      	ldr	r2, [pc, #396]	; (8002ca4 <HAL_UART_RxCpltCallback+0x2a0>)
 8002b16:	7812      	ldrb	r2, [r2, #0]
 8002b18:	4611      	mov	r1, r2
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fa50 	bl	8002fc0 <RINGBUF_Put>
		RINGBUF_Get((RINGBUF*) ringbuf3, &c3);
 8002b20:	4b62      	ldr	r3, [pc, #392]	; (8002cac <HAL_UART_RxCpltCallback+0x2a8>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4962      	ldr	r1, [pc, #392]	; (8002cb0 <HAL_UART_RxCpltCallback+0x2ac>)
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fa70 	bl	800300c <RINGBUF_Get>
		int x3 = telemetryParse(c3, &telemetry3, &recStatus3);
 8002b2c:	4b60      	ldr	r3, [pc, #384]	; (8002cb0 <HAL_UART_RxCpltCallback+0x2ac>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4a60      	ldr	r2, [pc, #384]	; (8002cb4 <HAL_UART_RxCpltCallback+0x2b0>)
 8002b32:	4961      	ldr	r1, [pc, #388]	; (8002cb8 <HAL_UART_RxCpltCallback+0x2b4>)
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 f9b1 	bl	8003e9c <telemetryParse>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	617b      	str	r3, [r7, #20]
		if (x3 == PARSE_OK){
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d112      	bne.n	8002b6a <HAL_UART_RxCpltCallback+0x166>
			successESC3++;
 8002b44:	4b5d      	ldr	r3, [pc, #372]	; (8002cbc <HAL_UART_RxCpltCallback+0x2b8>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	4a5c      	ldr	r2, [pc, #368]	; (8002cbc <HAL_UART_RxCpltCallback+0x2b8>)
 8002b4c:	6013      	str	r3, [r2, #0]
			TelemetryArray[3] = telemetry3;
 8002b4e:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <HAL_UART_RxCpltCallback+0x278>)
 8002b50:	4a59      	ldr	r2, [pc, #356]	; (8002cb8 <HAL_UART_RxCpltCallback+0x2b4>)
 8002b52:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 8002b56:	4615      	mov	r5, r2
 8002b58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	6023      	str	r3, [r4, #0]
 8002b68:	e007      	b.n	8002b7a <HAL_UART_RxCpltCallback+0x176>
		}
		else if (x3 == PARSE_ERROR){
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d104      	bne.n	8002b7a <HAL_UART_RxCpltCallback+0x176>
			failESC3++;
 8002b70:	4b53      	ldr	r3, [pc, #332]	; (8002cc0 <HAL_UART_RxCpltCallback+0x2bc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3301      	adds	r3, #1
 8002b76:	4a52      	ldr	r2, [pc, #328]	; (8002cc0 <HAL_UART_RxCpltCallback+0x2bc>)
 8002b78:	6013      	str	r3, [r2, #0]
		}
	}
/* ESC 4 ---------------------------------------------------------*/
	if (HAL_UART_Receive_IT(&huart4, &aRxBuffer_4, RXBUFFERSIZE) == HAL_OK) {
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4951      	ldr	r1, [pc, #324]	; (8002cc4 <HAL_UART_RxCpltCallback+0x2c0>)
 8002b7e:	4852      	ldr	r0, [pc, #328]	; (8002cc8 <HAL_UART_RxCpltCallback+0x2c4>)
 8002b80:	f003 fe53 	bl	800682a <HAL_UART_Receive_IT>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d134      	bne.n	8002bf4 <HAL_UART_RxCpltCallback+0x1f0>
		RINGBUF_Put((RINGBUF*) ringbuf4, aRxBuffer_4);
 8002b8a:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <HAL_UART_RxCpltCallback+0x2c8>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a4d      	ldr	r2, [pc, #308]	; (8002cc4 <HAL_UART_RxCpltCallback+0x2c0>)
 8002b90:	7812      	ldrb	r2, [r2, #0]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fa13 	bl	8002fc0 <RINGBUF_Put>
		RINGBUF_Get((RINGBUF*) ringbuf4, &c4);
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	; (8002ccc <HAL_UART_RxCpltCallback+0x2c8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	494c      	ldr	r1, [pc, #304]	; (8002cd0 <HAL_UART_RxCpltCallback+0x2cc>)
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fa33 	bl	800300c <RINGBUF_Get>
		int x4 = telemetryParse(c4, &telemetry4, &recStatus4);
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <HAL_UART_RxCpltCallback+0x2cc>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4a4a      	ldr	r2, [pc, #296]	; (8002cd4 <HAL_UART_RxCpltCallback+0x2d0>)
 8002bac:	494a      	ldr	r1, [pc, #296]	; (8002cd8 <HAL_UART_RxCpltCallback+0x2d4>)
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f001 f974 	bl	8003e9c <telemetryParse>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	613b      	str	r3, [r7, #16]
		if (x4 == PARSE_OK){
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d112      	bne.n	8002be4 <HAL_UART_RxCpltCallback+0x1e0>
			successESC4++;
 8002bbe:	4b47      	ldr	r3, [pc, #284]	; (8002cdc <HAL_UART_RxCpltCallback+0x2d8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	4a45      	ldr	r2, [pc, #276]	; (8002cdc <HAL_UART_RxCpltCallback+0x2d8>)
 8002bc6:	6013      	str	r3, [r2, #0]
			TelemetryArray[4] = telemetry4;
 8002bc8:	4b2c      	ldr	r3, [pc, #176]	; (8002c7c <HAL_UART_RxCpltCallback+0x278>)
 8002bca:	4a43      	ldr	r2, [pc, #268]	; (8002cd8 <HAL_UART_RxCpltCallback+0x2d4>)
 8002bcc:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8002bd0:	4615      	mov	r5, r2
 8002bd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bde:	682b      	ldr	r3, [r5, #0]
 8002be0:	6023      	str	r3, [r4, #0]
 8002be2:	e007      	b.n	8002bf4 <HAL_UART_RxCpltCallback+0x1f0>
		}
		else if (x4 == PARSE_ERROR){
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d104      	bne.n	8002bf4 <HAL_UART_RxCpltCallback+0x1f0>
			failESC4++;
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <HAL_UART_RxCpltCallback+0x2dc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	4a3b      	ldr	r2, [pc, #236]	; (8002ce0 <HAL_UART_RxCpltCallback+0x2dc>)
 8002bf2:	6013      	str	r3, [r2, #0]
		}
	}
/* ESC 5 ---------------------------------------------------------*/
	if (HAL_UART_Receive_IT(&huart5, &aRxBuffer_5, RXBUFFERSIZE) == HAL_OK) {
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	493b      	ldr	r1, [pc, #236]	; (8002ce4 <HAL_UART_RxCpltCallback+0x2e0>)
 8002bf8:	483b      	ldr	r0, [pc, #236]	; (8002ce8 <HAL_UART_RxCpltCallback+0x2e4>)
 8002bfa:	f003 fe16 	bl	800682a <HAL_UART_Receive_IT>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f040 8085 	bne.w	8002d10 <HAL_UART_RxCpltCallback+0x30c>
		RINGBUF_Put((RINGBUF*) ringbuf5, aRxBuffer_5);
 8002c06:	4b39      	ldr	r3, [pc, #228]	; (8002cec <HAL_UART_RxCpltCallback+0x2e8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a36      	ldr	r2, [pc, #216]	; (8002ce4 <HAL_UART_RxCpltCallback+0x2e0>)
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 f9d5 	bl	8002fc0 <RINGBUF_Put>
		RINGBUF_Get((RINGBUF*) ringbuf5, &c5);
 8002c16:	4b35      	ldr	r3, [pc, #212]	; (8002cec <HAL_UART_RxCpltCallback+0x2e8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4935      	ldr	r1, [pc, #212]	; (8002cf0 <HAL_UART_RxCpltCallback+0x2ec>)
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f9f5 	bl	800300c <RINGBUF_Get>
		int x5 = telemetryParse(c5, &telemetry5, &recStatus5);
 8002c22:	4b33      	ldr	r3, [pc, #204]	; (8002cf0 <HAL_UART_RxCpltCallback+0x2ec>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	4a33      	ldr	r2, [pc, #204]	; (8002cf4 <HAL_UART_RxCpltCallback+0x2f0>)
 8002c28:	4933      	ldr	r1, [pc, #204]	; (8002cf8 <HAL_UART_RxCpltCallback+0x2f4>)
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 f936 	bl	8003e9c <telemetryParse>
 8002c30:	4603      	mov	r3, r0
 8002c32:	60fb      	str	r3, [r7, #12]
		if (x5 == PARSE_OK){
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d162      	bne.n	8002d00 <HAL_UART_RxCpltCallback+0x2fc>
			successESC5++;
 8002c3a:	4b30      	ldr	r3, [pc, #192]	; (8002cfc <HAL_UART_RxCpltCallback+0x2f8>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	4a2e      	ldr	r2, [pc, #184]	; (8002cfc <HAL_UART_RxCpltCallback+0x2f8>)
 8002c42:	6013      	str	r3, [r2, #0]
			TelemetryArray[5] = telemetry5;
 8002c44:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <HAL_UART_RxCpltCallback+0x278>)
 8002c46:	4a2c      	ldr	r2, [pc, #176]	; (8002cf8 <HAL_UART_RxCpltCallback+0x2f4>)
 8002c48:	f503 7482 	add.w	r4, r3, #260	; 0x104
 8002c4c:	4615      	mov	r5, r2
 8002c4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c5a:	682b      	ldr	r3, [r5, #0]
 8002c5c:	6023      	str	r3, [r4, #0]
 8002c5e:	e057      	b.n	8002d10 <HAL_UART_RxCpltCallback+0x30c>
 8002c60:	20004b8c 	.word	0x20004b8c
 8002c64:	20004670 	.word	0x20004670
 8002c68:	20000458 	.word	0x20000458
 8002c6c:	200046c8 	.word	0x200046c8
 8002c70:	2000433c 	.word	0x2000433c
 8002c74:	20004404 	.word	0x20004404
 8002c78:	20000498 	.word	0x20000498
 8002c7c:	200046cc 	.word	0x200046cc
 8002c80:	20000478 	.word	0x20000478
 8002c84:	20004581 	.word	0x20004581
 8002c88:	20004ac8 	.word	0x20004ac8
 8002c8c:	2000045c 	.word	0x2000045c
 8002c90:	200044c8 	.word	0x200044c8
 8002c94:	200044dc 	.word	0x200044dc
 8002c98:	20004a84 	.word	0x20004a84
 8002c9c:	2000049c 	.word	0x2000049c
 8002ca0:	2000047c 	.word	0x2000047c
 8002ca4:	20004518 	.word	0x20004518
 8002ca8:	200043c0 	.word	0x200043c0
 8002cac:	20000460 	.word	0x20000460
 8002cb0:	20004a81 	.word	0x20004a81
 8002cb4:	20004bf4 	.word	0x20004bf4
 8002cb8:	20004308 	.word	0x20004308
 8002cbc:	200004a0 	.word	0x200004a0
 8002cc0:	20000480 	.word	0x20000480
 8002cc4:	20004580 	.word	0x20004580
 8002cc8:	20004a3c 	.word	0x20004a3c
 8002ccc:	20000464 	.word	0x20000464
 8002cd0:	2000447c 	.word	0x2000447c
 8002cd4:	20004305 	.word	0x20004305
 8002cd8:	2000463c 	.word	0x2000463c
 8002cdc:	200004a4 	.word	0x200004a4
 8002ce0:	20000484 	.word	0x20000484
 8002ce4:	20004a80 	.word	0x20004a80
 8002ce8:	20004590 	.word	0x20004590
 8002cec:	20000468 	.word	0x20000468
 8002cf0:	2000458c 	.word	0x2000458c
 8002cf4:	200045d5 	.word	0x200045d5
 8002cf8:	20004944 	.word	0x20004944
 8002cfc:	200004a8 	.word	0x200004a8
		}
		else if (x5 == PARSE_ERROR){
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d104      	bne.n	8002d10 <HAL_UART_RxCpltCallback+0x30c>
			failESC5++;
 8002d06:	4b23      	ldr	r3, [pc, #140]	; (8002d94 <HAL_UART_RxCpltCallback+0x390>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	4a21      	ldr	r2, [pc, #132]	; (8002d94 <HAL_UART_RxCpltCallback+0x390>)
 8002d0e:	6013      	str	r3, [r2, #0]
		}
	}
/* ESC 6 ---------------------------------------------------------*/
  if (HAL_UART_Receive_IT(&huart6, &aRxBuffer_6, RXBUFFERSIZE) == HAL_OK) {
 8002d10:	2201      	movs	r2, #1
 8002d12:	4921      	ldr	r1, [pc, #132]	; (8002d98 <HAL_UART_RxCpltCallback+0x394>)
 8002d14:	4821      	ldr	r0, [pc, #132]	; (8002d9c <HAL_UART_RxCpltCallback+0x398>)
 8002d16:	f003 fd88 	bl	800682a <HAL_UART_Receive_IT>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d134      	bne.n	8002d8a <HAL_UART_RxCpltCallback+0x386>
	  RINGBUF_Put((RINGBUF*) ringbuf6, aRxBuffer_6);
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <HAL_UART_RxCpltCallback+0x39c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1c      	ldr	r2, [pc, #112]	; (8002d98 <HAL_UART_RxCpltCallback+0x394>)
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f948 	bl	8002fc0 <RINGBUF_Put>
	  RINGBUF_Get((RINGBUF*) ringbuf6, &c6);
 8002d30:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_UART_RxCpltCallback+0x39c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	491b      	ldr	r1, [pc, #108]	; (8002da4 <HAL_UART_RxCpltCallback+0x3a0>)
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 f968 	bl	800300c <RINGBUF_Get>
	  int x6 = telemetryParse(c6, &telemetry6, &recStatus6);
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_UART_RxCpltCallback+0x3a0>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_UART_RxCpltCallback+0x3a4>)
 8002d42:	491a      	ldr	r1, [pc, #104]	; (8002dac <HAL_UART_RxCpltCallback+0x3a8>)
 8002d44:	4618      	mov	r0, r3
 8002d46:	f001 f8a9 	bl	8003e9c <telemetryParse>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	60bb      	str	r3, [r7, #8]
	  if (x6 == PARSE_OK){
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d112      	bne.n	8002d7a <HAL_UART_RxCpltCallback+0x376>
		  successESC6++;
 8002d54:	4b16      	ldr	r3, [pc, #88]	; (8002db0 <HAL_UART_RxCpltCallback+0x3ac>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	4a15      	ldr	r2, [pc, #84]	; (8002db0 <HAL_UART_RxCpltCallback+0x3ac>)
 8002d5c:	6013      	str	r3, [r2, #0]
		  TelemetryArray[6] = telemetry6;
 8002d5e:	4b15      	ldr	r3, [pc, #84]	; (8002db4 <HAL_UART_RxCpltCallback+0x3b0>)
 8002d60:	4a12      	ldr	r2, [pc, #72]	; (8002dac <HAL_UART_RxCpltCallback+0x3a8>)
 8002d62:	f503 749c 	add.w	r4, r3, #312	; 0x138
 8002d66:	4615      	mov	r5, r2
 8002d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d74:	682b      	ldr	r3, [r5, #0]
 8002d76:	6023      	str	r3, [r4, #0]
	  }
	  else if (x6 == PARSE_ERROR){
		  failESC6++;
	  }
  }
}
 8002d78:	e007      	b.n	8002d8a <HAL_UART_RxCpltCallback+0x386>
	  else if (x6 == PARSE_ERROR){
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d104      	bne.n	8002d8a <HAL_UART_RxCpltCallback+0x386>
		  failESC6++;
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <HAL_UART_RxCpltCallback+0x3b4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	3301      	adds	r3, #1
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <HAL_UART_RxCpltCallback+0x3b4>)
 8002d88:	6013      	str	r3, [r2, #0]
}
 8002d8a:	bf00      	nop
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bdb0      	pop	{r4, r5, r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000488 	.word	0x20000488
 8002d98:	200042e4 	.word	0x200042e4
 8002d9c:	200049f4 	.word	0x200049f4
 8002da0:	2000046c 	.word	0x2000046c
 8002da4:	20004306 	.word	0x20004306
 8002da8:	200043bc 	.word	0x200043bc
 8002dac:	200044e0 	.word	0x200044e0
 8002db0:	200004ac 	.word	0x200004ac
 8002db4:	200046cc 	.word	0x200046cc
 8002db8:	2000048c 	.word	0x2000048c

08002dbc <Parse_ESC1>:
/* ESC 0 && ESC 7 ---------------------------------------------------------*/
void Parse_ESC1(void const *parameter){
 8002dbc:	b5b0      	push	{r4, r5, r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	while (1){
		aRxBuffer_0 = getdata(0);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7ff f87e 	bl	8001ec6 <getdata>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <Parse_ESC1+0xf8>)
 8002dd0:	701a      	strb	r2, [r3, #0]
		aRxBuffer_7 = getdata(1);
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f7ff f877 	bl	8001ec6 <getdata>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <Parse_ESC1+0xfc>)
 8002dde:	701a      	strb	r2, [r3, #0]
		RINGBUF_Put((RINGBUF*) ringbuf0, aRxBuffer_0);
 8002de0:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <Parse_ESC1+0x100>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a33      	ldr	r2, [pc, #204]	; (8002eb4 <Parse_ESC1+0xf8>)
 8002de6:	7812      	ldrb	r2, [r2, #0]
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f8e8 	bl	8002fc0 <RINGBUF_Put>
		RINGBUF_Put((RINGBUF*) ringbuf7, aRxBuffer_7);
 8002df0:	4b33      	ldr	r3, [pc, #204]	; (8002ec0 <Parse_ESC1+0x104>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a30      	ldr	r2, [pc, #192]	; (8002eb8 <Parse_ESC1+0xfc>)
 8002df6:	7812      	ldrb	r2, [r2, #0]
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f8e0 	bl	8002fc0 <RINGBUF_Put>
		RINGBUF_Get((RINGBUF*) ringbuf0, &c0);
 8002e00:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <Parse_ESC1+0x100>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	492f      	ldr	r1, [pc, #188]	; (8002ec4 <Parse_ESC1+0x108>)
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 f900 	bl	800300c <RINGBUF_Get>
		RINGBUF_Get((RINGBUF*) ringbuf7, &c7);
 8002e0c:	4b2c      	ldr	r3, [pc, #176]	; (8002ec0 <Parse_ESC1+0x104>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	492d      	ldr	r1, [pc, #180]	; (8002ec8 <Parse_ESC1+0x10c>)
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 f8fa 	bl	800300c <RINGBUF_Get>
		int x0 = telemetryParse(c0, &telemetry0, &recStatus0);
 8002e18:	4b2a      	ldr	r3, [pc, #168]	; (8002ec4 <Parse_ESC1+0x108>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	4a2b      	ldr	r2, [pc, #172]	; (8002ecc <Parse_ESC1+0x110>)
 8002e1e:	492c      	ldr	r1, [pc, #176]	; (8002ed0 <Parse_ESC1+0x114>)
 8002e20:	4618      	mov	r0, r3
 8002e22:	f001 f83b 	bl	8003e9c <telemetryParse>
 8002e26:	4603      	mov	r3, r0
 8002e28:	60fb      	str	r3, [r7, #12]
		if (x0 == PARSE_OK){
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d111      	bne.n	8002e54 <Parse_ESC1+0x98>
			successESC0++;
 8002e30:	4b28      	ldr	r3, [pc, #160]	; (8002ed4 <Parse_ESC1+0x118>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3301      	adds	r3, #1
 8002e36:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <Parse_ESC1+0x118>)
 8002e38:	6013      	str	r3, [r2, #0]
			TelemetryArray[0] = telemetry0;
 8002e3a:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <Parse_ESC1+0x11c>)
 8002e3c:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <Parse_ESC1+0x114>)
 8002e3e:	4614      	mov	r4, r2
 8002e40:	461d      	mov	r5, r3
 8002e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e4e:	682b      	ldr	r3, [r5, #0]
 8002e50:	6023      	str	r3, [r4, #0]
 8002e52:	e007      	b.n	8002e64 <Parse_ESC1+0xa8>
		}
		else if (x0 == PARSE_ERROR){
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d104      	bne.n	8002e64 <Parse_ESC1+0xa8>
			failESC0++;
 8002e5a:	4b20      	ldr	r3, [pc, #128]	; (8002edc <Parse_ESC1+0x120>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <Parse_ESC1+0x120>)
 8002e62:	6013      	str	r3, [r2, #0]
		}
		int x7 = telemetryParse(c7, &telemetry7, &recStatus7);
 8002e64:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <Parse_ESC1+0x10c>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <Parse_ESC1+0x124>)
 8002e6a:	491e      	ldr	r1, [pc, #120]	; (8002ee4 <Parse_ESC1+0x128>)
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f001 f815 	bl	8003e9c <telemetryParse>
 8002e72:	4603      	mov	r3, r0
 8002e74:	60bb      	str	r3, [r7, #8]
		if (x7 == PARSE_OK){
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d112      	bne.n	8002ea2 <Parse_ESC1+0xe6>
			successESC7++;
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <Parse_ESC1+0x12c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	3301      	adds	r3, #1
 8002e82:	4a19      	ldr	r2, [pc, #100]	; (8002ee8 <Parse_ESC1+0x12c>)
 8002e84:	6013      	str	r3, [r2, #0]
			TelemetryArray[7] = telemetry7;
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <Parse_ESC1+0x11c>)
 8002e88:	4a16      	ldr	r2, [pc, #88]	; (8002ee4 <Parse_ESC1+0x128>)
 8002e8a:	f503 74b6 	add.w	r4, r3, #364	; 0x16c
 8002e8e:	4615      	mov	r5, r2
 8002e90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e9c:	682b      	ldr	r3, [r5, #0]
 8002e9e:	6023      	str	r3, [r4, #0]
 8002ea0:	e790      	b.n	8002dc4 <Parse_ESC1+0x8>
		}
		else if (x7 == PARSE_ERROR){
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d18d      	bne.n	8002dc4 <Parse_ESC1+0x8>
			failESC7++;
 8002ea8:	4b10      	ldr	r3, [pc, #64]	; (8002eec <Parse_ESC1+0x130>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3301      	adds	r3, #1
 8002eae:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <Parse_ESC1+0x130>)
 8002eb0:	6013      	str	r3, [r2, #0]
	while (1){
 8002eb2:	e787      	b.n	8002dc4 <Parse_ESC1+0x8>
 8002eb4:	20004a38 	.word	0x20004a38
 8002eb8:	20004304 	.word	0x20004304
 8002ebc:	20000454 	.word	0x20000454
 8002ec0:	20000470 	.word	0x20000470
 8002ec4:	20004b0c 	.word	0x20004b0c
 8002ec8:	200042d0 	.word	0x200042d0
 8002ecc:	200045d4 	.word	0x200045d4
 8002ed0:	20004438 	.word	0x20004438
 8002ed4:	20000494 	.word	0x20000494
 8002ed8:	200046cc 	.word	0x200046cc
 8002edc:	20000474 	.word	0x20000474
 8002ee0:	20004a82 	.word	0x20004a82
 8002ee4:	20004340 	.word	0x20004340
 8002ee8:	200004b0 	.word	0x200004b0
 8002eec:	20000490 	.word	0x20000490

08002ef0 <Parse_ESC2>:
		}
	}
}
void Parse_ESC2(void const *parameter){
 8002ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ef2:	b08b      	sub	sp, #44	; 0x2c
 8002ef4:	af08      	add	r7, sp, #32
 8002ef6:	6078      	str	r0, [r7, #4]
	while (1){
		  transmit_mavlink_esc_1_to_4(esc1);
 8002ef8:	4e11      	ldr	r6, [pc, #68]	; (8002f40 <Parse_ESC2+0x50>)
 8002efa:	466d      	mov	r5, sp
 8002efc:	f106 0410 	add.w	r4, r6, #16
 8002f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f04:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002f08:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002f0c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f10:	f7fe fff2 	bl	8001ef8 <transmit_mavlink_esc_1_to_4>
		  osDelay(10);
 8002f14:	200a      	movs	r0, #10
 8002f16:	f004 fbdc 	bl	80076d2 <osDelay>
		  transmit_mavlink_esc_5_to_8(esc2);
 8002f1a:	4e0a      	ldr	r6, [pc, #40]	; (8002f44 <Parse_ESC2+0x54>)
 8002f1c:	466d      	mov	r5, sp
 8002f1e:	f106 0410 	add.w	r4, r6, #16
 8002f22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f26:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002f2a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8002f2e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002f32:	f7ff f887 	bl	8002044 <transmit_mavlink_esc_5_to_8>
		  osDelay(10);
 8002f36:	200a      	movs	r0, #10
 8002f38:	f004 fbcb 	bl	80076d2 <osDelay>
		  transmit_mavlink_esc_1_to_4(esc1);
 8002f3c:	e7dc      	b.n	8002ef8 <Parse_ESC2+0x8>
 8002f3e:	bf00      	nop
 8002f40:	200004b4 	.word	0x200004b4
 8002f44:	200004e0 	.word	0x200004e0

08002f48 <HAL_TIM_PeriodElapsedCallback>:
}
void Parse_ESC6(void const *parameter){
	while (1){}
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		SoftUartHandler();
 8002f5a:	f000 fb29 	bl	80035b0 <SoftUartHandler>
	}
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40014400 	.word	0x40014400

08002f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f70:	b672      	cpsid	i
}
 8002f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <Error_Handler+0x8>

08002f76 <RINGBUF_Init>:
  * @param  buf pointer to a byte array
  * @param 	size size of buf
  * @retval 0 if successfull, otherwise failed
  */
int32_t RINGBUF_Init(RINGBUF *r, uint8_t* buf, uint32_t size)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b085      	sub	sp, #20
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
	if(r == NULL || buf == NULL || size < 2) return -1;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <RINGBUF_Init+0x1e>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d002      	beq.n	8002f94 <RINGBUF_Init+0x1e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d802      	bhi.n	8002f9a <RINGBUF_Init+0x24>
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
 8002f98:	e00c      	b.n	8002fb4 <RINGBUF_Init+0x3e>

	r->pt = buf;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	60da      	str	r2, [r3, #12]
	r->head = 0;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
	r->tail = 0;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	605a      	str	r2, [r3, #4]
	r->size = size;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	609a      	str	r2, [r3, #8]

	return 0;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <RINGBUF_Put>:
  * @param  c character to be put
  * @param 	size size of buf
  * @retval 0 if successfull, otherwise failed
  */
int32_t RINGBUF_Put(RINGBUF *r, uint8_t c)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
	uint32_t temp;
	temp = r->head;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	60fb      	str	r3, [r7, #12]
	temp++;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]

	if(temp >= r->size)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d301      	bcc.n	8002fe6 <RINGBUF_Put+0x26>
	{
		temp = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60fb      	str	r3, [r7, #12]
	}
	if(temp == r->tail)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
	{
	 	// return -1;		// ring buffer is full
	}

	r->pt[r->head] = c;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	701a      	strb	r2, [r3, #0]
	r->head = temp;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	601a      	str	r2, [r3, #0]

	return 0;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <RINGBUF_Get>:
  * @param  r pointer to a ringbuf object
  * @param  c read character
  * @retval 0 if successfull, otherwise failed
  */
int32_t  RINGBUF_Get(RINGBUF *r, uint8_t* c)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
	if(r->tail == r->head)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d102      	bne.n	8003028 <RINGBUF_Get+0x1c>
	{
		return -1;				// ring buffer is empty, this should be atomic operation
 8003022:	f04f 33ff 	mov.w	r3, #4294967295
 8003026:	e017      	b.n	8003058 <RINGBUF_Get+0x4c>
	}

	*c = r->pt[r->tail];
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4413      	add	r3, r2
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b2da      	uxtb	r2, r3
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	701a      	strb	r2, [r3, #0]
	r->tail++;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	605a      	str	r2, [r3, #4]

	if(r->tail >= r->size)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	429a      	cmp	r2, r3
 800304e:	d302      	bcc.n	8003056 <RINGBUF_Get+0x4a>
	{
		r->tail = 0;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	605a      	str	r2, [r3, #4]
	}
	return 0;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <SoftUartGpioReadPin>:
// For timing division
__IO  uint8_t 		SU_Timer=0;

// Read RX single Pin Value
GPIO_PinState SoftUartGpioReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	807b      	strh	r3, [r7, #2]
	return HAL_GPIO_ReadPin(GPIOx,GPIO_Pin);
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	4619      	mov	r1, r3
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f001 fe17 	bl	8004ca8 <HAL_GPIO_ReadPin>
 800307a:	4603      	mov	r3, r0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3708      	adds	r7, #8
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <SoftUartGpioWritePin>:

// Write TX single Pin Value
void SoftUartGpioWritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	807b      	strh	r3, [r7, #2]
 8003090:	4613      	mov	r3, r2
 8003092:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx,GPIO_Pin,PinState);
 8003094:	787a      	ldrb	r2, [r7, #1]
 8003096:	887b      	ldrh	r3, [r7, #2]
 8003098:	4619      	mov	r1, r3
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f001 fe1c 	bl	8004cd8 <HAL_GPIO_WritePin>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <SoftUartInit>:

// Initial Soft Uart
SoftUartState_E SoftUartInit(uint8_t SoftUartNumber,GPIO_TypeDef *TxPort,uint16_t TxPin,GPIO_TypeDef *RxPort,uint16_t RxPin)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607b      	str	r3, [r7, #4]
 80030b2:	4603      	mov	r3, r0
 80030b4:	73fb      	strb	r3, [r7, #15]
 80030b6:	4613      	mov	r3, r2
 80030b8:	81bb      	strh	r3, [r7, #12]
	if(SoftUartNumber>=Number_Of_SoftUarts)return SoftUart_Error;
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d901      	bls.n	80030c4 <SoftUartInit+0x1c>
 80030c0:	2301      	movs	r3, #1
 80030c2:	e07c      	b.n	80031be <SoftUartInit+0x116>

	SUart[SoftUartNumber].TxNComplated=0;
 80030c4:	7bfb      	ldrb	r3, [r7, #15]
 80030c6:	4a41      	ldr	r2, [pc, #260]	; (80031cc <SoftUartInit+0x124>)
 80030c8:	015b      	lsls	r3, r3, #5
 80030ca:	4413      	add	r3, r2
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].RxBitCounter=0;
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	4a3e      	ldr	r2, [pc, #248]	; (80031cc <SoftUartInit+0x124>)
 80030d4:	015b      	lsls	r3, r3, #5
 80030d6:	4413      	add	r3, r2
 80030d8:	3306      	adds	r3, #6
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].RxBitShift=0;
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	4a3a      	ldr	r2, [pc, #232]	; (80031cc <SoftUartInit+0x124>)
 80030e2:	015b      	lsls	r3, r3, #5
 80030e4:	4413      	add	r3, r2
 80030e6:	3305      	adds	r3, #5
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].RxIndex=0;
 80030ec:	7bfb      	ldrb	r3, [r7, #15]
 80030ee:	4a37      	ldr	r2, [pc, #220]	; (80031cc <SoftUartInit+0x124>)
 80030f0:	015b      	lsls	r3, r3, #5
 80030f2:	4413      	add	r3, r2
 80030f4:	3309      	adds	r3, #9
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].TxEnable=0;
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	4a33      	ldr	r2, [pc, #204]	; (80031cc <SoftUartInit+0x124>)
 80030fe:	015b      	lsls	r3, r3, #5
 8003100:	4413      	add	r3, r2
 8003102:	3301      	adds	r3, #1
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].RxEnable=0;
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	4a30      	ldr	r2, [pc, #192]	; (80031cc <SoftUartInit+0x124>)
 800310c:	015b      	lsls	r3, r3, #5
 800310e:	4413      	add	r3, r2
 8003110:	3302      	adds	r3, #2
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].TxBitCounter=0;
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	4a2c      	ldr	r2, [pc, #176]	; (80031cc <SoftUartInit+0x124>)
 800311a:	015b      	lsls	r3, r3, #5
 800311c:	4413      	add	r3, r2
 800311e:	3304      	adds	r3, #4
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].TxBitShift=0;
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	4a29      	ldr	r2, [pc, #164]	; (80031cc <SoftUartInit+0x124>)
 8003128:	015b      	lsls	r3, r3, #5
 800312a:	4413      	add	r3, r2
 800312c:	3303      	adds	r3, #3
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].TxIndex=0;
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	4a25      	ldr	r2, [pc, #148]	; (80031cc <SoftUartInit+0x124>)
 8003136:	015b      	lsls	r3, r3, #5
 8003138:	4413      	add	r3, r2
 800313a:	3307      	adds	r3, #7
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].TxSize=0;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
 8003142:	4a22      	ldr	r2, [pc, #136]	; (80031cc <SoftUartInit+0x124>)
 8003144:	015b      	lsls	r3, r3, #5
 8003146:	4413      	add	r3, r2
 8003148:	3308      	adds	r3, #8
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]

	SUart[SoftUartNumber].Buffer=&SUBuffer[SoftUartNumber];
 800314e:	7bfa      	ldrb	r2, [r7, #15]
 8003150:	7bf9      	ldrb	r1, [r7, #15]
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	015b      	lsls	r3, r3, #5
 800315a:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <SoftUartInit+0x128>)
 800315c:	441a      	add	r2, r3
 800315e:	481b      	ldr	r0, [pc, #108]	; (80031cc <SoftUartInit+0x124>)
 8003160:	014b      	lsls	r3, r1, #5
 8003162:	4403      	add	r3, r0
 8003164:	330c      	adds	r3, #12
 8003166:	601a      	str	r2, [r3, #0]

	SUart[SoftUartNumber].RxPort=RxPort;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	4a18      	ldr	r2, [pc, #96]	; (80031cc <SoftUartInit+0x124>)
 800316c:	015b      	lsls	r3, r3, #5
 800316e:	4413      	add	r3, r2
 8003170:	3318      	adds	r3, #24
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	601a      	str	r2, [r3, #0]
	SUart[SoftUartNumber].RxPin=RxPin;
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	4a14      	ldr	r2, [pc, #80]	; (80031cc <SoftUartInit+0x124>)
 800317a:	015b      	lsls	r3, r3, #5
 800317c:	4413      	add	r3, r2
 800317e:	331c      	adds	r3, #28
 8003180:	8b3a      	ldrh	r2, [r7, #24]
 8003182:	801a      	strh	r2, [r3, #0]

	SUart[SoftUartNumber].TxPort=TxPort;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	4a11      	ldr	r2, [pc, #68]	; (80031cc <SoftUartInit+0x124>)
 8003188:	015b      	lsls	r3, r3, #5
 800318a:	4413      	add	r3, r2
 800318c:	3310      	adds	r3, #16
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	601a      	str	r2, [r3, #0]
	SUart[SoftUartNumber].TxPin=TxPin;
 8003192:	7bfb      	ldrb	r3, [r7, #15]
 8003194:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <SoftUartInit+0x124>)
 8003196:	015b      	lsls	r3, r3, #5
 8003198:	4413      	add	r3, r2
 800319a:	3314      	adds	r3, #20
 800319c:	89ba      	ldrh	r2, [r7, #12]
 800319e:	801a      	strh	r2, [r3, #0]

	SUart[SoftUartNumber].RxTimingFlag=0;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <SoftUartInit+0x124>)
 80031a4:	015b      	lsls	r3, r3, #5
 80031a6:	4413      	add	r3, r2
 80031a8:	331e      	adds	r3, #30
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
	SUart[SoftUartNumber].RxBitOffset=0;
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	4a06      	ldr	r2, [pc, #24]	; (80031cc <SoftUartInit+0x124>)
 80031b2:	015b      	lsls	r3, r3, #5
 80031b4:	4413      	add	r3, r2
 80031b6:	331f      	adds	r3, #31
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]

	return SoftUart_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20004d2c 	.word	0x20004d2c
 80031d0:	20004c6c 	.word	0x20004c6c

080031d4 <SoftUartTransmitBit>:

// Send one bit to TX pin
void SoftUartTransmitBit(SoftUart_S *SU,uint8_t Bit0_1)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	460b      	mov	r3, r1
 80031de:	70fb      	strb	r3, [r7, #3]
	SoftUartGpioWritePin(SU->TxPort,SU->TxPin,(GPIO_PinState)Bit0_1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6918      	ldr	r0, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8a9b      	ldrh	r3, [r3, #20]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	4619      	mov	r1, r3
 80031ec:	f7ff ff4a 	bl	8003084 <SoftUartGpioWritePin>
}
 80031f0:	bf00      	nop
 80031f2:	3708      	adds	r7, #8
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <SoftUartEnableRx>:

// Enable Soft Uart Receiving
SoftUartState_E SoftUartEnableRx(uint8_t SoftUartNumber)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	71fb      	strb	r3, [r7, #7]
	if(SoftUartNumber>=Number_Of_SoftUarts)return SoftUart_Error;
 8003202:	79fb      	ldrb	r3, [r7, #7]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d901      	bls.n	800320c <SoftUartEnableRx+0x14>
 8003208:	2301      	movs	r3, #1
 800320a:	e007      	b.n	800321c <SoftUartEnableRx+0x24>
	SUart[SoftUartNumber].RxEnable=1;
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	4a06      	ldr	r2, [pc, #24]	; (8003228 <SoftUartEnableRx+0x30>)
 8003210:	015b      	lsls	r3, r3, #5
 8003212:	4413      	add	r3, r2
 8003214:	3302      	adds	r3, #2
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
	return SoftUart_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	20004d2c 	.word	0x20004d2c

0800322c <SoftUartRxAlavailable>:
	return SoftUart_OK;
}

// Read Size of Received Data in buffer
uint8_t SoftUartRxAlavailable(uint8_t SoftUartNumber)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
	return SUart[SoftUartNumber].RxIndex;
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	4a05      	ldr	r2, [pc, #20]	; (8003250 <SoftUartRxAlavailable+0x24>)
 800323a:	015b      	lsls	r3, r3, #5
 800323c:	4413      	add	r3, r2
 800323e:	3309      	adds	r3, #9
 8003240:	781b      	ldrb	r3, [r3, #0]
}
 8003242:	4618      	mov	r0, r3
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20004d2c 	.word	0x20004d2c

08003254 <SoftUartReadRxBuffer>:

// Move Received Data to Another Buffer
SoftUartState_E SoftUartReadRxBuffer(uint8_t SoftUartNumber,uint8_t *Buffer,uint8_t Len)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	4603      	mov	r3, r0
 800325c:	6039      	str	r1, [r7, #0]
 800325e:	71fb      	strb	r3, [r7, #7]
 8003260:	4613      	mov	r3, r2
 8003262:	71bb      	strb	r3, [r7, #6]
	int i;
	if(SoftUartNumber>=Number_Of_SoftUarts)return SoftUart_Error;
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d901      	bls.n	800326e <SoftUartReadRxBuffer+0x1a>
 800326a:	2301      	movs	r3, #1
 800326c:	e04f      	b.n	800330e <SoftUartReadRxBuffer+0xba>
	for(i=0;i<Len;i++)
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	e010      	b.n	8003296 <SoftUartReadRxBuffer+0x42>
	{
		Buffer[i]=SUart[SoftUartNumber].Buffer->Rx[i];
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	4a29      	ldr	r2, [pc, #164]	; (800331c <SoftUartReadRxBuffer+0xc8>)
 8003278:	015b      	lsls	r3, r3, #5
 800327a:	4413      	add	r3, r2
 800327c:	330c      	adds	r3, #12
 800327e:	6819      	ldr	r1, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	4413      	add	r3, r2
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	440a      	add	r2, r1
 800328a:	3220      	adds	r2, #32
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	701a      	strb	r2, [r3, #0]
	for(i=0;i<Len;i++)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	3301      	adds	r3, #1
 8003294:	60fb      	str	r3, [r7, #12]
 8003296:	79bb      	ldrb	r3, [r7, #6]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	429a      	cmp	r2, r3
 800329c:	dbea      	blt.n	8003274 <SoftUartReadRxBuffer+0x20>
	}
	for(i=0;i<SUart[SoftUartNumber].RxIndex;i++)
 800329e:	2300      	movs	r3, #0
 80032a0:	60fb      	str	r3, [r7, #12]
 80032a2:	e019      	b.n	80032d8 <SoftUartReadRxBuffer+0x84>
	{
		SUart[SoftUartNumber].Buffer->Rx[i] = SUart[SoftUartNumber].Buffer->Rx[i+Len];
 80032a4:	79fb      	ldrb	r3, [r7, #7]
 80032a6:	4a1d      	ldr	r2, [pc, #116]	; (800331c <SoftUartReadRxBuffer+0xc8>)
 80032a8:	015b      	lsls	r3, r3, #5
 80032aa:	4413      	add	r3, r2
 80032ac:	330c      	adds	r3, #12
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	79ba      	ldrb	r2, [r7, #6]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4413      	add	r3, r2
 80032b6:	79fa      	ldrb	r2, [r7, #7]
 80032b8:	4818      	ldr	r0, [pc, #96]	; (800331c <SoftUartReadRxBuffer+0xc8>)
 80032ba:	0152      	lsls	r2, r2, #5
 80032bc:	4402      	add	r2, r0
 80032be:	320c      	adds	r2, #12
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	440b      	add	r3, r1
 80032c4:	f893 1020 	ldrb.w	r1, [r3, #32]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4413      	add	r3, r2
 80032cc:	3320      	adds	r3, #32
 80032ce:	460a      	mov	r2, r1
 80032d0:	701a      	strb	r2, [r3, #0]
	for(i=0;i<SUart[SoftUartNumber].RxIndex;i++)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	3301      	adds	r3, #1
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	4a10      	ldr	r2, [pc, #64]	; (800331c <SoftUartReadRxBuffer+0xc8>)
 80032dc:	015b      	lsls	r3, r3, #5
 80032de:	4413      	add	r3, r2
 80032e0:	3309      	adds	r3, #9
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4293      	cmp	r3, r2
 80032ea:	dbdb      	blt.n	80032a4 <SoftUartReadRxBuffer+0x50>
	}
	SUart[SoftUartNumber].RxIndex -= Len;
 80032ec:	79fb      	ldrb	r3, [r7, #7]
 80032ee:	4a0b      	ldr	r2, [pc, #44]	; (800331c <SoftUartReadRxBuffer+0xc8>)
 80032f0:	015b      	lsls	r3, r3, #5
 80032f2:	4413      	add	r3, r2
 80032f4:	3309      	adds	r3, #9
 80032f6:	7819      	ldrb	r1, [r3, #0]
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	79ba      	ldrb	r2, [r7, #6]
 80032fc:	1a8a      	subs	r2, r1, r2
 80032fe:	b2d1      	uxtb	r1, r2
 8003300:	4a06      	ldr	r2, [pc, #24]	; (800331c <SoftUartReadRxBuffer+0xc8>)
 8003302:	015b      	lsls	r3, r3, #5
 8003304:	4413      	add	r3, r2
 8003306:	3309      	adds	r3, #9
 8003308:	460a      	mov	r2, r1
 800330a:	701a      	strb	r2, [r3, #0]
	return SoftUart_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	20004d2c 	.word	0x20004d2c

08003320 <SoftUartTxProcess>:

// Soft Uart Transmit Data Process
void SoftUartTxProcess(SoftUart_S *SU)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	if(SU->TxEnable)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d066      	beq.n	80033fe <SoftUartTxProcess+0xde>
	{
		// Start
		if(SU->TxBitCounter==0)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	791b      	ldrb	r3, [r3, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d110      	bne.n	800335a <SoftUartTxProcess+0x3a>
		{
			SU->TxNComplated = 1;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
			SU->TxBitShift=0;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	70da      	strb	r2, [r3, #3]
			SoftUartTransmitBit(SU,0);
 8003344:	2100      	movs	r1, #0
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff44 	bl	80031d4 <SoftUartTransmitBit>
			SU->TxBitCounter++;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	791b      	ldrb	r3, [r3, #4]
 8003350:	3301      	adds	r3, #1
 8003352:	b2da      	uxtb	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	711a      	strb	r2, [r3, #4]
				SU->TxNComplated=0;
				SU->TxEnable=0;
			}
		}
	}
}
 8003358:	e051      	b.n	80033fe <SoftUartTxProcess+0xde>
		else if(SU->TxBitCounter<9)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	791b      	ldrb	r3, [r3, #4]
 800335e:	2b08      	cmp	r3, #8
 8003360:	d81e      	bhi.n	80033a0 <SoftUartTxProcess+0x80>
			SoftUartTransmitBit(SU,((SU->Buffer->Tx[SU->TxIndex])>>(SU->TxBitShift))&0x01);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	79d2      	ldrb	r2, [r2, #7]
 800336a:	5c9b      	ldrb	r3, [r3, r2]
 800336c:	461a      	mov	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	78db      	ldrb	r3, [r3, #3]
 8003372:	fa42 f303 	asr.w	r3, r2, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	b2db      	uxtb	r3, r3
 800337e:	4619      	mov	r1, r3
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff ff27 	bl	80031d4 <SoftUartTransmitBit>
			SU->TxBitCounter++;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	791b      	ldrb	r3, [r3, #4]
 800338a:	3301      	adds	r3, #1
 800338c:	b2da      	uxtb	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	711a      	strb	r2, [r3, #4]
			SU->TxBitShift++;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	78db      	ldrb	r3, [r3, #3]
 8003396:	3301      	adds	r3, #1
 8003398:	b2da      	uxtb	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	70da      	strb	r2, [r3, #3]
}
 800339e:	e02e      	b.n	80033fe <SoftUartTxProcess+0xde>
		else if(SU->TxBitCounter==9)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	791b      	ldrb	r3, [r3, #4]
 80033a4:	2b09      	cmp	r3, #9
 80033a6:	d10a      	bne.n	80033be <SoftUartTxProcess+0x9e>
			SoftUartTransmitBit(SU,1);
 80033a8:	2101      	movs	r1, #1
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7ff ff12 	bl	80031d4 <SoftUartTransmitBit>
			SU->TxBitCounter++;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	791b      	ldrb	r3, [r3, #4]
 80033b4:	3301      	adds	r3, #1
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	711a      	strb	r2, [r3, #4]
}
 80033bc:	e01f      	b.n	80033fe <SoftUartTxProcess+0xde>
		else if(SU->TxBitCounter==10)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	791b      	ldrb	r3, [r3, #4]
 80033c2:	2b0a      	cmp	r3, #10
 80033c4:	d11b      	bne.n	80033fe <SoftUartTxProcess+0xde>
			SU->TxBitCounter=0;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	711a      	strb	r2, [r3, #4]
			SU->TxIndex++;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	79db      	ldrb	r3, [r3, #7]
 80033d0:	3301      	adds	r3, #1
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	71da      	strb	r2, [r3, #7]
			if(SU->TxSize > SU->TxIndex)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7a1a      	ldrb	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	79db      	ldrb	r3, [r3, #7]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d906      	bls.n	80033f2 <SoftUartTxProcess+0xd2>
				SU->TxNComplated=1;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	701a      	strb	r2, [r3, #0]
				SU->TxEnable=1;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	705a      	strb	r2, [r3, #1]
}
 80033f0:	e005      	b.n	80033fe <SoftUartTxProcess+0xde>
				SU->TxNComplated=0;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
				SU->TxEnable=0;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	705a      	strb	r2, [r3, #1]
}
 80033fe:	bf00      	nop
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <SoftUartRxDataBitProcess>:

// Soft Uart Receive Data Process
void SoftUartRxDataBitProcess(SoftUart_S *SU,uint8_t B0_1)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	460b      	mov	r3, r1
 8003410:	70fb      	strb	r3, [r7, #3]
	if(SU->RxEnable)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	789b      	ldrb	r3, [r3, #2]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d05c      	beq.n	80034d4 <SoftUartRxDataBitProcess+0xce>
	{
		// Start
		if(SU->RxBitCounter==0)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	799b      	ldrb	r3, [r3, #6]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d114      	bne.n	800344c <SoftUartRxDataBitProcess+0x46>
		{
			// Start Bit is 0
			if(B0_1)return;
 8003422:	78fb      	ldrb	r3, [r7, #3]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d154      	bne.n	80034d2 <SoftUartRxDataBitProcess+0xcc>

			SU->RxBitShift=0;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	715a      	strb	r2, [r3, #5]
			SU->RxBitCounter++;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	799b      	ldrb	r3, [r3, #6]
 8003432:	3301      	adds	r3, #1
 8003434:	b2da      	uxtb	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	719a      	strb	r2, [r3, #6]
			SU->Buffer->Rx[SU->RxIndex]=0;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	7a52      	ldrb	r2, [r2, #9]
 8003442:	4413      	add	r3, r2
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2020 	strb.w	r2, [r3, #32]
 800344a:	e043      	b.n	80034d4 <SoftUartRxDataBitProcess+0xce>
		}
		// Data
		else if(SU->RxBitCounter<9)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	799b      	ldrb	r3, [r3, #6]
 8003450:	2b08      	cmp	r3, #8
 8003452:	d826      	bhi.n	80034a2 <SoftUartRxDataBitProcess+0x9c>
		{
			SU->Buffer->Rx[SU->RxIndex]|=((B0_1&0x01)<<SU->RxBitShift);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	7a52      	ldrb	r2, [r2, #9]
 800345c:	4413      	add	r3, r2
 800345e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003462:	b25a      	sxtb	r2, r3
 8003464:	78fb      	ldrb	r3, [r7, #3]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	6879      	ldr	r1, [r7, #4]
 800346c:	7949      	ldrb	r1, [r1, #5]
 800346e:	408b      	lsls	r3, r1
 8003470:	b25b      	sxtb	r3, r3
 8003472:	4313      	orrs	r3, r2
 8003474:	b258      	sxtb	r0, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	7a52      	ldrb	r2, [r2, #9]
 800347e:	4611      	mov	r1, r2
 8003480:	b2c2      	uxtb	r2, r0
 8003482:	440b      	add	r3, r1
 8003484:	f883 2020 	strb.w	r2, [r3, #32]
			SU->RxBitCounter++;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	799b      	ldrb	r3, [r3, #6]
 800348c:	3301      	adds	r3, #1
 800348e:	b2da      	uxtb	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	719a      	strb	r2, [r3, #6]
			SU->RxBitShift++;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	795b      	ldrb	r3, [r3, #5]
 8003498:	3301      	adds	r3, #1
 800349a:	b2da      	uxtb	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	715a      	strb	r2, [r3, #5]
 80034a0:	e018      	b.n	80034d4 <SoftUartRxDataBitProcess+0xce>
		}
		// Stop and Complete
		else if(SU->RxBitCounter==9)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	799b      	ldrb	r3, [r3, #6]
 80034a6:	2b09      	cmp	r3, #9
 80034a8:	d114      	bne.n	80034d4 <SoftUartRxDataBitProcess+0xce>
		{
			SU->RxBitCounter=0;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	719a      	strb	r2, [r3, #6]
			SU->RxTimingFlag=0;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	779a      	strb	r2, [r3, #30]

			//Stop Bit must be 1
			if(B0_1)
 80034b6:	78fb      	ldrb	r3, [r7, #3]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00b      	beq.n	80034d4 <SoftUartRxDataBitProcess+0xce>
			{
				// Received successfully
				// Change RX Buffer Index
				if((SU->RxIndex)<(SoftUartRxBufferSize-1))(SU->RxIndex)++;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	7a5b      	ldrb	r3, [r3, #9]
 80034c0:	2b3e      	cmp	r3, #62	; 0x3e
 80034c2:	d807      	bhi.n	80034d4 <SoftUartRxDataBitProcess+0xce>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7a5b      	ldrb	r3, [r3, #9]
 80034c8:	3301      	adds	r3, #1
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	725a      	strb	r2, [r3, #9]
 80034d0:	e000      	b.n	80034d4 <SoftUartRxDataBitProcess+0xce>
			if(B0_1)return;
 80034d2:	bf00      	nop
			}
			// if not : ERROR -> Overwrite data
		}
	}
}
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <SoftUartScanRxPorts>:
	return SoftUart_OK;
}

// Capture RX and Get BitOffset
uint8_t SoftUartScanRxPorts(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
	int i;
	uint8_t Buffer=0x00,Bit;
 80034e6:	2300      	movs	r3, #0
 80034e8:	70fb      	strb	r3, [r7, #3]

	for(i=0;i<Number_Of_SoftUarts;i++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
 80034ee:	e050      	b.n	8003592 <SoftUartScanRxPorts+0xb2>
	{
		// Read RX GPIO Value
		Bit=SoftUartGpioReadPin(SUart[i].RxPort,SUart[i].RxPin);
 80034f0:	4a2c      	ldr	r2, [pc, #176]	; (80035a4 <SoftUartScanRxPorts+0xc4>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	015b      	lsls	r3, r3, #5
 80034f6:	4413      	add	r3, r2
 80034f8:	3318      	adds	r3, #24
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4929      	ldr	r1, [pc, #164]	; (80035a4 <SoftUartScanRxPorts+0xc4>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	015b      	lsls	r3, r3, #5
 8003502:	440b      	add	r3, r1
 8003504:	331c      	adds	r3, #28
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	4619      	mov	r1, r3
 800350a:	4610      	mov	r0, r2
 800350c:	f7ff fdaa 	bl	8003064 <SoftUartGpioReadPin>
 8003510:	4603      	mov	r3, r0
 8003512:	70bb      	strb	r3, [r7, #2]

		// Starting conditions
		if(!SUart[i].RxBitCounter && !SUart[i].RxTimingFlag && !Bit)
 8003514:	4a23      	ldr	r2, [pc, #140]	; (80035a4 <SoftUartScanRxPorts+0xc4>)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	015b      	lsls	r3, r3, #5
 800351a:	4413      	add	r3, r2
 800351c:	3306      	adds	r3, #6
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d127      	bne.n	8003574 <SoftUartScanRxPorts+0x94>
 8003524:	4a1f      	ldr	r2, [pc, #124]	; (80035a4 <SoftUartScanRxPorts+0xc4>)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	015b      	lsls	r3, r3, #5
 800352a:	4413      	add	r3, r2
 800352c:	331e      	adds	r3, #30
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d11f      	bne.n	8003574 <SoftUartScanRxPorts+0x94>
 8003534:	78bb      	ldrb	r3, [r7, #2]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d11c      	bne.n	8003574 <SoftUartScanRxPorts+0x94>
		{
			// Save RX Bit Offset
			// Calculate middle position of data pulse
			SUart[i].RxBitOffset=((SU_Timer+2)%5);
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <SoftUartScanRxPorts+0xc8>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	1c9a      	adds	r2, r3, #2
 8003542:	4b1a      	ldr	r3, [pc, #104]	; (80035ac <SoftUartScanRxPorts+0xcc>)
 8003544:	fb83 1302 	smull	r1, r3, r3, r2
 8003548:	1059      	asrs	r1, r3, #1
 800354a:	17d3      	asrs	r3, r2, #31
 800354c:	1ac9      	subs	r1, r1, r3
 800354e:	460b      	mov	r3, r1
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	1ad1      	subs	r1, r2, r3
 8003556:	b2c9      	uxtb	r1, r1
 8003558:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <SoftUartScanRxPorts+0xc4>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	015b      	lsls	r3, r3, #5
 800355e:	4413      	add	r3, r2
 8003560:	331f      	adds	r3, #31
 8003562:	460a      	mov	r2, r1
 8003564:	701a      	strb	r2, [r3, #0]

			// Timing Offset is Set
			SUart[i].RxTimingFlag=1;
 8003566:	4a0f      	ldr	r2, [pc, #60]	; (80035a4 <SoftUartScanRxPorts+0xc4>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	015b      	lsls	r3, r3, #5
 800356c:	4413      	add	r3, r2
 800356e:	331e      	adds	r3, #30
 8003570:	2201      	movs	r2, #1
 8003572:	701a      	strb	r2, [r3, #0]
		}

		// Add all RX GPIO State to Buffer
		Buffer|=((Bit&0x01)<<i);
 8003574:	78bb      	ldrb	r3, [r7, #2]
 8003576:	f003 0201 	and.w	r2, r3, #1
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	b25a      	sxtb	r2, r3
 8003582:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003586:	4313      	orrs	r3, r2
 8003588:	b25b      	sxtb	r3, r3
 800358a:	70fb      	strb	r3, [r7, #3]
	for(i=0;i<Number_Of_SoftUarts;i++)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3301      	adds	r3, #1
 8003590:	607b      	str	r3, [r7, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b01      	cmp	r3, #1
 8003596:	ddab      	ble.n	80034f0 <SoftUartScanRxPorts+0x10>
	}
	return Buffer;
 8003598:	78fb      	ldrb	r3, [r7, #3]
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	20004d2c 	.word	0x20004d2c
 80035a8:	2000056c 	.word	0x2000056c
 80035ac:	66666667 	.word	0x66666667

080035b0 <SoftUartHandler>:

// SoftUartHandler must call in interrupt every 0.2*(1/BR)
// if BR=9600 then 0.2*(1/9600)=20.8333333 uS
void SoftUartHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
	int     	i;
	uint8_t 	SU_DBuffer;

	// Capture RX and Get BitOffset
	SU_DBuffer = SoftUartScanRxPorts();
 80035b6:	f7ff ff93 	bl	80034e0 <SoftUartScanRxPorts>
 80035ba:	4603      	mov	r3, r0
 80035bc:	70fb      	strb	r3, [r7, #3]

	for(i=0;i < Number_Of_SoftUarts;i++)
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	e01c      	b.n	80035fe <SoftUartHandler+0x4e>
	{
		// Receive Data if we in middle data pulse position
		if(SUart[i].RxBitOffset == SU_Timer)
 80035c4:	4a23      	ldr	r2, [pc, #140]	; (8003654 <SoftUartHandler+0xa4>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	015b      	lsls	r3, r3, #5
 80035ca:	4413      	add	r3, r2
 80035cc:	331f      	adds	r3, #31
 80035ce:	781a      	ldrb	r2, [r3, #0]
 80035d0:	4b21      	ldr	r3, [pc, #132]	; (8003658 <SoftUartHandler+0xa8>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d10e      	bne.n	80035f8 <SoftUartHandler+0x48>
		{
			SoftUartRxDataBitProcess(&SUart[i],((SU_DBuffer>>i)&0x01));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	015b      	lsls	r3, r3, #5
 80035de:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <SoftUartHandler+0xa4>)
 80035e0:	1898      	adds	r0, r3, r2
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	fa42 f303 	asr.w	r3, r2, r3
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	4619      	mov	r1, r3
 80035f4:	f7ff ff07 	bl	8003406 <SoftUartRxDataBitProcess>
	for(i=0;i < Number_Of_SoftUarts;i++)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3301      	adds	r3, #1
 80035fc:	607b      	str	r3, [r7, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b01      	cmp	r3, #1
 8003602:	dddf      	ble.n	80035c4 <SoftUartHandler+0x14>
		}
	}

	// Sending always happens in the first time slot
	if(SU_Timer==0)
 8003604:	4b14      	ldr	r3, [pc, #80]	; (8003658 <SoftUartHandler+0xa8>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10f      	bne.n	800362e <SoftUartHandler+0x7e>
	{
		// Transmit Data
		for(i=0;i < Number_Of_SoftUarts;i++)
 800360e:	2300      	movs	r3, #0
 8003610:	607b      	str	r3, [r7, #4]
 8003612:	e009      	b.n	8003628 <SoftUartHandler+0x78>
		{
			SoftUartTxProcess(&SUart[i]);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	015b      	lsls	r3, r3, #5
 8003618:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <SoftUartHandler+0xa4>)
 800361a:	4413      	add	r3, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff fe7f 	bl	8003320 <SoftUartTxProcess>
		for(i=0;i < Number_Of_SoftUarts;i++)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3301      	adds	r3, #1
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b01      	cmp	r3, #1
 800362c:	ddf2      	ble.n	8003614 <SoftUartHandler+0x64>
		}
	}

	// Timing process
	SU_Timer++;
 800362e:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <SoftUartHandler+0xa8>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	b2db      	uxtb	r3, r3
 8003634:	3301      	adds	r3, #1
 8003636:	b2da      	uxtb	r2, r3
 8003638:	4b07      	ldr	r3, [pc, #28]	; (8003658 <SoftUartHandler+0xa8>)
 800363a:	701a      	strb	r2, [r3, #0]
	if(SU_Timer >= 5)SU_Timer=0;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <SoftUartHandler+0xa8>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b04      	cmp	r3, #4
 8003644:	d902      	bls.n	800364c <SoftUartHandler+0x9c>
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <SoftUartHandler+0xa8>)
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20004d2c 	.word	0x20004d2c
 8003658:	2000056c 	.word	0x2000056c

0800365c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <HAL_MspInit+0x54>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366a:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <HAL_MspInit+0x54>)
 800366c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003670:	6453      	str	r3, [r2, #68]	; 0x44
 8003672:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <HAL_MspInit+0x54>)
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_MspInit+0x54>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	4a0a      	ldr	r2, [pc, #40]	; (80036b0 <HAL_MspInit+0x54>)
 8003688:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800368c:	6413      	str	r3, [r2, #64]	; 0x40
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_MspInit+0x54>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800369a:	2200      	movs	r2, #0
 800369c:	210f      	movs	r1, #15
 800369e:	f06f 0001 	mvn.w	r0, #1
 80036a2:	f001 f89c 	bl	80047de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40023800 	.word	0x40023800

080036b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a18      	ldr	r2, [pc, #96]	; (8003724 <HAL_TIM_Base_MspInit+0x70>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10e      	bne.n	80036e4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_TIM_Base_MspInit+0x74>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	4a16      	ldr	r2, [pc, #88]	; (8003728 <HAL_TIM_Base_MspInit+0x74>)
 80036d0:	f043 0304 	orr.w	r3, r3, #4
 80036d4:	6413      	str	r3, [r2, #64]	; 0x40
 80036d6:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_TIM_Base_MspInit+0x74>)
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f003 0304 	and.w	r3, r3, #4
 80036de:	60fb      	str	r3, [r7, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80036e2:	e01a      	b.n	800371a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_TIM_Base_MspInit+0x78>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d115      	bne.n	800371a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	4b0d      	ldr	r3, [pc, #52]	; (8003728 <HAL_TIM_Base_MspInit+0x74>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	4a0c      	ldr	r2, [pc, #48]	; (8003728 <HAL_TIM_Base_MspInit+0x74>)
 80036f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fc:	6453      	str	r3, [r2, #68]	; 0x44
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <HAL_TIM_Base_MspInit+0x74>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800370a:	2200      	movs	r2, #0
 800370c:	2105      	movs	r1, #5
 800370e:	2019      	movs	r0, #25
 8003710:	f001 f865 	bl	80047de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003714:	2019      	movs	r0, #25
 8003716:	f001 f87e 	bl	8004816 <HAL_NVIC_EnableIRQ>
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40000800 	.word	0x40000800
 8003728:	40023800 	.word	0x40023800
 800372c:	40014400 	.word	0x40014400

08003730 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	f107 030c 	add.w	r3, r7, #12
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a12      	ldr	r2, [pc, #72]	; (8003798 <HAL_TIM_MspPostInit+0x68>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d11e      	bne.n	8003790 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	4b11      	ldr	r3, [pc, #68]	; (800379c <HAL_TIM_MspPostInit+0x6c>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	4a10      	ldr	r2, [pc, #64]	; (800379c <HAL_TIM_MspPostInit+0x6c>)
 800375c:	f043 0308 	orr.w	r3, r3, #8
 8003760:	6313      	str	r3, [r2, #48]	; 0x30
 8003762:	4b0e      	ldr	r3, [pc, #56]	; (800379c <HAL_TIM_MspPostInit+0x6c>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800376e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003772:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003774:	2302      	movs	r3, #2
 8003776:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800377c:	2300      	movs	r3, #0
 800377e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003780:	2302      	movs	r3, #2
 8003782:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003784:	f107 030c 	add.w	r3, r7, #12
 8003788:	4619      	mov	r1, r3
 800378a:	4805      	ldr	r0, [pc, #20]	; (80037a0 <HAL_TIM_MspPostInit+0x70>)
 800378c:	f001 f8f0 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003790:	bf00      	nop
 8003792:	3720      	adds	r7, #32
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40000800 	.word	0x40000800
 800379c:	40023800 	.word	0x40023800
 80037a0:	40020c00 	.word	0x40020c00

080037a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b094      	sub	sp, #80	; 0x50
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	605a      	str	r2, [r3, #4]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a92      	ldr	r2, [pc, #584]	; (8003a0c <HAL_UART_MspInit+0x268>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d134      	bne.n	8003830 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80037ca:	4b91      	ldr	r3, [pc, #580]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	4a90      	ldr	r2, [pc, #576]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 80037d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037d4:	6413      	str	r3, [r2, #64]	; 0x40
 80037d6:	4b8e      	ldr	r3, [pc, #568]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037de:	63bb      	str	r3, [r7, #56]	; 0x38
 80037e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
 80037e6:	4b8a      	ldr	r3, [pc, #552]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	4a89      	ldr	r2, [pc, #548]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	6313      	str	r3, [r2, #48]	; 0x30
 80037f2:	4b87      	ldr	r3, [pc, #540]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	637b      	str	r3, [r7, #52]	; 0x34
 80037fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037fe:	2303      	movs	r3, #3
 8003800:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003802:	2302      	movs	r3, #2
 8003804:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003806:	2301      	movs	r3, #1
 8003808:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800380a:	2303      	movs	r3, #3
 800380c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800380e:	2308      	movs	r3, #8
 8003810:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003812:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003816:	4619      	mov	r1, r3
 8003818:	487e      	ldr	r0, [pc, #504]	; (8003a14 <HAL_UART_MspInit+0x270>)
 800381a:	f001 f8a9 	bl	8004970 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800381e:	2200      	movs	r2, #0
 8003820:	2105      	movs	r1, #5
 8003822:	2034      	movs	r0, #52	; 0x34
 8003824:	f000 ffdb 	bl	80047de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003828:	2034      	movs	r0, #52	; 0x34
 800382a:	f000 fff4 	bl	8004816 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800382e:	e194      	b.n	8003b5a <HAL_UART_MspInit+0x3b6>
  else if(huart->Instance==UART5)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a78      	ldr	r2, [pc, #480]	; (8003a18 <HAL_UART_MspInit+0x274>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d153      	bne.n	80038e2 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART5_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	633b      	str	r3, [r7, #48]	; 0x30
 800383e:	4b74      	ldr	r3, [pc, #464]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a73      	ldr	r2, [pc, #460]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 8003844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
 800384a:	4b71      	ldr	r3, [pc, #452]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003852:	633b      	str	r3, [r7, #48]	; 0x30
 8003854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800385a:	4b6d      	ldr	r3, [pc, #436]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a6c      	ldr	r2, [pc, #432]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 8003860:	f043 0304 	orr.w	r3, r3, #4
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b6a      	ldr	r3, [pc, #424]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	62bb      	str	r3, [r7, #40]	; 0x28
 8003876:	4b66      	ldr	r3, [pc, #408]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	4a65      	ldr	r2, [pc, #404]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 800387c:	f043 0308 	orr.w	r3, r3, #8
 8003880:	6313      	str	r3, [r2, #48]	; 0x30
 8003882:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	62bb      	str	r3, [r7, #40]	; 0x28
 800388c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800388e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003892:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003894:	2302      	movs	r3, #2
 8003896:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003898:	2301      	movs	r3, #1
 800389a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800389c:	2303      	movs	r3, #3
 800389e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80038a0:	2308      	movs	r3, #8
 80038a2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038a8:	4619      	mov	r1, r3
 80038aa:	485c      	ldr	r0, [pc, #368]	; (8003a1c <HAL_UART_MspInit+0x278>)
 80038ac:	f001 f860 	bl	8004970 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80038b0:	2304      	movs	r3, #4
 80038b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b4:	2302      	movs	r3, #2
 80038b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038b8:	2301      	movs	r3, #1
 80038ba:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038bc:	2303      	movs	r3, #3
 80038be:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80038c0:	2308      	movs	r3, #8
 80038c2:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038c8:	4619      	mov	r1, r3
 80038ca:	4855      	ldr	r0, [pc, #340]	; (8003a20 <HAL_UART_MspInit+0x27c>)
 80038cc:	f001 f850 	bl	8004970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80038d0:	2200      	movs	r2, #0
 80038d2:	2105      	movs	r1, #5
 80038d4:	2035      	movs	r0, #53	; 0x35
 80038d6:	f000 ff82 	bl	80047de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80038da:	2035      	movs	r0, #53	; 0x35
 80038dc:	f000 ff9b 	bl	8004816 <HAL_NVIC_EnableIRQ>
}
 80038e0:	e13b      	b.n	8003b5a <HAL_UART_MspInit+0x3b6>
  else if(huart->Instance==USART1)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4f      	ldr	r2, [pc, #316]	; (8003a24 <HAL_UART_MspInit+0x280>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d144      	bne.n	8003976 <HAL_UART_MspInit+0x1d2>
    __HAL_RCC_USART1_CLK_ENABLE();
 80038ec:	2300      	movs	r3, #0
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
 80038f0:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	4a46      	ldr	r2, [pc, #280]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 80038f6:	f043 0310 	orr.w	r3, r3, #16
 80038fa:	6453      	str	r3, [r2, #68]	; 0x44
 80038fc:	4b44      	ldr	r3, [pc, #272]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 80038fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003900:	f003 0310 	and.w	r3, r3, #16
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003908:	2300      	movs	r3, #0
 800390a:	623b      	str	r3, [r7, #32]
 800390c:	4b40      	ldr	r3, [pc, #256]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	4a3f      	ldr	r2, [pc, #252]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 8003912:	f043 0302 	orr.w	r3, r3, #2
 8003916:	6313      	str	r3, [r2, #48]	; 0x30
 8003918:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	623b      	str	r3, [r7, #32]
 8003922:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003924:	2340      	movs	r3, #64	; 0x40
 8003926:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003928:	2302      	movs	r3, #2
 800392a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003930:	2303      	movs	r3, #3
 8003932:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003934:	2307      	movs	r3, #7
 8003936:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003938:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800393c:	4619      	mov	r1, r3
 800393e:	483a      	ldr	r0, [pc, #232]	; (8003a28 <HAL_UART_MspInit+0x284>)
 8003940:	f001 f816 	bl	8004970 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003948:	2302      	movs	r3, #2
 800394a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800394c:	2301      	movs	r3, #1
 800394e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003950:	2303      	movs	r3, #3
 8003952:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003954:	2307      	movs	r3, #7
 8003956:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003958:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800395c:	4619      	mov	r1, r3
 800395e:	4832      	ldr	r0, [pc, #200]	; (8003a28 <HAL_UART_MspInit+0x284>)
 8003960:	f001 f806 	bl	8004970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003964:	2200      	movs	r2, #0
 8003966:	2105      	movs	r1, #5
 8003968:	2025      	movs	r0, #37	; 0x25
 800396a:	f000 ff38 	bl	80047de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800396e:	2025      	movs	r0, #37	; 0x25
 8003970:	f000 ff51 	bl	8004816 <HAL_NVIC_EnableIRQ>
}
 8003974:	e0f1      	b.n	8003b5a <HAL_UART_MspInit+0x3b6>
  else if(huart->Instance==USART2)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a2c      	ldr	r2, [pc, #176]	; (8003a2c <HAL_UART_MspInit+0x288>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d157      	bne.n	8003a30 <HAL_UART_MspInit+0x28c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003980:	2300      	movs	r3, #0
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	4a21      	ldr	r2, [pc, #132]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 800398a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398e:	6413      	str	r3, [r2, #64]	; 0x40
 8003990:	4b1f      	ldr	r3, [pc, #124]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800399c:	2300      	movs	r3, #0
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	4b1b      	ldr	r3, [pc, #108]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	4a1a      	ldr	r2, [pc, #104]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6313      	str	r3, [r2, #48]	; 0x30
 80039ac:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <HAL_UART_MspInit+0x26c>)
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039b8:	2304      	movs	r3, #4
 80039ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039bc:	2302      	movs	r3, #2
 80039be:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039c4:	2303      	movs	r3, #3
 80039c6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039c8:	2307      	movs	r3, #7
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039d0:	4619      	mov	r1, r3
 80039d2:	4810      	ldr	r0, [pc, #64]	; (8003a14 <HAL_UART_MspInit+0x270>)
 80039d4:	f000 ffcc 	bl	8004970 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80039d8:	2308      	movs	r3, #8
 80039da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039dc:	2302      	movs	r3, #2
 80039de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039e0:	2301      	movs	r3, #1
 80039e2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e4:	2303      	movs	r3, #3
 80039e6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039e8:	2307      	movs	r3, #7
 80039ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80039f0:	4619      	mov	r1, r3
 80039f2:	4808      	ldr	r0, [pc, #32]	; (8003a14 <HAL_UART_MspInit+0x270>)
 80039f4:	f000 ffbc 	bl	8004970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80039f8:	2200      	movs	r2, #0
 80039fa:	2105      	movs	r1, #5
 80039fc:	2026      	movs	r0, #38	; 0x26
 80039fe:	f000 feee 	bl	80047de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a02:	2026      	movs	r0, #38	; 0x26
 8003a04:	f000 ff07 	bl	8004816 <HAL_NVIC_EnableIRQ>
}
 8003a08:	e0a7      	b.n	8003b5a <HAL_UART_MspInit+0x3b6>
 8003a0a:	bf00      	nop
 8003a0c:	40004c00 	.word	0x40004c00
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40020000 	.word	0x40020000
 8003a18:	40005000 	.word	0x40005000
 8003a1c:	40020800 	.word	0x40020800
 8003a20:	40020c00 	.word	0x40020c00
 8003a24:	40011000 	.word	0x40011000
 8003a28:	40020400 	.word	0x40020400
 8003a2c:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a4b      	ldr	r2, [pc, #300]	; (8003b64 <HAL_UART_MspInit+0x3c0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d146      	bne.n	8003ac8 <HAL_UART_MspInit+0x324>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	4b4a      	ldr	r3, [pc, #296]	; (8003b68 <HAL_UART_MspInit+0x3c4>)
 8003a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a42:	4a49      	ldr	r2, [pc, #292]	; (8003b68 <HAL_UART_MspInit+0x3c4>)
 8003a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a48:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4a:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_UART_MspInit+0x3c4>)
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	4b43      	ldr	r3, [pc, #268]	; (8003b68 <HAL_UART_MspInit+0x3c4>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4a42      	ldr	r2, [pc, #264]	; (8003b68 <HAL_UART_MspInit+0x3c4>)
 8003a60:	f043 0302 	orr.w	r3, r3, #2
 8003a64:	6313      	str	r3, [r2, #48]	; 0x30
 8003a66:	4b40      	ldr	r3, [pc, #256]	; (8003b68 <HAL_UART_MspInit+0x3c4>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	613b      	str	r3, [r7, #16]
 8003a70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a80:	2303      	movs	r3, #3
 8003a82:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a84:	2307      	movs	r3, #7
 8003a86:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a88:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4837      	ldr	r0, [pc, #220]	; (8003b6c <HAL_UART_MspInit+0x3c8>)
 8003a90:	f000 ff6e 	bl	8004970 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003a94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a98:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003aa6:	2307      	movs	r3, #7
 8003aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aaa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003aae:	4619      	mov	r1, r3
 8003ab0:	482e      	ldr	r0, [pc, #184]	; (8003b6c <HAL_UART_MspInit+0x3c8>)
 8003ab2:	f000 ff5d 	bl	8004970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2105      	movs	r1, #5
 8003aba:	2027      	movs	r0, #39	; 0x27
 8003abc:	f000 fe8f 	bl	80047de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003ac0:	2027      	movs	r0, #39	; 0x27
 8003ac2:	f000 fea8 	bl	8004816 <HAL_NVIC_EnableIRQ>
}
 8003ac6:	e048      	b.n	8003b5a <HAL_UART_MspInit+0x3b6>
  else if(huart->Instance==USART6)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a28      	ldr	r2, [pc, #160]	; (8003b70 <HAL_UART_MspInit+0x3cc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d143      	bne.n	8003b5a <HAL_UART_MspInit+0x3b6>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	4b24      	ldr	r3, [pc, #144]	; (8003b68 <HAL_UART_MspInit+0x3c4>)
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	4a23      	ldr	r2, [pc, #140]	; (8003b68 <HAL_UART_MspInit+0x3c4>)
 8003adc:	f043 0320 	orr.w	r3, r3, #32
 8003ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ae2:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <HAL_UART_MspInit+0x3c4>)
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <HAL_UART_MspInit+0x3c4>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af6:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <HAL_UART_MspInit+0x3c4>)
 8003af8:	f043 0304 	orr.w	r3, r3, #4
 8003afc:	6313      	str	r3, [r2, #48]	; 0x30
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <HAL_UART_MspInit+0x3c4>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003b0a:	2340      	movs	r3, #64	; 0x40
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b12:	2300      	movs	r3, #0
 8003b14:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b16:	2303      	movs	r3, #3
 8003b18:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b1e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b22:	4619      	mov	r1, r3
 8003b24:	4813      	ldr	r0, [pc, #76]	; (8003b74 <HAL_UART_MspInit+0x3d0>)
 8003b26:	f000 ff23 	bl	8004970 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2e:	2302      	movs	r3, #2
 8003b30:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b32:	2301      	movs	r3, #1
 8003b34:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b36:	2303      	movs	r3, #3
 8003b38:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003b3a:	2308      	movs	r3, #8
 8003b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b3e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b42:	4619      	mov	r1, r3
 8003b44:	480b      	ldr	r0, [pc, #44]	; (8003b74 <HAL_UART_MspInit+0x3d0>)
 8003b46:	f000 ff13 	bl	8004970 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2105      	movs	r1, #5
 8003b4e:	2047      	movs	r0, #71	; 0x47
 8003b50:	f000 fe45 	bl	80047de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003b54:	2047      	movs	r0, #71	; 0x47
 8003b56:	f000 fe5e 	bl	8004816 <HAL_NVIC_EnableIRQ>
}
 8003b5a:	bf00      	nop
 8003b5c:	3750      	adds	r7, #80	; 0x50
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	40004800 	.word	0x40004800
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40020400 	.word	0x40020400
 8003b70:	40011400 	.word	0x40011400
 8003b74:	40020800 	.word	0x40020800

08003b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b7c:	e7fe      	b.n	8003b7c <NMI_Handler+0x4>

08003b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b7e:	b480      	push	{r7}
 8003b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b82:	e7fe      	b.n	8003b82 <HardFault_Handler+0x4>

08003b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b88:	e7fe      	b.n	8003b88 <MemManage_Handler+0x4>

08003b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b8a:	b480      	push	{r7}
 8003b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b8e:	e7fe      	b.n	8003b8e <BusFault_Handler+0x4>

08003b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b94:	e7fe      	b.n	8003b94 <UsageFault_Handler+0x4>

08003b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b96:	b480      	push	{r7}
 8003b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b9a:	bf00      	nop
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ba8:	f000 fd1e 	bl	80045e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003bac:	f004 fb14 	bl	80081d8 <xTaskGetSchedulerState>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d001      	beq.n	8003bba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003bb6:	f004 fd4f 	bl	8008658 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003bc6:	f001 fef7 	bl	80059b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20004480 	.word	0x20004480

08003bd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <USART1_IRQHandler+0x10>)
 8003bda:	f002 fe57 	bl	800688c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20004670 	.word	0x20004670

08003be8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <USART2_IRQHandler+0x10>)
 8003bee:	f002 fe4d 	bl	800688c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	20004ac8 	.word	0x20004ac8

08003bfc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003c00:	4802      	ldr	r0, [pc, #8]	; (8003c0c <USART3_IRQHandler+0x10>)
 8003c02:	f002 fe43 	bl	800688c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200043c0 	.word	0x200043c0

08003c10 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <UART4_IRQHandler+0x10>)
 8003c16:	f002 fe39 	bl	800688c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20004a3c 	.word	0x20004a3c

08003c24 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003c28:	4802      	ldr	r0, [pc, #8]	; (8003c34 <UART5_IRQHandler+0x10>)
 8003c2a:	f002 fe2f 	bl	800688c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20004590 	.word	0x20004590

08003c38 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003c3c:	4802      	ldr	r0, [pc, #8]	; (8003c48 <USART6_IRQHandler+0x10>)
 8003c3e:	f002 fe25 	bl	800688c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	200049f4 	.word	0x200049f4

08003c4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
	return 1;
 8003c50:	2301      	movs	r3, #1
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <_kill>:

int _kill(int pid, int sig)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c66:	f004 ff31 	bl	8008acc <__errno>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2216      	movs	r2, #22
 8003c6e:	601a      	str	r2, [r3, #0]
	return -1;
 8003c70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <_exit>:

void _exit (int status)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c84:	f04f 31ff 	mov.w	r1, #4294967295
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff ffe7 	bl	8003c5c <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c8e:	e7fe      	b.n	8003c8e <_exit+0x12>

08003c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	e00a      	b.n	8003cb8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ca2:	f3af 8000 	nop.w
 8003ca6:	4601      	mov	r1, r0
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	60ba      	str	r2, [r7, #8]
 8003cae:	b2ca      	uxtb	r2, r1
 8003cb0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	617b      	str	r3, [r7, #20]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	dbf0      	blt.n	8003ca2 <_read+0x12>
	}

return len;
 8003cc0:	687b      	ldr	r3, [r7, #4]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b086      	sub	sp, #24
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e009      	b.n	8003cf0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	60ba      	str	r2, [r7, #8]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	3301      	adds	r3, #1
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	dbf1      	blt.n	8003cdc <_write+0x12>
	}
	return len;
 8003cf8:	687b      	ldr	r3, [r7, #4]
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <_close>:

int _close(int file)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
	return -1;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d2a:	605a      	str	r2, [r3, #4]
	return 0;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <_isatty>:

int _isatty(int file)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
	return 1;
 8003d42:	2301      	movs	r3, #1
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
	return 0;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d74:	4a14      	ldr	r2, [pc, #80]	; (8003dc8 <_sbrk+0x5c>)
 8003d76:	4b15      	ldr	r3, [pc, #84]	; (8003dcc <_sbrk+0x60>)
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d80:	4b13      	ldr	r3, [pc, #76]	; (8003dd0 <_sbrk+0x64>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d102      	bne.n	8003d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <_sbrk+0x64>)
 8003d8a:	4a12      	ldr	r2, [pc, #72]	; (8003dd4 <_sbrk+0x68>)
 8003d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <_sbrk+0x64>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4413      	add	r3, r2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d207      	bcs.n	8003dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d9c:	f004 fe96 	bl	8008acc <__errno>
 8003da0:	4603      	mov	r3, r0
 8003da2:	220c      	movs	r2, #12
 8003da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
 8003daa:	e009      	b.n	8003dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <_sbrk+0x64>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003db2:	4b07      	ldr	r3, [pc, #28]	; (8003dd0 <_sbrk+0x64>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	4a05      	ldr	r2, [pc, #20]	; (8003dd0 <_sbrk+0x64>)
 8003dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20020000 	.word	0x20020000
 8003dcc:	00000400 	.word	0x00000400
 8003dd0:	20000570 	.word	0x20000570
 8003dd4:	20004d80 	.word	0x20004d80

08003dd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ddc:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <SystemInit+0x20>)
 8003dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de2:	4a05      	ldr	r2, [pc, #20]	; (8003df8 <SystemInit+0x20>)
 8003de4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003de8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <update_crc8>:
/* Includes ------------------------------------------------------------------*/
#include "telemetry_rtr.h"
/* Private functions ---------------------------------------------------------*/

uint8_t update_crc8(uint8_t crc, uint8_t crc_seed){
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	460a      	mov	r2, r1
 8003e06:	71fb      	strb	r3, [r7, #7]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	71bb      	strb	r3, [r7, #6]
	uint8_t crc_u, i;
	crc_u = crc;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	73fb      	strb	r3, [r7, #15]
	crc_u ^= crc_seed;
 8003e10:	7bfa      	ldrb	r2, [r7, #15]
 8003e12:	79bb      	ldrb	r3, [r7, #6]
 8003e14:	4053      	eors	r3, r2
 8003e16:	73fb      	strb	r3, [r7, #15]
	for ( i=0; i<8; i++) crc_u = ( crc_u & 0x80 ) ? ( crc_u << 1 ) ^ 0x07 : ( crc_u << 1 );
 8003e18:	2300      	movs	r3, #0
 8003e1a:	73bb      	strb	r3, [r7, #14]
 8003e1c:	e012      	b.n	8003e44 <update_crc8+0x48>
 8003e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	da07      	bge.n	8003e36 <update_crc8+0x3a>
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	b25b      	sxtb	r3, r3
 8003e2c:	f083 0307 	eor.w	r3, r3, #7
 8003e30:	b25b      	sxtb	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	e002      	b.n	8003e3c <update_crc8+0x40>
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	73fb      	strb	r3, [r7, #15]
 8003e3e:	7bbb      	ldrb	r3, [r7, #14]
 8003e40:	3301      	adds	r3, #1
 8003e42:	73bb      	strb	r3, [r7, #14]
 8003e44:	7bbb      	ldrb	r3, [r7, #14]
 8003e46:	2b07      	cmp	r3, #7
 8003e48:	d9e9      	bls.n	8003e1e <update_crc8+0x22>
	return (crc_u);
 8003e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <get_crc8>:
uint8_t get_crc8(uint8_t *Buf, uint8_t BufLen){
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, i;
 8003e64:	2300      	movs	r3, #0
 8003e66:	73fb      	strb	r3, [r7, #15]
	for( i=0; i<BufLen; i++) crc = update_crc8(Buf[i], crc);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73bb      	strb	r3, [r7, #14]
 8003e6c:	e00d      	b.n	8003e8a <get_crc8+0x32>
 8003e6e:	7bbb      	ldrb	r3, [r7, #14]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	7bfa      	ldrb	r2, [r7, #15]
 8003e78:	4611      	mov	r1, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff ffbe 	bl	8003dfc <update_crc8>
 8003e80:	4603      	mov	r3, r0
 8003e82:	73fb      	strb	r3, [r7, #15]
 8003e84:	7bbb      	ldrb	r3, [r7, #14]
 8003e86:	3301      	adds	r3, #1
 8003e88:	73bb      	strb	r3, [r7, #14]
 8003e8a:	7bba      	ldrb	r2, [r7, #14]
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d3ed      	bcc.n	8003e6e <get_crc8+0x16>
	return (crc);
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <telemetryParse>:

ParseStatusType telemetryParse(uint8_t recByte, TelemetryType *telemetry, ReceiveStatusTyte *recStatus) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	73fb      	strb	r3, [r7, #15]
	uint8_t arrayKissESC[10];
	if ((recByte == 0x9b)) {
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	2b9b      	cmp	r3, #155	; 0x9b
 8003eae:	d105      	bne.n	8003ebc <telemetryParse+0x20>
		*recStatus = BALE_HEAD;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	701a      	strb	r2, [r3, #0]
		telemetry->check_sum = 0;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	84da      	strh	r2, [r3, #38]	; 0x26
	}
	switch (*recStatus) {
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	2b18      	cmp	r3, #24
 8003ec2:	f200 82ee 	bhi.w	80044a2 <telemetryParse+0x606>
 8003ec6:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <telemetryParse+0x30>)
 8003ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ecc:	08003f31 	.word	0x08003f31
 8003ed0:	08003f41 	.word	0x08003f41
 8003ed4:	08003f6d 	.word	0x08003f6d
 8003ed8:	08003fa1 	.word	0x08003fa1
 8003edc:	08003fd5 	.word	0x08003fd5
 8003ee0:	08003ffb 	.word	0x08003ffb
 8003ee4:	08004027 	.word	0x08004027
 8003ee8:	08004057 	.word	0x08004057
 8003eec:	08004089 	.word	0x08004089
 8003ef0:	080040db 	.word	0x080040db
 8003ef4:	0800410d 	.word	0x0800410d
 8003ef8:	0800415f 	.word	0x0800415f
 8003efc:	08004197 	.word	0x08004197
 8003f00:	080041e7 	.word	0x080041e7
 8003f04:	08004225 	.word	0x08004225
 8003f08:	0800427d 	.word	0x0800427d
 8003f0c:	080042bb 	.word	0x080042bb
 8003f10:	0800430f 	.word	0x0800430f
 8003f14:	08004359 	.word	0x08004359
 8003f18:	080043ad 	.word	0x080043ad
 8003f1c:	080043e1 	.word	0x080043e1
 8003f20:	08004409 	.word	0x08004409
 8003f24:	08004435 	.word	0x08004435
 8003f28:	08004465 	.word	0x08004465
 8003f2c:	0800447d 	.word	0x0800447d
		case PARSE_IDLE:
			telemetry->check_sum = 0;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2200      	movs	r2, #0
 8003f34:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2202      	movs	r2, #2
 8003f3a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			break;
 8003f3e:	e2b0      	b.n	80044a2 <telemetryParse+0x606>
		case BALE_HEAD:
			telemetry->check_sum = 0;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2200      	movs	r2, #0
 8003f44:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->BaleHead = recByte;
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	7bfa      	ldrb	r2, [r7, #15]
 8003f4a:	701a      	strb	r2, [r3, #0]
			telemetry->check_sum += recByte;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8003f50:	7bfb      	ldrb	r3, [r7, #15]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = DATA_LENGTH;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	701a      	strb	r2, [r3, #0]
			break;
 8003f6a:	e29a      	b.n	80044a2 <telemetryParse+0x606>
		case DATA_LENGTH:
			if (recByte != 0x16) {
 8003f6c:	7bfb      	ldrb	r3, [r7, #15]
 8003f6e:	2b16      	cmp	r3, #22
 8003f70:	d003      	beq.n	8003f7a <telemetryParse+0xde>
				*recStatus = PARSE_IDLE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	701a      	strb	r2, [r3, #0]
				telemetry->DataLength = recByte;
				telemetry->check_sum += recByte;
				telemetry->parseStatus = PARSE_WIP;
				*recStatus = SOFTWARE_VERSION;
			}
			break;
 8003f78:	e293      	b.n	80044a2 <telemetryParse+0x606>
				telemetry->DataLength = recByte;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	705a      	strb	r2, [r3, #1]
				telemetry->check_sum += recByte;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	84da      	strh	r2, [r3, #38]	; 0x26
				telemetry->parseStatus = PARSE_WIP;
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				*recStatus = SOFTWARE_VERSION;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	701a      	strb	r2, [r3, #0]
			break;
 8003f9e:	e280      	b.n	80044a2 <telemetryParse+0x606>
		case SOFTWARE_VERSION:
			if (recByte != 0x01) {
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d003      	beq.n	8003fae <telemetryParse+0x112>
				*recStatus = PARSE_IDLE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
				telemetry->SoftwareVersion = recByte;
				telemetry->check_sum += recByte;
				telemetry->parseStatus = PARSE_WIP;
				*recStatus = ACTUAL_DATA;
			}
			break;
 8003fac:	e279      	b.n	80044a2 <telemetryParse+0x606>
				telemetry->SoftwareVersion = recByte;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	7bfa      	ldrb	r2, [r7, #15]
 8003fb2:	709a      	strb	r2, [r3, #2]
				telemetry->check_sum += recByte;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	84da      	strh	r2, [r3, #38]	; 0x26
				telemetry->parseStatus = PARSE_WIP;
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				*recStatus = ACTUAL_DATA;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2204      	movs	r2, #4
 8003fd0:	701a      	strb	r2, [r3, #0]
			break;
 8003fd2:	e266      	b.n	80044a2 <telemetryParse+0x606>
		case ACTUAL_DATA:
			telemetry->ActualData = recByte;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	7bfa      	ldrb	r2, [r7, #15]
 8003fd8:	70da      	strb	r2, [r3, #3]
			telemetry->check_sum  += recByte;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8003fde:	7bfb      	ldrb	r3, [r7, #15]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2202      	movs	r2, #2
 8003fee:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = BALE_NO_WIP;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2205      	movs	r2, #5
 8003ff6:	701a      	strb	r2, [r3, #0]
			break;
 8003ff8:	e253      	b.n	80044a2 <telemetryParse+0x606>
		case BALE_NO_WIP:
			telemetry->BaleNo = ((recByte | 0x0000) << 8);
 8003ffa:	7bfb      	ldrb	r3, [r7, #15]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	b29a      	uxth	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	809a      	strh	r2, [r3, #4]
			telemetry->check_sum  += recByte;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800400a:	7bfb      	ldrb	r3, [r7, #15]
 800400c:	b29b      	uxth	r3, r3
 800400e:	4413      	add	r3, r2
 8004010:	b29a      	uxth	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	2202      	movs	r2, #2
 800401a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = BALE_NO_COMPLETE;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2206      	movs	r2, #6
 8004022:	701a      	strb	r2, [r3, #0]
			break;
 8004024:	e23d      	b.n	80044a2 <telemetryParse+0x606>
		case BALE_NO_COMPLETE:
			telemetry->BaleNo = ((telemetry->BaleNo) | recByte);
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	889a      	ldrh	r2, [r3, #4]
 800402a:	7bfb      	ldrb	r3, [r7, #15]
 800402c:	b29b      	uxth	r3, r3
 800402e:	4313      	orrs	r3, r2
 8004030:	b29a      	uxth	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	809a      	strh	r2, [r3, #4]
			telemetry->check_sum  += recByte;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800403a:	7bfb      	ldrb	r3, [r7, #15]
 800403c:	b29b      	uxth	r3, r3
 800403e:	4413      	add	r3, r2
 8004040:	b29a      	uxth	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2202      	movs	r2, #2
 800404a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = RX_THROTTLE_WIP;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2207      	movs	r2, #7
 8004052:	701a      	strb	r2, [r3, #0]
			break;
 8004054:	e225      	b.n	80044a2 <telemetryParse+0x606>
		case RX_THROTTLE_WIP:
			telemetry->RxThrottle = (float)((recByte | 0x0000) << 8);
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	021b      	lsls	r3, r3, #8
 800405a:	ee07 3a90 	vmov	s15, r3
 800405e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	edc3 7a02 	vstr	s15, [r3, #8]
			telemetry->check_sum  += recByte;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	b29b      	uxth	r3, r3
 8004070:	4413      	add	r3, r2
 8004072:	b29a      	uxth	r2, r3
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = RX_THROTTLE_COMPLETE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2208      	movs	r2, #8
 8004084:	701a      	strb	r2, [r3, #0]
			break;
 8004086:	e20c      	b.n	80044a2 <telemetryParse+0x606>
		case RX_THROTTLE_COMPLETE:
			telemetry->RxThrottle = (float)(((uint16_t)(telemetry->RxThrottle) | recByte)*100/1024.0f);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	edd3 7a02 	vldr	s15, [r3, #8]
 800408e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004092:	ee17 3a90 	vmov	r3, s15
 8004096:	b29b      	uxth	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	7bfb      	ldrb	r3, [r7, #15]
 800409c:	4313      	orrs	r3, r2
 800409e:	2264      	movs	r2, #100	; 0x64
 80040a0:	fb02 f303 	mul.w	r3, r2, r3
 80040a4:	ee07 3a90 	vmov	s15, r3
 80040a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040ac:	eddf 6aa7 	vldr	s13, [pc, #668]	; 800434c <telemetryParse+0x4b0>
 80040b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	edc3 7a02 	vstr	s15, [r3, #8]
			telemetry->check_sum  += recByte;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80040be:	7bfb      	ldrb	r3, [r7, #15]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	4413      	add	r3, r2
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2202      	movs	r2, #2
 80040ce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = ACTUAL_OUTPUT_WIP;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2209      	movs	r2, #9
 80040d6:	701a      	strb	r2, [r3, #0]
			break;
 80040d8:	e1e3      	b.n	80044a2 <telemetryParse+0x606>
		case ACTUAL_OUTPUT_WIP:
			telemetry->ActualOutput = (float)((recByte | 0x0000) << 8);
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	ee07 3a90 	vmov	s15, r3
 80040e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	edc3 7a03 	vstr	s15, [r3, #12]
			telemetry->check_sum  += recByte;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	4413      	add	r3, r2
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = ACTUAL_OUTPUT_COMPLETE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	220a      	movs	r2, #10
 8004108:	701a      	strb	r2, [r3, #0]
			break;
 800410a:	e1ca      	b.n	80044a2 <telemetryParse+0x606>
		case ACTUAL_OUTPUT_COMPLETE:
			telemetry->ActualOutput = (float)(((uint16_t)(telemetry->ActualOutput) | recByte)*100/1024.0f);
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004116:	ee17 3a90 	vmov	r3, s15
 800411a:	b29b      	uxth	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	7bfb      	ldrb	r3, [r7, #15]
 8004120:	4313      	orrs	r3, r2
 8004122:	2264      	movs	r2, #100	; 0x64
 8004124:	fb02 f303 	mul.w	r3, r2, r3
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004130:	eddf 6a86 	vldr	s13, [pc, #536]	; 800434c <telemetryParse+0x4b0>
 8004134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	edc3 7a03 	vstr	s15, [r3, #12]
			telemetry->check_sum += recByte;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	b29b      	uxth	r3, r3
 8004146:	4413      	add	r3, r2
 8004148:	b29a      	uxth	r2, r3
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = ELECTRIC_RPM_WIP;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	220b      	movs	r2, #11
 800415a:	701a      	strb	r2, [r3, #0]
			break;
 800415c:	e1a1      	b.n	80044a2 <telemetryParse+0x606>
		case ELECTRIC_RPM_WIP:
			telemetry->rpm = ((recByte | 0x0000) << 8);
 800415e:	7bfb      	ldrb	r3, [r7, #15]
 8004160:	b29b      	uxth	r3, r3
 8004162:	021b      	lsls	r3, r3, #8
 8004164:	b29a      	uxth	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	821a      	strh	r2, [r3, #16]
			arrayKissESC[7] = recByte;
 800416a:	7bfb      	ldrb	r3, [r7, #15]
 800416c:	76fb      	strb	r3, [r7, #27]
			telemetry->bufKissESC[7] = recByte;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	7bfa      	ldrb	r2, [r7, #15]
 8004172:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			telemetry->check_sum += recByte;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800417a:	7bfb      	ldrb	r3, [r7, #15]
 800417c:	b29b      	uxth	r3, r3
 800417e:	4413      	add	r3, r2
 8004180:	b29a      	uxth	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2202      	movs	r2, #2
 800418a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = ELECTRIC_RPM_COMPLETE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	220c      	movs	r2, #12
 8004192:	701a      	strb	r2, [r3, #0]
			break;
 8004194:	e185      	b.n	80044a2 <telemetryParse+0x606>
		case ELECTRIC_RPM_COMPLETE:
			telemetry->rpm = ((telemetry->rpm) | recByte)*10/21;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	8a1b      	ldrh	r3, [r3, #16]
 800419a:	461a      	mov	r2, r3
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	431a      	orrs	r2, r3
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	4a69      	ldr	r2, [pc, #420]	; (8004350 <telemetryParse+0x4b4>)
 80041aa:	fb82 1203 	smull	r1, r2, r2, r3
 80041ae:	1092      	asrs	r2, r2, #2
 80041b0:	17db      	asrs	r3, r3, #31
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	821a      	strh	r2, [r3, #16]
			arrayKissESC[8] = recByte;
 80041ba:	7bfb      	ldrb	r3, [r7, #15]
 80041bc:	773b      	strb	r3, [r7, #28]
			telemetry->bufKissESC[8] = recByte;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	7bfa      	ldrb	r2, [r7, #15]
 80041c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			telemetry->check_sum += recByte;
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	4413      	add	r3, r2
 80041d0:	b29a      	uxth	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = BUSBAR_VOLTAGE_WIP;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	220d      	movs	r2, #13
 80041e2:	701a      	strb	r2, [r3, #0]
			break;
 80041e4:	e15d      	b.n	80044a2 <telemetryParse+0x606>
		case BUSBAR_VOLTAGE_WIP:
			telemetry->voltage = (float)((recByte | 0x0000) << 8);
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	ee07 3a90 	vmov	s15, r3
 80041ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	edc3 7a05 	vstr	s15, [r3, #20]
			arrayKissESC[1] = recByte;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	757b      	strb	r3, [r7, #21]
			telemetry->bufKissESC[1] = recByte;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	7bfa      	ldrb	r2, [r7, #15]
 8004200:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			telemetry->check_sum += recByte;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	b29b      	uxth	r3, r3
 800420c:	4413      	add	r3, r2
 800420e:	b29a      	uxth	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = BUSBAR_VOLTAGE_COMPLETE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	220e      	movs	r2, #14
 8004220:	701a      	strb	r2, [r3, #0]
			break;
 8004222:	e13e      	b.n	80044a2 <telemetryParse+0x606>
		case BUSBAR_VOLTAGE_COMPLETE:
			telemetry->voltage = (float)(((uint16_t)(telemetry->voltage) | recByte)/10.0f);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	edd3 7a05 	vldr	s15, [r3, #20]
 800422a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800422e:	ee17 3a90 	vmov	r3, s15
 8004232:	b29b      	uxth	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	4313      	orrs	r3, r2
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004242:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004246:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	edc3 7a05 	vstr	s15, [r3, #20]
			arrayKissESC[2] = recByte;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	75bb      	strb	r3, [r7, #22]
			telemetry->bufKissESC[2] = recByte;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	7bfa      	ldrb	r2, [r7, #15]
 8004258:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			telemetry->check_sum += recByte;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	b29b      	uxth	r3, r3
 8004264:	4413      	add	r3, r2
 8004266:	b29a      	uxth	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2202      	movs	r2, #2
 8004270:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = BUSBAR_CURRENT_WIP;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	220f      	movs	r2, #15
 8004278:	701a      	strb	r2, [r3, #0]
			break;
 800427a:	e112      	b.n	80044a2 <telemetryParse+0x606>
		case BUSBAR_CURRENT_WIP:
			telemetry->current = (float)((recByte | 0x0000) << 8);
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	ee07 3a90 	vmov	s15, r3
 8004284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	edc3 7a06 	vstr	s15, [r3, #24]
			arrayKissESC[3] = recByte;
 800428e:	7bfb      	ldrb	r3, [r7, #15]
 8004290:	75fb      	strb	r3, [r7, #23]
			telemetry->bufKissESC[3] = recByte;
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			telemetry->check_sum += recByte;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800429e:	7bfb      	ldrb	r3, [r7, #15]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	4413      	add	r3, r2
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	2202      	movs	r2, #2
 80042ae:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = BUSBAR_CURRENT_COMPLETE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2210      	movs	r2, #16
 80042b6:	701a      	strb	r2, [r3, #0]
			break;
 80042b8:	e0f3      	b.n	80044a2 <telemetryParse+0x606>
		case BUSBAR_CURRENT_COMPLETE:
			telemetry->current = (float)(((int)(telemetry->current) | recByte)/64.0f);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	edd3 7a06 	vldr	s15, [r3, #24]
 80042c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042c4:	ee17 2a90 	vmov	r2, s15
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	ee07 3a90 	vmov	s15, r3
 80042d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042d4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004354 <telemetryParse+0x4b8>
 80042d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	edc3 7a06 	vstr	s15, [r3, #24]
			arrayKissESC[4] = recByte;
 80042e2:	7bfb      	ldrb	r3, [r7, #15]
 80042e4:	763b      	strb	r3, [r7, #24]
			telemetry->bufKissESC[4] = recByte;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	7bfa      	ldrb	r2, [r7, #15]
 80042ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			telemetry->check_sum += recByte;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	4413      	add	r3, r2
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = PHASE_WIRE_WIP;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2211      	movs	r2, #17
 800430a:	701a      	strb	r2, [r3, #0]
			break;
 800430c:	e0c9      	b.n	80044a2 <telemetryParse+0x606>
		case PHASE_WIRE_WIP:
			telemetry->phase = (float)((recByte | 0x0000) << 8);
 800430e:	7bfb      	ldrb	r3, [r7, #15]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	edc3 7a07 	vstr	s15, [r3, #28]
			arrayKissESC[5] = recByte;
 8004320:	7bfb      	ldrb	r3, [r7, #15]
 8004322:	767b      	strb	r3, [r7, #25]
			telemetry->bufKissESC[5] = recByte;
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			telemetry->check_sum += recByte;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	b29b      	uxth	r3, r3
 8004334:	4413      	add	r3, r2
 8004336:	b29a      	uxth	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = PHASE_WIRE_COMPLETE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2212      	movs	r2, #18
 8004348:	701a      	strb	r2, [r3, #0]
			break;
 800434a:	e0aa      	b.n	80044a2 <telemetryParse+0x606>
 800434c:	44800000 	.word	0x44800000
 8004350:	30c30c31 	.word	0x30c30c31
 8004354:	42800000 	.word	0x42800000
		case PHASE_WIRE_COMPLETE:
			telemetry->phase = (float)(((int)(telemetry->phase) | recByte)/64.0f);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	edd3 7a07 	vldr	s15, [r3, #28]
 800435e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004362:	ee17 2a90 	vmov	r2, s15
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	4313      	orrs	r3, r2
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004372:	ed5f 6a08 	vldr	s13, [pc, #-32]	; 8004354 <telemetryParse+0x4b8>
 8004376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	edc3 7a07 	vstr	s15, [r3, #28]
			arrayKissESC[6] = recByte;
 8004380:	7bfb      	ldrb	r3, [r7, #15]
 8004382:	76bb      	strb	r3, [r7, #26]
			telemetry->bufKissESC[6] = recByte;
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	7bfa      	ldrb	r2, [r7, #15]
 8004388:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			telemetry->check_sum += recByte;
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	b29b      	uxth	r3, r3
 8004394:	4413      	add	r3, r2
 8004396:	b29a      	uxth	r2, r3
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = MOSFET_TEMP;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2213      	movs	r2, #19
 80043a8:	701a      	strb	r2, [r3, #0]
			break;
 80043aa:	e07a      	b.n	80044a2 <telemetryParse+0x606>
		case MOSFET_TEMP:
			telemetry->mosfet = recByte;
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	7bfa      	ldrb	r2, [r7, #15]
 80043b0:	f883 2020 	strb.w	r2, [r3, #32]
			arrayKissESC[0]=recByte;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	753b      	strb	r3, [r7, #20]
			telemetry->bufKissESC[0] = recByte;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			telemetry->check_sum += recByte;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	b29b      	uxth	r3, r3
 80043c8:	4413      	add	r3, r2
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = CAPACITANCE_TEMP;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2214      	movs	r2, #20
 80043dc:	701a      	strb	r2, [r3, #0]
			break;
 80043de:	e060      	b.n	80044a2 <telemetryParse+0x606>
		case CAPACITANCE_TEMP:
			telemetry->capacitance = recByte;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	7bfa      	ldrb	r2, [r7, #15]
 80043e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			telemetry->check_sum += recByte;
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = STATUS_CODE_WIP;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2215      	movs	r2, #21
 8004404:	701a      	strb	r2, [r3, #0]
			break;
 8004406:	e04c      	b.n	80044a2 <telemetryParse+0x606>
		case STATUS_CODE_WIP:
			telemetry->status = ((recByte | 0x0000) << 8);
 8004408:	7bfb      	ldrb	r3, [r7, #15]
 800440a:	b29b      	uxth	r3, r3
 800440c:	021b      	lsls	r3, r3, #8
 800440e:	b29a      	uxth	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	845a      	strh	r2, [r3, #34]	; 0x22
			telemetry->check_sum += recByte;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	b29b      	uxth	r3, r3
 800441c:	4413      	add	r3, r2
 800441e:	b29a      	uxth	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = STATUS_CODE_COMPLETE;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2216      	movs	r2, #22
 8004430:	701a      	strb	r2, [r3, #0]
			break;
 8004432:	e036      	b.n	80044a2 <telemetryParse+0x606>
		case STATUS_CODE_COMPLETE:
			telemetry->status = ((telemetry->status) | recByte);
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	b29b      	uxth	r3, r3
 800443c:	4313      	orrs	r3, r2
 800443e:	b29a      	uxth	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	845a      	strh	r2, [r3, #34]	; 0x22
			telemetry->check_sum += recByte;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8004448:	7bfb      	ldrb	r3, [r7, #15]
 800444a:	b29b      	uxth	r3, r3
 800444c:	4413      	add	r3, r2
 800444e:	b29a      	uxth	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	84da      	strh	r2, [r3, #38]	; 0x26
			telemetry->parseStatus = PARSE_WIP;
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	2202      	movs	r2, #2
 8004458:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = VERIFY_CODE_WIP;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2217      	movs	r2, #23
 8004460:	701a      	strb	r2, [r3, #0]
			break;
 8004462:	e01e      	b.n	80044a2 <telemetryParse+0x606>
		case VERIFY_CODE_WIP:
			telemetry->verify = recByte;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
 8004466:	b29a      	uxth	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	849a      	strh	r2, [r3, #36]	; 0x24
			telemetry->parseStatus = PARSE_WIP;
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = VERIFY_CODE_COMPLETE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2218      	movs	r2, #24
 8004478:	701a      	strb	r2, [r3, #0]
			break;
 800447a:	e012      	b.n	80044a2 <telemetryParse+0x606>
		case VERIFY_CODE_COMPLETE:
			telemetry->verify = (((telemetry->verify) | ((recByte | 0x0000) << 8)));
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004480:	b21a      	sxth	r2, r3
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	b21b      	sxth	r3, r3
 8004488:	4313      	orrs	r3, r2
 800448a:	b21b      	sxth	r3, r3
 800448c:	b29a      	uxth	r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	849a      	strh	r2, [r3, #36]	; 0x24
			telemetry->parseStatus = PARSE_COMPLETE;
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	2203      	movs	r2, #3
 8004496:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			*recStatus = BALE_HEAD;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	701a      	strb	r2, [r3, #0]
			break;
 80044a0:	bf00      	nop
	}
	if (telemetry->parseStatus == PARSE_COMPLETE){
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d11d      	bne.n	80044e8 <telemetryParse+0x64c>
		if ((telemetry->check_sum) == (telemetry->verify)){
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d111      	bne.n	80044dc <telemetryParse+0x640>
			telemetry->parseStatus = PARSE_OK;
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			arrayKissESC[9] = get_crc8(arrayKissESC, 9);
 80044c0:	f107 0314 	add.w	r3, r7, #20
 80044c4:	2109      	movs	r1, #9
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fcc6 	bl	8003e58 <get_crc8>
 80044cc:	4603      	mov	r3, r0
 80044ce:	777b      	strb	r3, [r7, #29]
			telemetry->bufKissESC[9] = arrayKissESC[9];
 80044d0:	7f7a      	ldrb	r2, [r7, #29]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			return PARSE_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	e005      	b.n	80044e8 <telemetryParse+0x64c>
		} else {
			telemetry->parseStatus = PARSE_ERROR;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			return PARSE_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e7ff      	b.n	80044e8 <telemetryParse+0x64c>
		}
	}
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3720      	adds	r7, #32
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004528 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044f4:	480d      	ldr	r0, [pc, #52]	; (800452c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044f6:	490e      	ldr	r1, [pc, #56]	; (8004530 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044f8:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044fc:	e002      	b.n	8004504 <LoopCopyDataInit>

080044fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004502:	3304      	adds	r3, #4

08004504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004508:	d3f9      	bcc.n	80044fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800450a:	4a0b      	ldr	r2, [pc, #44]	; (8004538 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800450c:	4c0b      	ldr	r4, [pc, #44]	; (800453c <LoopFillZerobss+0x26>)
  movs r3, #0
 800450e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004510:	e001      	b.n	8004516 <LoopFillZerobss>

08004512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004514:	3204      	adds	r2, #4

08004516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004518:	d3fb      	bcc.n	8004512 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800451a:	f7ff fc5d 	bl	8003dd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800451e:	f004 fadb 	bl	8008ad8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004522:	f7fd fe39 	bl	8002198 <main>
  bx  lr    
 8004526:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004528:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800452c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004530:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004534:	0800d9c4 	.word	0x0800d9c4
  ldr r2, =_sbss
 8004538:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800453c:	20004d80 	.word	0x20004d80

08004540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004540:	e7fe      	b.n	8004540 <ADC_IRQHandler>
	...

08004544 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004548:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <HAL_Init+0x40>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <HAL_Init+0x40>)
 800454e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004552:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_Init+0x40>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a0a      	ldr	r2, [pc, #40]	; (8004584 <HAL_Init+0x40>)
 800455a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800455e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004560:	4b08      	ldr	r3, [pc, #32]	; (8004584 <HAL_Init+0x40>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a07      	ldr	r2, [pc, #28]	; (8004584 <HAL_Init+0x40>)
 8004566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800456c:	2003      	movs	r0, #3
 800456e:	f000 f92b 	bl	80047c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004572:	200f      	movs	r0, #15
 8004574:	f000 f808 	bl	8004588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004578:	f7ff f870 	bl	800365c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40023c00 	.word	0x40023c00

08004588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004590:	4b12      	ldr	r3, [pc, #72]	; (80045dc <HAL_InitTick+0x54>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <HAL_InitTick+0x58>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	4619      	mov	r1, r3
 800459a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800459e:	fbb3 f3f1 	udiv	r3, r3, r1
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f943 	bl	8004832 <HAL_SYSTICK_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e00e      	b.n	80045d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b0f      	cmp	r3, #15
 80045ba:	d80a      	bhi.n	80045d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045bc:	2200      	movs	r2, #0
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	f000 f90b 	bl	80047de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045c8:	4a06      	ldr	r2, [pc, #24]	; (80045e4 <HAL_InitTick+0x5c>)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3708      	adds	r7, #8
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000000 	.word	0x20000000
 80045e0:	20000008 	.word	0x20000008
 80045e4:	20000004 	.word	0x20000004

080045e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <HAL_IncTick+0x20>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	4b06      	ldr	r3, [pc, #24]	; (800460c <HAL_IncTick+0x24>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4413      	add	r3, r2
 80045f8:	4a04      	ldr	r2, [pc, #16]	; (800460c <HAL_IncTick+0x24>)
 80045fa:	6013      	str	r3, [r2, #0]
}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
 8004606:	bf00      	nop
 8004608:	20000008 	.word	0x20000008
 800460c:	20004d6c 	.word	0x20004d6c

08004610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  return uwTick;
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <HAL_GetTick+0x14>)
 8004616:	681b      	ldr	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20004d6c 	.word	0x20004d6c

08004628 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004638:	4b0c      	ldr	r3, [pc, #48]	; (800466c <__NVIC_SetPriorityGrouping+0x44>)
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004644:	4013      	ands	r3, r2
 8004646:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004650:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800465a:	4a04      	ldr	r2, [pc, #16]	; (800466c <__NVIC_SetPriorityGrouping+0x44>)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	60d3      	str	r3, [r2, #12]
}
 8004660:	bf00      	nop
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000ed00 	.word	0xe000ed00

08004670 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <__NVIC_GetPriorityGrouping+0x18>)
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	0a1b      	lsrs	r3, r3, #8
 800467a:	f003 0307 	and.w	r3, r3, #7
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800469a:	2b00      	cmp	r3, #0
 800469c:	db0b      	blt.n	80046b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	f003 021f 	and.w	r2, r3, #31
 80046a4:	4907      	ldr	r1, [pc, #28]	; (80046c4 <__NVIC_EnableIRQ+0x38>)
 80046a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	2001      	movs	r0, #1
 80046ae:	fa00 f202 	lsl.w	r2, r0, r2
 80046b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	e000e100 	.word	0xe000e100

080046c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	6039      	str	r1, [r7, #0]
 80046d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	db0a      	blt.n	80046f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	490c      	ldr	r1, [pc, #48]	; (8004714 <__NVIC_SetPriority+0x4c>)
 80046e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e6:	0112      	lsls	r2, r2, #4
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	440b      	add	r3, r1
 80046ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046f0:	e00a      	b.n	8004708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	4908      	ldr	r1, [pc, #32]	; (8004718 <__NVIC_SetPriority+0x50>)
 80046f8:	79fb      	ldrb	r3, [r7, #7]
 80046fa:	f003 030f 	and.w	r3, r3, #15
 80046fe:	3b04      	subs	r3, #4
 8004700:	0112      	lsls	r2, r2, #4
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	440b      	add	r3, r1
 8004706:	761a      	strb	r2, [r3, #24]
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	e000e100 	.word	0xe000e100
 8004718:	e000ed00 	.word	0xe000ed00

0800471c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800471c:	b480      	push	{r7}
 800471e:	b089      	sub	sp, #36	; 0x24
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f1c3 0307 	rsb	r3, r3, #7
 8004736:	2b04      	cmp	r3, #4
 8004738:	bf28      	it	cs
 800473a:	2304      	movcs	r3, #4
 800473c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	3304      	adds	r3, #4
 8004742:	2b06      	cmp	r3, #6
 8004744:	d902      	bls.n	800474c <NVIC_EncodePriority+0x30>
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	3b03      	subs	r3, #3
 800474a:	e000      	b.n	800474e <NVIC_EncodePriority+0x32>
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004750:	f04f 32ff 	mov.w	r2, #4294967295
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	43da      	mvns	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	401a      	ands	r2, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004764:	f04f 31ff 	mov.w	r1, #4294967295
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	fa01 f303 	lsl.w	r3, r1, r3
 800476e:	43d9      	mvns	r1, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004774:	4313      	orrs	r3, r2
         );
}
 8004776:	4618      	mov	r0, r3
 8004778:	3724      	adds	r7, #36	; 0x24
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3b01      	subs	r3, #1
 8004790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004794:	d301      	bcc.n	800479a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004796:	2301      	movs	r3, #1
 8004798:	e00f      	b.n	80047ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800479a:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <SysTick_Config+0x40>)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3b01      	subs	r3, #1
 80047a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047a2:	210f      	movs	r1, #15
 80047a4:	f04f 30ff 	mov.w	r0, #4294967295
 80047a8:	f7ff ff8e 	bl	80046c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <SysTick_Config+0x40>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047b2:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <SysTick_Config+0x40>)
 80047b4:	2207      	movs	r2, #7
 80047b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	e000e010 	.word	0xe000e010

080047c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff ff29 	bl	8004628 <__NVIC_SetPriorityGrouping>
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047de:	b580      	push	{r7, lr}
 80047e0:	b086      	sub	sp, #24
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	4603      	mov	r3, r0
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
 80047ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80047ec:	2300      	movs	r3, #0
 80047ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80047f0:	f7ff ff3e 	bl	8004670 <__NVIC_GetPriorityGrouping>
 80047f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	6978      	ldr	r0, [r7, #20]
 80047fc:	f7ff ff8e 	bl	800471c <NVIC_EncodePriority>
 8004800:	4602      	mov	r2, r0
 8004802:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff ff5d 	bl	80046c8 <__NVIC_SetPriority>
}
 800480e:	bf00      	nop
 8004810:	3718      	adds	r7, #24
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	4603      	mov	r3, r0
 800481e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff ff31 	bl	800468c <__NVIC_EnableIRQ>
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff ffa2 	bl	8004784 <SysTick_Config>
 8004840:	4603      	mov	r3, r0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004858:	f7ff feda 	bl	8004610 <HAL_GetTick>
 800485c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d008      	beq.n	800487c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2280      	movs	r2, #128	; 0x80
 800486e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e052      	b.n	8004922 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0216 	bic.w	r2, r2, #22
 800488a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695a      	ldr	r2, [r3, #20]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800489a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d103      	bne.n	80048ac <HAL_DMA_Abort+0x62>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0208 	bic.w	r2, r2, #8
 80048ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048cc:	e013      	b.n	80048f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048ce:	f7ff fe9f 	bl	8004610 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b05      	cmp	r3, #5
 80048da:	d90c      	bls.n	80048f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2220      	movs	r2, #32
 80048e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2203      	movs	r2, #3
 80048e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e015      	b.n	8004922 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e4      	bne.n	80048ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004908:	223f      	movs	r2, #63	; 0x3f
 800490a:	409a      	lsls	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800492a:	b480      	push	{r7}
 800492c:	b083      	sub	sp, #12
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d004      	beq.n	8004948 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2280      	movs	r2, #128	; 0x80
 8004942:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e00c      	b.n	8004962 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2205      	movs	r2, #5
 800494c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	; 0x24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004982:	2300      	movs	r3, #0
 8004984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e16b      	b.n	8004c64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800498c:	2201      	movs	r2, #1
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4013      	ands	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	f040 815a 	bne.w	8004c5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d005      	beq.n	80049c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d130      	bne.n	8004a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	2203      	movs	r2, #3
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049f8:	2201      	movs	r2, #1
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 0201 	and.w	r2, r3, #1
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d017      	beq.n	8004a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	4013      	ands	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d123      	bne.n	8004ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	08da      	lsrs	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3208      	adds	r2, #8
 8004a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	220f      	movs	r2, #15
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	08da      	lsrs	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3208      	adds	r2, #8
 8004aae:	69b9      	ldr	r1, [r7, #24]
 8004ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	2203      	movs	r2, #3
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0203 	and.w	r2, r3, #3
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80b4 	beq.w	8004c5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	4b60      	ldr	r3, [pc, #384]	; (8004c7c <HAL_GPIO_Init+0x30c>)
 8004afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afe:	4a5f      	ldr	r2, [pc, #380]	; (8004c7c <HAL_GPIO_Init+0x30c>)
 8004b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b04:	6453      	str	r3, [r2, #68]	; 0x44
 8004b06:	4b5d      	ldr	r3, [pc, #372]	; (8004c7c <HAL_GPIO_Init+0x30c>)
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b12:	4a5b      	ldr	r2, [pc, #364]	; (8004c80 <HAL_GPIO_Init+0x310>)
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	089b      	lsrs	r3, r3, #2
 8004b18:	3302      	adds	r3, #2
 8004b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	220f      	movs	r2, #15
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a52      	ldr	r2, [pc, #328]	; (8004c84 <HAL_GPIO_Init+0x314>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d02b      	beq.n	8004b96 <HAL_GPIO_Init+0x226>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a51      	ldr	r2, [pc, #324]	; (8004c88 <HAL_GPIO_Init+0x318>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d025      	beq.n	8004b92 <HAL_GPIO_Init+0x222>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a50      	ldr	r2, [pc, #320]	; (8004c8c <HAL_GPIO_Init+0x31c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01f      	beq.n	8004b8e <HAL_GPIO_Init+0x21e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a4f      	ldr	r2, [pc, #316]	; (8004c90 <HAL_GPIO_Init+0x320>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d019      	beq.n	8004b8a <HAL_GPIO_Init+0x21a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a4e      	ldr	r2, [pc, #312]	; (8004c94 <HAL_GPIO_Init+0x324>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_GPIO_Init+0x216>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4d      	ldr	r2, [pc, #308]	; (8004c98 <HAL_GPIO_Init+0x328>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00d      	beq.n	8004b82 <HAL_GPIO_Init+0x212>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a4c      	ldr	r2, [pc, #304]	; (8004c9c <HAL_GPIO_Init+0x32c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d007      	beq.n	8004b7e <HAL_GPIO_Init+0x20e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a4b      	ldr	r2, [pc, #300]	; (8004ca0 <HAL_GPIO_Init+0x330>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d101      	bne.n	8004b7a <HAL_GPIO_Init+0x20a>
 8004b76:	2307      	movs	r3, #7
 8004b78:	e00e      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	e00c      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b7e:	2306      	movs	r3, #6
 8004b80:	e00a      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b82:	2305      	movs	r3, #5
 8004b84:	e008      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b86:	2304      	movs	r3, #4
 8004b88:	e006      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e004      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e002      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b96:	2300      	movs	r3, #0
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	f002 0203 	and.w	r2, r2, #3
 8004b9e:	0092      	lsls	r2, r2, #2
 8004ba0:	4093      	lsls	r3, r2
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ba8:	4935      	ldr	r1, [pc, #212]	; (8004c80 <HAL_GPIO_Init+0x310>)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	089b      	lsrs	r3, r3, #2
 8004bae:	3302      	adds	r3, #2
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bb6:	4b3b      	ldr	r3, [pc, #236]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004bda:	4a32      	ldr	r2, [pc, #200]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004be0:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c04:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c0a:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4013      	ands	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c58:	4a12      	ldr	r2, [pc, #72]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3301      	adds	r3, #1
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	f67f ae90 	bls.w	800498c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	3724      	adds	r7, #36	; 0x24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40013800 	.word	0x40013800
 8004c84:	40020000 	.word	0x40020000
 8004c88:	40020400 	.word	0x40020400
 8004c8c:	40020800 	.word	0x40020800
 8004c90:	40020c00 	.word	0x40020c00
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40021400 	.word	0x40021400
 8004c9c:	40021800 	.word	0x40021800
 8004ca0:	40021c00 	.word	0x40021c00
 8004ca4:	40013c00 	.word	0x40013c00

08004ca8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	887b      	ldrh	r3, [r7, #2]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	e001      	b.n	8004cca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	807b      	strh	r3, [r7, #2]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ce8:	787b      	ldrb	r3, [r7, #1]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cee:	887a      	ldrh	r2, [r7, #2]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cf4:	e003      	b.n	8004cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cf6:	887b      	ldrh	r3, [r7, #2]
 8004cf8:	041a      	lsls	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	619a      	str	r2, [r3, #24]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e264      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d075      	beq.n	8004e16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d2a:	4ba3      	ldr	r3, [pc, #652]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d00c      	beq.n	8004d50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d36:	4ba0      	ldr	r3, [pc, #640]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d112      	bne.n	8004d68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d42:	4b9d      	ldr	r3, [pc, #628]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d4e:	d10b      	bne.n	8004d68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d50:	4b99      	ldr	r3, [pc, #612]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d05b      	beq.n	8004e14 <HAL_RCC_OscConfig+0x108>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d157      	bne.n	8004e14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e23f      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d70:	d106      	bne.n	8004d80 <HAL_RCC_OscConfig+0x74>
 8004d72:	4b91      	ldr	r3, [pc, #580]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a90      	ldr	r2, [pc, #576]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	e01d      	b.n	8004dbc <HAL_RCC_OscConfig+0xb0>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d88:	d10c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x98>
 8004d8a:	4b8b      	ldr	r3, [pc, #556]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a8a      	ldr	r2, [pc, #552]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	4b88      	ldr	r3, [pc, #544]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a87      	ldr	r2, [pc, #540]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	e00b      	b.n	8004dbc <HAL_RCC_OscConfig+0xb0>
 8004da4:	4b84      	ldr	r3, [pc, #528]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a83      	ldr	r2, [pc, #524]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	4b81      	ldr	r3, [pc, #516]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a80      	ldr	r2, [pc, #512]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d013      	beq.n	8004dec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc4:	f7ff fc24 	bl	8004610 <HAL_GetTick>
 8004dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dcc:	f7ff fc20 	bl	8004610 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b64      	cmp	r3, #100	; 0x64
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e204      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dde:	4b76      	ldr	r3, [pc, #472]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d0f0      	beq.n	8004dcc <HAL_RCC_OscConfig+0xc0>
 8004dea:	e014      	b.n	8004e16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7ff fc10 	bl	8004610 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df4:	f7ff fc0c 	bl	8004610 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	; 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e1f0      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e06:	4b6c      	ldr	r3, [pc, #432]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1f0      	bne.n	8004df4 <HAL_RCC_OscConfig+0xe8>
 8004e12:	e000      	b.n	8004e16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d063      	beq.n	8004eea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e22:	4b65      	ldr	r3, [pc, #404]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00b      	beq.n	8004e46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e2e:	4b62      	ldr	r3, [pc, #392]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d11c      	bne.n	8004e74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e3a:	4b5f      	ldr	r3, [pc, #380]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d116      	bne.n	8004e74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e46:	4b5c      	ldr	r3, [pc, #368]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d005      	beq.n	8004e5e <HAL_RCC_OscConfig+0x152>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d001      	beq.n	8004e5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e1c4      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5e:	4b56      	ldr	r3, [pc, #344]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	4952      	ldr	r1, [pc, #328]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e72:	e03a      	b.n	8004eea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d020      	beq.n	8004ebe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e7c:	4b4f      	ldr	r3, [pc, #316]	; (8004fbc <HAL_RCC_OscConfig+0x2b0>)
 8004e7e:	2201      	movs	r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e82:	f7ff fbc5 	bl	8004610 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e8a:	f7ff fbc1 	bl	8004610 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e1a5      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e9c:	4b46      	ldr	r3, [pc, #280]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0302 	and.w	r3, r3, #2
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea8:	4b43      	ldr	r3, [pc, #268]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	00db      	lsls	r3, r3, #3
 8004eb6:	4940      	ldr	r1, [pc, #256]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	600b      	str	r3, [r1, #0]
 8004ebc:	e015      	b.n	8004eea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ebe:	4b3f      	ldr	r3, [pc, #252]	; (8004fbc <HAL_RCC_OscConfig+0x2b0>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec4:	f7ff fba4 	bl	8004610 <HAL_GetTick>
 8004ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ecc:	f7ff fba0 	bl	8004610 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d901      	bls.n	8004ede <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e184      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ede:	4b36      	ldr	r3, [pc, #216]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f0      	bne.n	8004ecc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d030      	beq.n	8004f58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d016      	beq.n	8004f2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004efe:	4b30      	ldr	r3, [pc, #192]	; (8004fc0 <HAL_RCC_OscConfig+0x2b4>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f04:	f7ff fb84 	bl	8004610 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f0c:	f7ff fb80 	bl	8004610 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e164      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f1e:	4b26      	ldr	r3, [pc, #152]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f0      	beq.n	8004f0c <HAL_RCC_OscConfig+0x200>
 8004f2a:	e015      	b.n	8004f58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f2c:	4b24      	ldr	r3, [pc, #144]	; (8004fc0 <HAL_RCC_OscConfig+0x2b4>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f32:	f7ff fb6d 	bl	8004610 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f3a:	f7ff fb69 	bl	8004610 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e14d      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004f4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80a0 	beq.w	80050a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f66:	2300      	movs	r3, #0
 8004f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f6a:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10f      	bne.n	8004f96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f76:	2300      	movs	r3, #0
 8004f78:	60bb      	str	r3, [r7, #8]
 8004f7a:	4b0f      	ldr	r3, [pc, #60]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	4a0e      	ldr	r2, [pc, #56]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f84:	6413      	str	r3, [r2, #64]	; 0x40
 8004f86:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <HAL_RCC_OscConfig+0x2ac>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f8e:	60bb      	str	r3, [r7, #8]
 8004f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f92:	2301      	movs	r3, #1
 8004f94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <HAL_RCC_OscConfig+0x2b8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d121      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fa2:	4b08      	ldr	r3, [pc, #32]	; (8004fc4 <HAL_RCC_OscConfig+0x2b8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a07      	ldr	r2, [pc, #28]	; (8004fc4 <HAL_RCC_OscConfig+0x2b8>)
 8004fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fae:	f7ff fb2f 	bl	8004610 <HAL_GetTick>
 8004fb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fb4:	e011      	b.n	8004fda <HAL_RCC_OscConfig+0x2ce>
 8004fb6:	bf00      	nop
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	42470000 	.word	0x42470000
 8004fc0:	42470e80 	.word	0x42470e80
 8004fc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc8:	f7ff fb22 	bl	8004610 <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e106      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fda:	4b85      	ldr	r3, [pc, #532]	; (80051f0 <HAL_RCC_OscConfig+0x4e4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0f0      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d106      	bne.n	8004ffc <HAL_RCC_OscConfig+0x2f0>
 8004fee:	4b81      	ldr	r3, [pc, #516]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 8004ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff2:	4a80      	ldr	r2, [pc, #512]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 8004ff4:	f043 0301 	orr.w	r3, r3, #1
 8004ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8004ffa:	e01c      	b.n	8005036 <HAL_RCC_OscConfig+0x32a>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	2b05      	cmp	r3, #5
 8005002:	d10c      	bne.n	800501e <HAL_RCC_OscConfig+0x312>
 8005004:	4b7b      	ldr	r3, [pc, #492]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 8005006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005008:	4a7a      	ldr	r2, [pc, #488]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 800500a:	f043 0304 	orr.w	r3, r3, #4
 800500e:	6713      	str	r3, [r2, #112]	; 0x70
 8005010:	4b78      	ldr	r3, [pc, #480]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 8005012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005014:	4a77      	ldr	r2, [pc, #476]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	6713      	str	r3, [r2, #112]	; 0x70
 800501c:	e00b      	b.n	8005036 <HAL_RCC_OscConfig+0x32a>
 800501e:	4b75      	ldr	r3, [pc, #468]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 8005020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005022:	4a74      	ldr	r2, [pc, #464]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	6713      	str	r3, [r2, #112]	; 0x70
 800502a:	4b72      	ldr	r3, [pc, #456]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 800502c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502e:	4a71      	ldr	r2, [pc, #452]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 8005030:	f023 0304 	bic.w	r3, r3, #4
 8005034:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d015      	beq.n	800506a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503e:	f7ff fae7 	bl	8004610 <HAL_GetTick>
 8005042:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005044:	e00a      	b.n	800505c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005046:	f7ff fae3 	bl	8004610 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	f241 3288 	movw	r2, #5000	; 0x1388
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e0c5      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505c:	4b65      	ldr	r3, [pc, #404]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 800505e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0ee      	beq.n	8005046 <HAL_RCC_OscConfig+0x33a>
 8005068:	e014      	b.n	8005094 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506a:	f7ff fad1 	bl	8004610 <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005070:	e00a      	b.n	8005088 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005072:	f7ff facd 	bl	8004610 <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005080:	4293      	cmp	r3, r2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e0af      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005088:	4b5a      	ldr	r3, [pc, #360]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1ee      	bne.n	8005072 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005094:	7dfb      	ldrb	r3, [r7, #23]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d105      	bne.n	80050a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800509a:	4b56      	ldr	r3, [pc, #344]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	4a55      	ldr	r2, [pc, #340]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 80050a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	f000 809b 	beq.w	80051e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050b0:	4b50      	ldr	r3, [pc, #320]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d05c      	beq.n	8005176 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d141      	bne.n	8005148 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c4:	4b4c      	ldr	r3, [pc, #304]	; (80051f8 <HAL_RCC_OscConfig+0x4ec>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ca:	f7ff faa1 	bl	8004610 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d2:	f7ff fa9d 	bl	8004610 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e081      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e4:	4b43      	ldr	r3, [pc, #268]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f0      	bne.n	80050d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69da      	ldr	r2, [r3, #28]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	019b      	lsls	r3, r3, #6
 8005100:	431a      	orrs	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	085b      	lsrs	r3, r3, #1
 8005108:	3b01      	subs	r3, #1
 800510a:	041b      	lsls	r3, r3, #16
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005112:	061b      	lsls	r3, r3, #24
 8005114:	4937      	ldr	r1, [pc, #220]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 8005116:	4313      	orrs	r3, r2
 8005118:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800511a:	4b37      	ldr	r3, [pc, #220]	; (80051f8 <HAL_RCC_OscConfig+0x4ec>)
 800511c:	2201      	movs	r2, #1
 800511e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005120:	f7ff fa76 	bl	8004610 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005128:	f7ff fa72 	bl	8004610 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e056      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800513a:	4b2e      	ldr	r3, [pc, #184]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x41c>
 8005146:	e04e      	b.n	80051e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005148:	4b2b      	ldr	r3, [pc, #172]	; (80051f8 <HAL_RCC_OscConfig+0x4ec>)
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514e:	f7ff fa5f 	bl	8004610 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005156:	f7ff fa5b 	bl	8004610 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e03f      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005168:	4b22      	ldr	r3, [pc, #136]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1f0      	bne.n	8005156 <HAL_RCC_OscConfig+0x44a>
 8005174:	e037      	b.n	80051e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e032      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005182:	4b1c      	ldr	r3, [pc, #112]	; (80051f4 <HAL_RCC_OscConfig+0x4e8>)
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d028      	beq.n	80051e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800519a:	429a      	cmp	r2, r3
 800519c:	d121      	bne.n	80051e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d11a      	bne.n	80051e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051b2:	4013      	ands	r3, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d111      	bne.n	80051e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	3b01      	subs	r3, #1
 80051cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d107      	bne.n	80051e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051de:	429a      	cmp	r2, r3
 80051e0:	d001      	beq.n	80051e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e000      	b.n	80051e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	40007000 	.word	0x40007000
 80051f4:	40023800 	.word	0x40023800
 80051f8:	42470060 	.word	0x42470060

080051fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d101      	bne.n	8005210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e0cc      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005210:	4b68      	ldr	r3, [pc, #416]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0307 	and.w	r3, r3, #7
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	429a      	cmp	r2, r3
 800521c:	d90c      	bls.n	8005238 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521e:	4b65      	ldr	r3, [pc, #404]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	b2d2      	uxtb	r2, r2
 8005224:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005226:	4b63      	ldr	r3, [pc, #396]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	429a      	cmp	r2, r3
 8005232:	d001      	beq.n	8005238 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0b8      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d020      	beq.n	8005286 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005250:	4b59      	ldr	r3, [pc, #356]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	4a58      	ldr	r2, [pc, #352]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800525a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0308 	and.w	r3, r3, #8
 8005264:	2b00      	cmp	r3, #0
 8005266:	d005      	beq.n	8005274 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005268:	4b53      	ldr	r3, [pc, #332]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	4a52      	ldr	r2, [pc, #328]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005272:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005274:	4b50      	ldr	r3, [pc, #320]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	494d      	ldr	r1, [pc, #308]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005282:	4313      	orrs	r3, r2
 8005284:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d044      	beq.n	800531c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b01      	cmp	r3, #1
 8005298:	d107      	bne.n	80052aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529a:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d119      	bne.n	80052da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e07f      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d003      	beq.n	80052ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d107      	bne.n	80052ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ba:	4b3f      	ldr	r3, [pc, #252]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e06f      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ca:	4b3b      	ldr	r3, [pc, #236]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e067      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052da:	4b37      	ldr	r3, [pc, #220]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f023 0203 	bic.w	r2, r3, #3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	4934      	ldr	r1, [pc, #208]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052ec:	f7ff f990 	bl	8004610 <HAL_GetTick>
 80052f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f2:	e00a      	b.n	800530a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f4:	f7ff f98c 	bl	8004610 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005302:	4293      	cmp	r3, r2
 8005304:	d901      	bls.n	800530a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e04f      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800530a:	4b2b      	ldr	r3, [pc, #172]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f003 020c 	and.w	r2, r3, #12
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	429a      	cmp	r2, r3
 800531a:	d1eb      	bne.n	80052f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800531c:	4b25      	ldr	r3, [pc, #148]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d20c      	bcs.n	8005344 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532a:	4b22      	ldr	r3, [pc, #136]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005332:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0307 	and.w	r3, r3, #7
 800533a:	683a      	ldr	r2, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d001      	beq.n	8005344 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e032      	b.n	80053aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d008      	beq.n	8005362 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005350:	4b19      	ldr	r3, [pc, #100]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	4916      	ldr	r1, [pc, #88]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	4313      	orrs	r3, r2
 8005360:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d009      	beq.n	8005382 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800536e:	4b12      	ldr	r3, [pc, #72]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	490e      	ldr	r1, [pc, #56]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005382:	f000 f821 	bl	80053c8 <HAL_RCC_GetSysClockFreq>
 8005386:	4602      	mov	r2, r0
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCC_ClockConfig+0x1bc>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	f003 030f 	and.w	r3, r3, #15
 8005392:	490a      	ldr	r1, [pc, #40]	; (80053bc <HAL_RCC_ClockConfig+0x1c0>)
 8005394:	5ccb      	ldrb	r3, [r1, r3]
 8005396:	fa22 f303 	lsr.w	r3, r2, r3
 800539a:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <HAL_RCC_ClockConfig+0x1c4>)
 800539c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800539e:	4b09      	ldr	r3, [pc, #36]	; (80053c4 <HAL_RCC_ClockConfig+0x1c8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7ff f8f0 	bl	8004588 <HAL_InitTick>

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40023c00 	.word	0x40023c00
 80053b8:	40023800 	.word	0x40023800
 80053bc:	0800d4e8 	.word	0x0800d4e8
 80053c0:	20000000 	.word	0x20000000
 80053c4:	20000004 	.word	0x20000004

080053c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80053cc:	b084      	sub	sp, #16
 80053ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	607b      	str	r3, [r7, #4]
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	2300      	movs	r3, #0
 80053da:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053e0:	4b67      	ldr	r3, [pc, #412]	; (8005580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 030c 	and.w	r3, r3, #12
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d00d      	beq.n	8005408 <HAL_RCC_GetSysClockFreq+0x40>
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	f200 80bd 	bhi.w	800556c <HAL_RCC_GetSysClockFreq+0x1a4>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0x34>
 80053f6:	2b04      	cmp	r3, #4
 80053f8:	d003      	beq.n	8005402 <HAL_RCC_GetSysClockFreq+0x3a>
 80053fa:	e0b7      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053fc:	4b61      	ldr	r3, [pc, #388]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80053fe:	60bb      	str	r3, [r7, #8]
       break;
 8005400:	e0b7      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005402:	4b61      	ldr	r3, [pc, #388]	; (8005588 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005404:	60bb      	str	r3, [r7, #8]
      break;
 8005406:	e0b4      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005408:	4b5d      	ldr	r3, [pc, #372]	; (8005580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005410:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005412:	4b5b      	ldr	r3, [pc, #364]	; (8005580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d04d      	beq.n	80054ba <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800541e:	4b58      	ldr	r3, [pc, #352]	; (8005580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	099b      	lsrs	r3, r3, #6
 8005424:	461a      	mov	r2, r3
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800542e:	f04f 0100 	mov.w	r1, #0
 8005432:	ea02 0800 	and.w	r8, r2, r0
 8005436:	ea03 0901 	and.w	r9, r3, r1
 800543a:	4640      	mov	r0, r8
 800543c:	4649      	mov	r1, r9
 800543e:	f04f 0200 	mov.w	r2, #0
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	014b      	lsls	r3, r1, #5
 8005448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800544c:	0142      	lsls	r2, r0, #5
 800544e:	4610      	mov	r0, r2
 8005450:	4619      	mov	r1, r3
 8005452:	ebb0 0008 	subs.w	r0, r0, r8
 8005456:	eb61 0109 	sbc.w	r1, r1, r9
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	018b      	lsls	r3, r1, #6
 8005464:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005468:	0182      	lsls	r2, r0, #6
 800546a:	1a12      	subs	r2, r2, r0
 800546c:	eb63 0301 	sbc.w	r3, r3, r1
 8005470:	f04f 0000 	mov.w	r0, #0
 8005474:	f04f 0100 	mov.w	r1, #0
 8005478:	00d9      	lsls	r1, r3, #3
 800547a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800547e:	00d0      	lsls	r0, r2, #3
 8005480:	4602      	mov	r2, r0
 8005482:	460b      	mov	r3, r1
 8005484:	eb12 0208 	adds.w	r2, r2, r8
 8005488:	eb43 0309 	adc.w	r3, r3, r9
 800548c:	f04f 0000 	mov.w	r0, #0
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	0259      	lsls	r1, r3, #9
 8005496:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800549a:	0250      	lsls	r0, r2, #9
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4610      	mov	r0, r2
 80054a2:	4619      	mov	r1, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	461a      	mov	r2, r3
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	f7fb fbec 	bl	8000c88 <__aeabi_uldivmod>
 80054b0:	4602      	mov	r2, r0
 80054b2:	460b      	mov	r3, r1
 80054b4:	4613      	mov	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	e04a      	b.n	8005550 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ba:	4b31      	ldr	r3, [pc, #196]	; (8005580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	099b      	lsrs	r3, r3, #6
 80054c0:	461a      	mov	r2, r3
 80054c2:	f04f 0300 	mov.w	r3, #0
 80054c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054ca:	f04f 0100 	mov.w	r1, #0
 80054ce:	ea02 0400 	and.w	r4, r2, r0
 80054d2:	ea03 0501 	and.w	r5, r3, r1
 80054d6:	4620      	mov	r0, r4
 80054d8:	4629      	mov	r1, r5
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	014b      	lsls	r3, r1, #5
 80054e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054e8:	0142      	lsls	r2, r0, #5
 80054ea:	4610      	mov	r0, r2
 80054ec:	4619      	mov	r1, r3
 80054ee:	1b00      	subs	r0, r0, r4
 80054f0:	eb61 0105 	sbc.w	r1, r1, r5
 80054f4:	f04f 0200 	mov.w	r2, #0
 80054f8:	f04f 0300 	mov.w	r3, #0
 80054fc:	018b      	lsls	r3, r1, #6
 80054fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005502:	0182      	lsls	r2, r0, #6
 8005504:	1a12      	subs	r2, r2, r0
 8005506:	eb63 0301 	sbc.w	r3, r3, r1
 800550a:	f04f 0000 	mov.w	r0, #0
 800550e:	f04f 0100 	mov.w	r1, #0
 8005512:	00d9      	lsls	r1, r3, #3
 8005514:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005518:	00d0      	lsls	r0, r2, #3
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	1912      	adds	r2, r2, r4
 8005520:	eb45 0303 	adc.w	r3, r5, r3
 8005524:	f04f 0000 	mov.w	r0, #0
 8005528:	f04f 0100 	mov.w	r1, #0
 800552c:	0299      	lsls	r1, r3, #10
 800552e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005532:	0290      	lsls	r0, r2, #10
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4610      	mov	r0, r2
 800553a:	4619      	mov	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	461a      	mov	r2, r3
 8005540:	f04f 0300 	mov.w	r3, #0
 8005544:	f7fb fba0 	bl	8000c88 <__aeabi_uldivmod>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4613      	mov	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005550:	4b0b      	ldr	r3, [pc, #44]	; (8005580 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	0c1b      	lsrs	r3, r3, #16
 8005556:	f003 0303 	and.w	r3, r3, #3
 800555a:	3301      	adds	r3, #1
 800555c:	005b      	lsls	r3, r3, #1
 800555e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	fbb2 f3f3 	udiv	r3, r2, r3
 8005568:	60bb      	str	r3, [r7, #8]
      break;
 800556a:	e002      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800556c:	4b05      	ldr	r3, [pc, #20]	; (8005584 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800556e:	60bb      	str	r3, [r7, #8]
      break;
 8005570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005572:	68bb      	ldr	r3, [r7, #8]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800557e:	bf00      	nop
 8005580:	40023800 	.word	0x40023800
 8005584:	00f42400 	.word	0x00f42400
 8005588:	007a1200 	.word	0x007a1200

0800558c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005590:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005592:	681b      	ldr	r3, [r3, #0]
}
 8005594:	4618      	mov	r0, r3
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	20000000 	.word	0x20000000

080055a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055a8:	f7ff fff0 	bl	800558c <HAL_RCC_GetHCLKFreq>
 80055ac:	4602      	mov	r2, r0
 80055ae:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	0a9b      	lsrs	r3, r3, #10
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	4903      	ldr	r1, [pc, #12]	; (80055c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ba:	5ccb      	ldrb	r3, [r1, r3]
 80055bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40023800 	.word	0x40023800
 80055c8:	0800d4f8 	.word	0x0800d4f8

080055cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80055d0:	f7ff ffdc 	bl	800558c <HAL_RCC_GetHCLKFreq>
 80055d4:	4602      	mov	r2, r0
 80055d6:	4b05      	ldr	r3, [pc, #20]	; (80055ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	0b5b      	lsrs	r3, r3, #13
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	4903      	ldr	r1, [pc, #12]	; (80055f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055e2:	5ccb      	ldrb	r3, [r1, r3]
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	40023800 	.word	0x40023800
 80055f0:	0800d4f8 	.word	0x0800d4f8

080055f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e041      	b.n	800568a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d106      	bne.n	8005620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fe f84a 	bl	80036b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	4619      	mov	r1, r3
 8005632:	4610      	mov	r0, r2
 8005634:	f000 fc7a 	bl	8005f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d001      	beq.n	80056ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e04e      	b.n	800574a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68da      	ldr	r2, [r3, #12]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f042 0201 	orr.w	r2, r2, #1
 80056c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a23      	ldr	r2, [pc, #140]	; (8005758 <HAL_TIM_Base_Start_IT+0xc4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d022      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d6:	d01d      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a1f      	ldr	r2, [pc, #124]	; (800575c <HAL_TIM_Base_Start_IT+0xc8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d018      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a1e      	ldr	r2, [pc, #120]	; (8005760 <HAL_TIM_Base_Start_IT+0xcc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d013      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1c      	ldr	r2, [pc, #112]	; (8005764 <HAL_TIM_Base_Start_IT+0xd0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00e      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1b      	ldr	r2, [pc, #108]	; (8005768 <HAL_TIM_Base_Start_IT+0xd4>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d009      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a19      	ldr	r2, [pc, #100]	; (800576c <HAL_TIM_Base_Start_IT+0xd8>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d004      	beq.n	8005714 <HAL_TIM_Base_Start_IT+0x80>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a18      	ldr	r2, [pc, #96]	; (8005770 <HAL_TIM_Base_Start_IT+0xdc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d111      	bne.n	8005738 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 0307 	and.w	r3, r3, #7
 800571e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b06      	cmp	r3, #6
 8005724:	d010      	beq.n	8005748 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0201 	orr.w	r2, r2, #1
 8005734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005736:	e007      	b.n	8005748 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f042 0201 	orr.w	r2, r2, #1
 8005746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800
 8005764:	40000c00 	.word	0x40000c00
 8005768:	40010400 	.word	0x40010400
 800576c:	40014000 	.word	0x40014000
 8005770:	40001800 	.word	0x40001800

08005774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e041      	b.n	800580a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f839 	bl	8005812 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3304      	adds	r3, #4
 80057b0:	4619      	mov	r1, r3
 80057b2:	4610      	mov	r0, r2
 80057b4:	f000 fbba 	bl	8005f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d109      	bne.n	800584c <HAL_TIM_PWM_Start+0x24>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b01      	cmp	r3, #1
 8005842:	bf14      	ite	ne
 8005844:	2301      	movne	r3, #1
 8005846:	2300      	moveq	r3, #0
 8005848:	b2db      	uxtb	r3, r3
 800584a:	e022      	b.n	8005892 <HAL_TIM_PWM_Start+0x6a>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2b04      	cmp	r3, #4
 8005850:	d109      	bne.n	8005866 <HAL_TIM_PWM_Start+0x3e>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b01      	cmp	r3, #1
 800585c:	bf14      	ite	ne
 800585e:	2301      	movne	r3, #1
 8005860:	2300      	moveq	r3, #0
 8005862:	b2db      	uxtb	r3, r3
 8005864:	e015      	b.n	8005892 <HAL_TIM_PWM_Start+0x6a>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b08      	cmp	r3, #8
 800586a:	d109      	bne.n	8005880 <HAL_TIM_PWM_Start+0x58>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e008      	b.n	8005892 <HAL_TIM_PWM_Start+0x6a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b01      	cmp	r3, #1
 800588a:	bf14      	ite	ne
 800588c:	2301      	movne	r3, #1
 800588e:	2300      	moveq	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d001      	beq.n	800589a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e07c      	b.n	8005994 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <HAL_TIM_PWM_Start+0x82>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a8:	e013      	b.n	80058d2 <HAL_TIM_PWM_Start+0xaa>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d104      	bne.n	80058ba <HAL_TIM_PWM_Start+0x92>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b8:	e00b      	b.n	80058d2 <HAL_TIM_PWM_Start+0xaa>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b08      	cmp	r3, #8
 80058be:	d104      	bne.n	80058ca <HAL_TIM_PWM_Start+0xa2>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058c8:	e003      	b.n	80058d2 <HAL_TIM_PWM_Start+0xaa>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2202      	movs	r2, #2
 80058ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2201      	movs	r2, #1
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fe10 	bl	8006500 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a2d      	ldr	r2, [pc, #180]	; (800599c <HAL_TIM_PWM_Start+0x174>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d004      	beq.n	80058f4 <HAL_TIM_PWM_Start+0xcc>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a2c      	ldr	r2, [pc, #176]	; (80059a0 <HAL_TIM_PWM_Start+0x178>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d101      	bne.n	80058f8 <HAL_TIM_PWM_Start+0xd0>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e000      	b.n	80058fa <HAL_TIM_PWM_Start+0xd2>
 80058f8:	2300      	movs	r3, #0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800590c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a22      	ldr	r2, [pc, #136]	; (800599c <HAL_TIM_PWM_Start+0x174>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d022      	beq.n	800595e <HAL_TIM_PWM_Start+0x136>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005920:	d01d      	beq.n	800595e <HAL_TIM_PWM_Start+0x136>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a1f      	ldr	r2, [pc, #124]	; (80059a4 <HAL_TIM_PWM_Start+0x17c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d018      	beq.n	800595e <HAL_TIM_PWM_Start+0x136>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1d      	ldr	r2, [pc, #116]	; (80059a8 <HAL_TIM_PWM_Start+0x180>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <HAL_TIM_PWM_Start+0x136>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a1c      	ldr	r2, [pc, #112]	; (80059ac <HAL_TIM_PWM_Start+0x184>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00e      	beq.n	800595e <HAL_TIM_PWM_Start+0x136>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a16      	ldr	r2, [pc, #88]	; (80059a0 <HAL_TIM_PWM_Start+0x178>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d009      	beq.n	800595e <HAL_TIM_PWM_Start+0x136>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a18      	ldr	r2, [pc, #96]	; (80059b0 <HAL_TIM_PWM_Start+0x188>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d004      	beq.n	800595e <HAL_TIM_PWM_Start+0x136>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a16      	ldr	r2, [pc, #88]	; (80059b4 <HAL_TIM_PWM_Start+0x18c>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d111      	bne.n	8005982 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b06      	cmp	r3, #6
 800596e:	d010      	beq.n	8005992 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f042 0201 	orr.w	r2, r2, #1
 800597e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005980:	e007      	b.n	8005992 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0201 	orr.w	r2, r2, #1
 8005990:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005992:	2300      	movs	r3, #0
}
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}
 800599c:	40010000 	.word	0x40010000
 80059a0:	40010400 	.word	0x40010400
 80059a4:	40000400 	.word	0x40000400
 80059a8:	40000800 	.word	0x40000800
 80059ac:	40000c00 	.word	0x40000c00
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40001800 	.word	0x40001800

080059b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d122      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d11b      	bne.n	8005a14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f06f 0202 	mvn.w	r2, #2
 80059e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f003 0303 	and.w	r3, r3, #3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fa77 	bl	8005eee <HAL_TIM_IC_CaptureCallback>
 8005a00:	e005      	b.n	8005a0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fa69 	bl	8005eda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fa7a 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	d122      	bne.n	8005a68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b04      	cmp	r3, #4
 8005a2e:	d11b      	bne.n	8005a68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0204 	mvn.w	r2, #4
 8005a38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d003      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fa4d 	bl	8005eee <HAL_TIM_IC_CaptureCallback>
 8005a54:	e005      	b.n	8005a62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fa3f 	bl	8005eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 fa50 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0308 	and.w	r3, r3, #8
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d122      	bne.n	8005abc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d11b      	bne.n	8005abc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f06f 0208 	mvn.w	r2, #8
 8005a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2204      	movs	r2, #4
 8005a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	f003 0303 	and.w	r3, r3, #3
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 fa23 	bl	8005eee <HAL_TIM_IC_CaptureCallback>
 8005aa8:	e005      	b.n	8005ab6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fa15 	bl	8005eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f000 fa26 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d122      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	f003 0310 	and.w	r3, r3, #16
 8005ad4:	2b10      	cmp	r3, #16
 8005ad6:	d11b      	bne.n	8005b10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f06f 0210 	mvn.w	r2, #16
 8005ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69db      	ldr	r3, [r3, #28]
 8005aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f9f9 	bl	8005eee <HAL_TIM_IC_CaptureCallback>
 8005afc:	e005      	b.n	8005b0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f9eb 	bl	8005eda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f9fc 	bl	8005f02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691b      	ldr	r3, [r3, #16]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d10e      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d107      	bne.n	8005b3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0201 	mvn.w	r2, #1
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fd fa06 	bl	8002f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b46:	2b80      	cmp	r3, #128	; 0x80
 8005b48:	d10e      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b54:	2b80      	cmp	r3, #128	; 0x80
 8005b56:	d107      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 fd78 	bl	8006658 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b72:	2b40      	cmp	r3, #64	; 0x40
 8005b74:	d10e      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	d107      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9c1 	bl	8005f16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d10e      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d107      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0220 	mvn.w	r2, #32
 8005bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fd42 	bl	8006644 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	3708      	adds	r7, #8
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d101      	bne.n	8005be6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005be2:	2302      	movs	r3, #2
 8005be4:	e0ae      	b.n	8005d44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2b0c      	cmp	r3, #12
 8005bf2:	f200 809f 	bhi.w	8005d34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bf6:	a201      	add	r2, pc, #4	; (adr r2, 8005bfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bfc:	08005c31 	.word	0x08005c31
 8005c00:	08005d35 	.word	0x08005d35
 8005c04:	08005d35 	.word	0x08005d35
 8005c08:	08005d35 	.word	0x08005d35
 8005c0c:	08005c71 	.word	0x08005c71
 8005c10:	08005d35 	.word	0x08005d35
 8005c14:	08005d35 	.word	0x08005d35
 8005c18:	08005d35 	.word	0x08005d35
 8005c1c:	08005cb3 	.word	0x08005cb3
 8005c20:	08005d35 	.word	0x08005d35
 8005c24:	08005d35 	.word	0x08005d35
 8005c28:	08005d35 	.word	0x08005d35
 8005c2c:	08005cf3 	.word	0x08005cf3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68b9      	ldr	r1, [r7, #8]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 fa18 	bl	800606c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	699a      	ldr	r2, [r3, #24]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0208 	orr.w	r2, r2, #8
 8005c4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0204 	bic.w	r2, r2, #4
 8005c5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6999      	ldr	r1, [r3, #24]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	619a      	str	r2, [r3, #24]
      break;
 8005c6e:	e064      	b.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f000 fa68 	bl	800614c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	699a      	ldr	r2, [r3, #24]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6999      	ldr	r1, [r3, #24]
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	021a      	lsls	r2, r3, #8
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	430a      	orrs	r2, r1
 8005cae:	619a      	str	r2, [r3, #24]
      break;
 8005cb0:	e043      	b.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68b9      	ldr	r1, [r7, #8]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 fabd 	bl	8006238 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69da      	ldr	r2, [r3, #28]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f042 0208 	orr.w	r2, r2, #8
 8005ccc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0204 	bic.w	r2, r2, #4
 8005cdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69d9      	ldr	r1, [r3, #28]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	61da      	str	r2, [r3, #28]
      break;
 8005cf0:	e023      	b.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68b9      	ldr	r1, [r7, #8]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fb11 	bl	8006320 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69d9      	ldr	r1, [r3, #28]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	021a      	lsls	r2, r3, #8
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	61da      	str	r2, [r3, #28]
      break;
 8005d32:	e002      	b.n	8005d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	75fb      	strb	r3, [r7, #23]
      break;
 8005d38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d101      	bne.n	8005d68 <HAL_TIM_ConfigClockSource+0x1c>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e0b4      	b.n	8005ed2 <HAL_TIM_ConfigClockSource+0x186>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da0:	d03e      	beq.n	8005e20 <HAL_TIM_ConfigClockSource+0xd4>
 8005da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da6:	f200 8087 	bhi.w	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dae:	f000 8086 	beq.w	8005ebe <HAL_TIM_ConfigClockSource+0x172>
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db6:	d87f      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005db8:	2b70      	cmp	r3, #112	; 0x70
 8005dba:	d01a      	beq.n	8005df2 <HAL_TIM_ConfigClockSource+0xa6>
 8005dbc:	2b70      	cmp	r3, #112	; 0x70
 8005dbe:	d87b      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc0:	2b60      	cmp	r3, #96	; 0x60
 8005dc2:	d050      	beq.n	8005e66 <HAL_TIM_ConfigClockSource+0x11a>
 8005dc4:	2b60      	cmp	r3, #96	; 0x60
 8005dc6:	d877      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc8:	2b50      	cmp	r3, #80	; 0x50
 8005dca:	d03c      	beq.n	8005e46 <HAL_TIM_ConfigClockSource+0xfa>
 8005dcc:	2b50      	cmp	r3, #80	; 0x50
 8005dce:	d873      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd0:	2b40      	cmp	r3, #64	; 0x40
 8005dd2:	d058      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x13a>
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	d86f      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd8:	2b30      	cmp	r3, #48	; 0x30
 8005dda:	d064      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8005ddc:	2b30      	cmp	r3, #48	; 0x30
 8005dde:	d86b      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d060      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8005de4:	2b20      	cmp	r3, #32
 8005de6:	d867      	bhi.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d05c      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d05a      	beq.n	8005ea6 <HAL_TIM_ConfigClockSource+0x15a>
 8005df0:	e062      	b.n	8005eb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6818      	ldr	r0, [r3, #0]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	6899      	ldr	r1, [r3, #8]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f000 fb5d 	bl	80064c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	609a      	str	r2, [r3, #8]
      break;
 8005e1e:	e04f      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6818      	ldr	r0, [r3, #0]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	6899      	ldr	r1, [r3, #8]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f000 fb46 	bl	80064c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	689a      	ldr	r2, [r3, #8]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e42:	609a      	str	r2, [r3, #8]
      break;
 8005e44:	e03c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6818      	ldr	r0, [r3, #0]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	6859      	ldr	r1, [r3, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	461a      	mov	r2, r3
 8005e54:	f000 faba 	bl	80063cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2150      	movs	r1, #80	; 0x50
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 fb13 	bl	800648a <TIM_ITRx_SetConfig>
      break;
 8005e64:	e02c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	6859      	ldr	r1, [r3, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	461a      	mov	r2, r3
 8005e74:	f000 fad9 	bl	800642a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2160      	movs	r1, #96	; 0x60
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 fb03 	bl	800648a <TIM_ITRx_SetConfig>
      break;
 8005e84:	e01c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6818      	ldr	r0, [r3, #0]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6859      	ldr	r1, [r3, #4]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	461a      	mov	r2, r3
 8005e94:	f000 fa9a 	bl	80063cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2140      	movs	r1, #64	; 0x40
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f000 faf3 	bl	800648a <TIM_ITRx_SetConfig>
      break;
 8005ea4:	e00c      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f000 faea 	bl	800648a <TIM_ITRx_SetConfig>
      break;
 8005eb6:	e003      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	73fb      	strb	r3, [r7, #15]
      break;
 8005ebc:	e000      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005eda:	b480      	push	{r7}
 8005edc:	b083      	sub	sp, #12
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ee2:	bf00      	nop
 8005ee4:	370c      	adds	r7, #12
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr

08005eee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b083      	sub	sp, #12
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f0a:	bf00      	nop
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr

08005f16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f16:	b480      	push	{r7}
 8005f18:	b083      	sub	sp, #12
 8005f1a:	af00      	add	r7, sp, #0
 8005f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f1e:	bf00      	nop
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
	...

08005f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a40      	ldr	r2, [pc, #256]	; (8006040 <TIM_Base_SetConfig+0x114>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d013      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4a:	d00f      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a3d      	ldr	r2, [pc, #244]	; (8006044 <TIM_Base_SetConfig+0x118>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a3c      	ldr	r2, [pc, #240]	; (8006048 <TIM_Base_SetConfig+0x11c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d007      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a3b      	ldr	r2, [pc, #236]	; (800604c <TIM_Base_SetConfig+0x120>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_Base_SetConfig+0x40>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a3a      	ldr	r2, [pc, #232]	; (8006050 <TIM_Base_SetConfig+0x124>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d108      	bne.n	8005f7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a2f      	ldr	r2, [pc, #188]	; (8006040 <TIM_Base_SetConfig+0x114>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d02b      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8c:	d027      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a2c      	ldr	r2, [pc, #176]	; (8006044 <TIM_Base_SetConfig+0x118>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d023      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a2b      	ldr	r2, [pc, #172]	; (8006048 <TIM_Base_SetConfig+0x11c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d01f      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a2a      	ldr	r2, [pc, #168]	; (800604c <TIM_Base_SetConfig+0x120>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01b      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a29      	ldr	r2, [pc, #164]	; (8006050 <TIM_Base_SetConfig+0x124>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d017      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a28      	ldr	r2, [pc, #160]	; (8006054 <TIM_Base_SetConfig+0x128>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d013      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a27      	ldr	r2, [pc, #156]	; (8006058 <TIM_Base_SetConfig+0x12c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00f      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a26      	ldr	r2, [pc, #152]	; (800605c <TIM_Base_SetConfig+0x130>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00b      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a25      	ldr	r2, [pc, #148]	; (8006060 <TIM_Base_SetConfig+0x134>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d007      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a24      	ldr	r2, [pc, #144]	; (8006064 <TIM_Base_SetConfig+0x138>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d003      	beq.n	8005fde <TIM_Base_SetConfig+0xb2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a23      	ldr	r2, [pc, #140]	; (8006068 <TIM_Base_SetConfig+0x13c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d108      	bne.n	8005ff0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689a      	ldr	r2, [r3, #8]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a0a      	ldr	r2, [pc, #40]	; (8006040 <TIM_Base_SetConfig+0x114>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_Base_SetConfig+0xf8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a0c      	ldr	r2, [pc, #48]	; (8006050 <TIM_Base_SetConfig+0x124>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d103      	bne.n	800602c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	615a      	str	r2, [r3, #20]
}
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40010000 	.word	0x40010000
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40000c00 	.word	0x40000c00
 8006050:	40010400 	.word	0x40010400
 8006054:	40014000 	.word	0x40014000
 8006058:	40014400 	.word	0x40014400
 800605c:	40014800 	.word	0x40014800
 8006060:	40001800 	.word	0x40001800
 8006064:	40001c00 	.word	0x40001c00
 8006068:	40002000 	.word	0x40002000

0800606c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800606c:	b480      	push	{r7}
 800606e:	b087      	sub	sp, #28
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
 8006074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	f023 0201 	bic.w	r2, r3, #1
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0303 	bic.w	r3, r3, #3
 80060a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	f023 0302 	bic.w	r3, r3, #2
 80060b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	4313      	orrs	r3, r2
 80060be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4a20      	ldr	r2, [pc, #128]	; (8006144 <TIM_OC1_SetConfig+0xd8>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d003      	beq.n	80060d0 <TIM_OC1_SetConfig+0x64>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a1f      	ldr	r2, [pc, #124]	; (8006148 <TIM_OC1_SetConfig+0xdc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d10c      	bne.n	80060ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f023 0308 	bic.w	r3, r3, #8
 80060d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	4313      	orrs	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f023 0304 	bic.w	r3, r3, #4
 80060e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a15      	ldr	r2, [pc, #84]	; (8006144 <TIM_OC1_SetConfig+0xd8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d003      	beq.n	80060fa <TIM_OC1_SetConfig+0x8e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a14      	ldr	r2, [pc, #80]	; (8006148 <TIM_OC1_SetConfig+0xdc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d111      	bne.n	800611e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	4313      	orrs	r3, r2
 800611c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	621a      	str	r2, [r3, #32]
}
 8006138:	bf00      	nop
 800613a:	371c      	adds	r7, #28
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	40010000 	.word	0x40010000
 8006148:	40010400 	.word	0x40010400

0800614c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f023 0210 	bic.w	r2, r3, #16
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006182:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	021b      	lsls	r3, r3, #8
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0320 	bic.w	r3, r3, #32
 8006196:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a22      	ldr	r2, [pc, #136]	; (8006230 <TIM_OC2_SetConfig+0xe4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d003      	beq.n	80061b4 <TIM_OC2_SetConfig+0x68>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a21      	ldr	r2, [pc, #132]	; (8006234 <TIM_OC2_SetConfig+0xe8>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d10d      	bne.n	80061d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a17      	ldr	r2, [pc, #92]	; (8006230 <TIM_OC2_SetConfig+0xe4>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_OC2_SetConfig+0x94>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a16      	ldr	r2, [pc, #88]	; (8006234 <TIM_OC2_SetConfig+0xe8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d113      	bne.n	8006208 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40010000 	.word	0x40010000
 8006234:	40010400 	.word	0x40010400

08006238 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	69db      	ldr	r3, [r3, #28]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0303 	bic.w	r3, r3, #3
 800626e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68fa      	ldr	r2, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a21      	ldr	r2, [pc, #132]	; (8006318 <TIM_OC3_SetConfig+0xe0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_OC3_SetConfig+0x66>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a20      	ldr	r2, [pc, #128]	; (800631c <TIM_OC3_SetConfig+0xe4>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d10d      	bne.n	80062ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a16      	ldr	r2, [pc, #88]	; (8006318 <TIM_OC3_SetConfig+0xe0>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d003      	beq.n	80062ca <TIM_OC3_SetConfig+0x92>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a15      	ldr	r2, [pc, #84]	; (800631c <TIM_OC3_SetConfig+0xe4>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d113      	bne.n	80062f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	621a      	str	r2, [r3, #32]
}
 800630c:	bf00      	nop
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	40010000 	.word	0x40010000
 800631c:	40010400 	.word	0x40010400

08006320 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a1b      	ldr	r3, [r3, #32]
 800632e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	021b      	lsls	r3, r3, #8
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4313      	orrs	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800636a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	031b      	lsls	r3, r3, #12
 8006372:	693a      	ldr	r2, [r7, #16]
 8006374:	4313      	orrs	r3, r2
 8006376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a12      	ldr	r2, [pc, #72]	; (80063c4 <TIM_OC4_SetConfig+0xa4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d003      	beq.n	8006388 <TIM_OC4_SetConfig+0x68>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a11      	ldr	r2, [pc, #68]	; (80063c8 <TIM_OC4_SetConfig+0xa8>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d109      	bne.n	800639c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	019b      	lsls	r3, r3, #6
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	4313      	orrs	r3, r2
 800639a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	621a      	str	r2, [r3, #32]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40010000 	.word	0x40010000
 80063c8:	40010400 	.word	0x40010400

080063cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	f023 0201 	bic.w	r2, r3, #1
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f023 030a 	bic.w	r3, r3, #10
 8006408:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	621a      	str	r2, [r3, #32]
}
 800641e:	bf00      	nop
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800642a:	b480      	push	{r7}
 800642c:	b087      	sub	sp, #28
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	f023 0210 	bic.w	r2, r3, #16
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006454:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	031b      	lsls	r3, r3, #12
 800645a:	697a      	ldr	r2, [r7, #20]
 800645c:	4313      	orrs	r3, r2
 800645e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006466:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	4313      	orrs	r3, r2
 8006470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	621a      	str	r2, [r3, #32]
}
 800647e:	bf00      	nop
 8006480:	371c      	adds	r7, #28
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800648a:	b480      	push	{r7}
 800648c:	b085      	sub	sp, #20
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
 8006492:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f043 0307 	orr.w	r3, r3, #7
 80064ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	609a      	str	r2, [r3, #8]
}
 80064b4:	bf00      	nop
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	021a      	lsls	r2, r3, #8
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	431a      	orrs	r2, r3
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	697a      	ldr	r2, [r7, #20]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	609a      	str	r2, [r3, #8]
}
 80064f4:	bf00      	nop
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006500:	b480      	push	{r7}
 8006502:	b087      	sub	sp, #28
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	f003 031f 	and.w	r3, r3, #31
 8006512:	2201      	movs	r2, #1
 8006514:	fa02 f303 	lsl.w	r3, r2, r3
 8006518:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a1a      	ldr	r2, [r3, #32]
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	43db      	mvns	r3, r3
 8006522:	401a      	ands	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a1a      	ldr	r2, [r3, #32]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f003 031f 	and.w	r3, r3, #31
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	fa01 f303 	lsl.w	r3, r1, r3
 8006538:	431a      	orrs	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
	...

0800654c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800655c:	2b01      	cmp	r3, #1
 800655e:	d101      	bne.n	8006564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006560:	2302      	movs	r3, #2
 8006562:	e05a      	b.n	800661a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2201      	movs	r2, #1
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800658a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68fa      	ldr	r2, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a21      	ldr	r2, [pc, #132]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d022      	beq.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b0:	d01d      	beq.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1d      	ldr	r2, [pc, #116]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d018      	beq.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d013      	beq.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1a      	ldr	r2, [pc, #104]	; (8006634 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d00e      	beq.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a18      	ldr	r2, [pc, #96]	; (8006638 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d009      	beq.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a17      	ldr	r2, [pc, #92]	; (800663c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d004      	beq.n	80065ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a15      	ldr	r2, [pc, #84]	; (8006640 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d10c      	bne.n	8006608 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006618:	2300      	movs	r3, #0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3714      	adds	r7, #20
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40010000 	.word	0x40010000
 800662c:	40000400 	.word	0x40000400
 8006630:	40000800 	.word	0x40000800
 8006634:	40000c00 	.word	0x40000c00
 8006638:	40010400 	.word	0x40010400
 800663c:	40014000 	.word	0x40014000
 8006640:	40001800 	.word	0x40001800

08006644 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e03f      	b.n	80066fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fd f886 	bl	80037a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2224      	movs	r2, #36	; 0x24
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fddb 	bl	800726c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	691a      	ldr	r2, [r3, #16]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	695a      	ldr	r2, [r3, #20]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b08a      	sub	sp, #40	; 0x28
 800670a:	af02      	add	r7, sp, #8
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	603b      	str	r3, [r7, #0]
 8006712:	4613      	mov	r3, r2
 8006714:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006720:	b2db      	uxtb	r3, r3
 8006722:	2b20      	cmp	r3, #32
 8006724:	d17c      	bne.n	8006820 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d002      	beq.n	8006732 <HAL_UART_Transmit+0x2c>
 800672c:	88fb      	ldrh	r3, [r7, #6]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e075      	b.n	8006822 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_UART_Transmit+0x3e>
 8006740:	2302      	movs	r3, #2
 8006742:	e06e      	b.n	8006822 <HAL_UART_Transmit+0x11c>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2221      	movs	r2, #33	; 0x21
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800675a:	f7fd ff59 	bl	8004610 <HAL_GetTick>
 800675e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	88fa      	ldrh	r2, [r7, #6]
 8006764:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	88fa      	ldrh	r2, [r7, #6]
 800676a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006774:	d108      	bne.n	8006788 <HAL_UART_Transmit+0x82>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800677e:	2300      	movs	r3, #0
 8006780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	61bb      	str	r3, [r7, #24]
 8006786:	e003      	b.n	8006790 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800678c:	2300      	movs	r3, #0
 800678e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006798:	e02a      	b.n	80067f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2200      	movs	r2, #0
 80067a2:	2180      	movs	r1, #128	; 0x80
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 fb1f 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e036      	b.n	8006822 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10b      	bne.n	80067d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	3302      	adds	r3, #2
 80067ce:	61bb      	str	r3, [r7, #24]
 80067d0:	e007      	b.n	80067e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	781a      	ldrb	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	3301      	adds	r3, #1
 80067e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d1cf      	bne.n	800679a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	9300      	str	r3, [sp, #0]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2200      	movs	r2, #0
 8006802:	2140      	movs	r1, #64	; 0x40
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 faef 	bl	8006de8 <UART_WaitOnFlagUntilTimeout>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006810:	2303      	movs	r3, #3
 8006812:	e006      	b.n	8006822 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800681c:	2300      	movs	r3, #0
 800681e:	e000      	b.n	8006822 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006820:	2302      	movs	r3, #2
  }
}
 8006822:	4618      	mov	r0, r3
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b084      	sub	sp, #16
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	4613      	mov	r3, r2
 8006836:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b20      	cmp	r3, #32
 8006842:	d11d      	bne.n	8006880 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HAL_UART_Receive_IT+0x26>
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e016      	b.n	8006882 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685a:	2b01      	cmp	r3, #1
 800685c:	d101      	bne.n	8006862 <HAL_UART_Receive_IT+0x38>
 800685e:	2302      	movs	r3, #2
 8006860:	e00f      	b.n	8006882 <HAL_UART_Receive_IT+0x58>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006870:	88fb      	ldrh	r3, [r7, #6]
 8006872:	461a      	mov	r2, r3
 8006874:	68b9      	ldr	r1, [r7, #8]
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fb24 	bl	8006ec4 <UART_Start_Receive_IT>
 800687c:	4603      	mov	r3, r0
 800687e:	e000      	b.n	8006882 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006880:	2302      	movs	r3, #2
  }
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
	...

0800688c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b0ba      	sub	sp, #232	; 0xe8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68db      	ldr	r3, [r3, #12]
 80068a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695b      	ldr	r3, [r3, #20]
 80068ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80068b8:	2300      	movs	r3, #0
 80068ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80068be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80068ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10f      	bne.n	80068f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d6:	f003 0320 	and.w	r3, r3, #32
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d009      	beq.n	80068f2 <HAL_UART_IRQHandler+0x66>
 80068de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fc03 	bl	80070f6 <UART_Receive_IT>
      return;
 80068f0:	e256      	b.n	8006da0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80068f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80de 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x22c>
 80068fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	d106      	bne.n	8006916 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800690c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80d1 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691a:	f003 0301 	and.w	r3, r3, #1
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <HAL_UART_IRQHandler+0xae>
 8006922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	f043 0201 	orr.w	r2, r3, #1
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800693a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800693e:	f003 0304 	and.w	r3, r3, #4
 8006942:	2b00      	cmp	r3, #0
 8006944:	d00b      	beq.n	800695e <HAL_UART_IRQHandler+0xd2>
 8006946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b00      	cmp	r3, #0
 8006950:	d005      	beq.n	800695e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	f043 0202 	orr.w	r2, r3, #2
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800695e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00b      	beq.n	8006982 <HAL_UART_IRQHandler+0xf6>
 800696a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f043 0204 	orr.w	r2, r3, #4
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006986:	f003 0308 	and.w	r3, r3, #8
 800698a:	2b00      	cmp	r3, #0
 800698c:	d011      	beq.n	80069b2 <HAL_UART_IRQHandler+0x126>
 800698e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006992:	f003 0320 	and.w	r3, r3, #32
 8006996:	2b00      	cmp	r3, #0
 8006998:	d105      	bne.n	80069a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800699a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d005      	beq.n	80069b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f043 0208 	orr.w	r2, r3, #8
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	f000 81ed 	beq.w	8006d96 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d008      	beq.n	80069da <HAL_UART_IRQHandler+0x14e>
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069cc:	f003 0320 	and.w	r3, r3, #32
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fb8e 	bl	80070f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e4:	2b40      	cmp	r3, #64	; 0x40
 80069e6:	bf0c      	ite	eq
 80069e8:	2301      	moveq	r3, #1
 80069ea:	2300      	movne	r3, #0
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <HAL_UART_IRQHandler+0x17a>
 80069fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d04f      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 fa96 	bl	8006f38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a16:	2b40      	cmp	r3, #64	; 0x40
 8006a18:	d141      	bne.n	8006a9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3314      	adds	r3, #20
 8006a20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	3314      	adds	r3, #20
 8006a42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1d9      	bne.n	8006a1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d013      	beq.n	8006a96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a72:	4a7d      	ldr	r2, [pc, #500]	; (8006c68 <HAL_UART_IRQHandler+0x3dc>)
 8006a74:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7fd ff55 	bl	800492a <HAL_DMA_Abort_IT>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d016      	beq.n	8006ab4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a90:	4610      	mov	r0, r2
 8006a92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a94:	e00e      	b.n	8006ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f990 	bl	8006dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a9c:	e00a      	b.n	8006ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f98c 	bl	8006dbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa4:	e006      	b.n	8006ab4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f988 	bl	8006dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006ab2:	e170      	b.n	8006d96 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ab4:	bf00      	nop
    return;
 8006ab6:	e16e      	b.n	8006d96 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	f040 814a 	bne.w	8006d56 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac6:	f003 0310 	and.w	r3, r3, #16
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 8143 	beq.w	8006d56 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad4:	f003 0310 	and.w	r3, r3, #16
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 813c 	beq.w	8006d56 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ade:	2300      	movs	r3, #0
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	60bb      	str	r3, [r7, #8]
 8006af2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	f040 80b4 	bne.w	8006c6c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 8140 	beq.w	8006d9a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b22:	429a      	cmp	r2, r3
 8006b24:	f080 8139 	bcs.w	8006d9a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3a:	f000 8088 	beq.w	8006c4e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b4c:	e853 3f00 	ldrex	r3, [r3]
 8006b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b5c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	330c      	adds	r3, #12
 8006b66:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006b6a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1d9      	bne.n	8006b3e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	3314      	adds	r3, #20
 8006b90:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b9c:	f023 0301 	bic.w	r3, r3, #1
 8006ba0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3314      	adds	r3, #20
 8006baa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bb6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e1      	bne.n	8006b8a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3314      	adds	r3, #20
 8006bcc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3314      	adds	r3, #20
 8006be6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006bea:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006bec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006bf0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e3      	bne.n	8006bc6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2220      	movs	r2, #32
 8006c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	330c      	adds	r3, #12
 8006c12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c1e:	f023 0310 	bic.w	r3, r3, #16
 8006c22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	330c      	adds	r3, #12
 8006c2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c30:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c32:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e3      	bne.n	8006c0c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f7fd fdfe 	bl	800484a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f8b6 	bl	8006dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c64:	e099      	b.n	8006d9a <HAL_UART_IRQHandler+0x50e>
 8006c66:	bf00      	nop
 8006c68:	08006fff 	.word	0x08006fff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 808b 	beq.w	8006d9e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 8086 	beq.w	8006d9e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	330c      	adds	r3, #12
 8006c98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9c:	e853 3f00 	ldrex	r3, [r3]
 8006ca0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	330c      	adds	r3, #12
 8006cb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006cb6:	647a      	str	r2, [r7, #68]	; 0x44
 8006cb8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cbe:	e841 2300 	strex	r3, r2, [r1]
 8006cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1e3      	bne.n	8006c92 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3314      	adds	r3, #20
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	f023 0301 	bic.w	r3, r3, #1
 8006ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3314      	adds	r3, #20
 8006cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cee:	633a      	str	r2, [r7, #48]	; 0x30
 8006cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e3      	bne.n	8006cca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	330c      	adds	r3, #12
 8006d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0310 	bic.w	r3, r3, #16
 8006d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	330c      	adds	r3, #12
 8006d30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d34:	61fa      	str	r2, [r7, #28]
 8006d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	69b9      	ldr	r1, [r7, #24]
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	617b      	str	r3, [r7, #20]
   return(result);
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e3      	bne.n	8006d10 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f83e 	bl	8006dd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d54:	e023      	b.n	8006d9e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d009      	beq.n	8006d76 <HAL_UART_IRQHandler+0x4ea>
 8006d62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f959 	bl	8007026 <UART_Transmit_IT>
    return;
 8006d74:	e014      	b.n	8006da0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00e      	beq.n	8006da0 <HAL_UART_IRQHandler+0x514>
 8006d82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d008      	beq.n	8006da0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 f999 	bl	80070c6 <UART_EndTransmit_IT>
    return;
 8006d94:	e004      	b.n	8006da0 <HAL_UART_IRQHandler+0x514>
    return;
 8006d96:	bf00      	nop
 8006d98:	e002      	b.n	8006da0 <HAL_UART_IRQHandler+0x514>
      return;
 8006d9a:	bf00      	nop
 8006d9c:	e000      	b.n	8006da0 <HAL_UART_IRQHandler+0x514>
      return;
 8006d9e:	bf00      	nop
  }
}
 8006da0:	37e8      	adds	r7, #232	; 0xe8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop

08006da8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b083      	sub	sp, #12
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006dc4:	bf00      	nop
 8006dc6:	370c      	adds	r7, #12
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b090      	sub	sp, #64	; 0x40
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df8:	e050      	b.n	8006e9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d04c      	beq.n	8006e9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006e02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e08:	f7fd fc02 	bl	8004610 <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d241      	bcs.n	8006e9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	330c      	adds	r3, #12
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	330c      	adds	r3, #12
 8006e36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e38:	637a      	str	r2, [r7, #52]	; 0x34
 8006e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e5      	bne.n	8006e18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3314      	adds	r3, #20
 8006e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3314      	adds	r3, #20
 8006e6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e6c:	623a      	str	r2, [r7, #32]
 8006e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	69f9      	ldr	r1, [r7, #28]
 8006e72:	6a3a      	ldr	r2, [r7, #32]
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e5      	bne.n	8006e4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2220      	movs	r2, #32
 8006e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2220      	movs	r2, #32
 8006e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e00f      	b.n	8006ebc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	bf0c      	ite	eq
 8006eac:	2301      	moveq	r3, #1
 8006eae:	2300      	movne	r3, #0
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d09f      	beq.n	8006dfa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3740      	adds	r7, #64	; 0x40
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	88fa      	ldrh	r2, [r7, #6]
 8006edc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	88fa      	ldrh	r2, [r7, #6]
 8006ee2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2222      	movs	r2, #34	; 0x22
 8006eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68da      	ldr	r2, [r3, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f08:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695a      	ldr	r2, [r3, #20]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f042 0201 	orr.w	r2, r2, #1
 8006f18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0220 	orr.w	r2, r2, #32
 8006f28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f2a:	2300      	movs	r3, #0
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3714      	adds	r7, #20
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b095      	sub	sp, #84	; 0x54
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	330c      	adds	r3, #12
 8006f46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4a:	e853 3f00 	ldrex	r3, [r3]
 8006f4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	330c      	adds	r3, #12
 8006f5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f60:	643a      	str	r2, [r7, #64]	; 0x40
 8006f62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f68:	e841 2300 	strex	r3, r2, [r1]
 8006f6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d1e5      	bne.n	8006f40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	3314      	adds	r3, #20
 8006f7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6a3b      	ldr	r3, [r7, #32]
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	f023 0301 	bic.w	r3, r3, #1
 8006f8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3314      	adds	r3, #20
 8006f92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f9c:	e841 2300 	strex	r3, r2, [r1]
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e5      	bne.n	8006f74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d119      	bne.n	8006fe4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f023 0310 	bic.w	r3, r3, #16
 8006fc6:	647b      	str	r3, [r7, #68]	; 0x44
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fd0:	61ba      	str	r2, [r7, #24]
 8006fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6979      	ldr	r1, [r7, #20]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e5      	bne.n	8006fb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ff2:	bf00      	nop
 8006ff4:	3754      	adds	r7, #84	; 0x54
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr

08006ffe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b084      	sub	sp, #16
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2200      	movs	r2, #0
 8007010:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f7ff fecf 	bl	8006dbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800701e:	bf00      	nop
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007026:	b480      	push	{r7}
 8007028:	b085      	sub	sp, #20
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b21      	cmp	r3, #33	; 0x21
 8007038:	d13e      	bne.n	80070b8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007042:	d114      	bne.n	800706e <UART_Transmit_IT+0x48>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	691b      	ldr	r3, [r3, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d110      	bne.n	800706e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007060:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	1c9a      	adds	r2, r3, #2
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	621a      	str	r2, [r3, #32]
 800706c:	e008      	b.n	8007080 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6211      	str	r1, [r2, #32]
 8007078:	781a      	ldrb	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007084:	b29b      	uxth	r3, r3
 8007086:	3b01      	subs	r3, #1
 8007088:	b29b      	uxth	r3, r3
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	4619      	mov	r1, r3
 800708e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10f      	bne.n	80070b4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80070a2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	68da      	ldr	r2, [r3, #12]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070b2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	e000      	b.n	80070ba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80070b8:	2302      	movs	r3, #2
  }
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b082      	sub	sp, #8
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2220      	movs	r2, #32
 80070e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7ff fe5e 	bl	8006da8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b08c      	sub	sp, #48	; 0x30
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b22      	cmp	r3, #34	; 0x22
 8007108:	f040 80ab 	bne.w	8007262 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007114:	d117      	bne.n	8007146 <UART_Receive_IT+0x50>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d113      	bne.n	8007146 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800711e:	2300      	movs	r3, #0
 8007120:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007126:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	b29b      	uxth	r3, r3
 8007130:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007134:	b29a      	uxth	r2, r3
 8007136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007138:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713e:	1c9a      	adds	r2, r3, #2
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	629a      	str	r2, [r3, #40]	; 0x28
 8007144:	e026      	b.n	8007194 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800714a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800714c:	2300      	movs	r3, #0
 800714e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007158:	d007      	beq.n	800716a <UART_Receive_IT+0x74>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10a      	bne.n	8007178 <UART_Receive_IT+0x82>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d106      	bne.n	8007178 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	b2da      	uxtb	r2, r3
 8007172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007174:	701a      	strb	r2, [r3, #0]
 8007176:	e008      	b.n	800718a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007184:	b2da      	uxtb	r2, r3
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718e:	1c5a      	adds	r2, r3, #1
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007198:	b29b      	uxth	r3, r3
 800719a:	3b01      	subs	r3, #1
 800719c:	b29b      	uxth	r3, r3
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	4619      	mov	r1, r3
 80071a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d15a      	bne.n	800725e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68da      	ldr	r2, [r3, #12]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f022 0220 	bic.w	r2, r2, #32
 80071b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80071c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695a      	ldr	r2, [r3, #20]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0201 	bic.w	r2, r2, #1
 80071d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2220      	movs	r2, #32
 80071dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d135      	bne.n	8007254 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	330c      	adds	r3, #12
 80071f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	613b      	str	r3, [r7, #16]
   return(result);
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f023 0310 	bic.w	r3, r3, #16
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	330c      	adds	r3, #12
 800720c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800720e:	623a      	str	r2, [r7, #32]
 8007210:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007212:	69f9      	ldr	r1, [r7, #28]
 8007214:	6a3a      	ldr	r2, [r7, #32]
 8007216:	e841 2300 	strex	r3, r2, [r1]
 800721a:	61bb      	str	r3, [r7, #24]
   return(result);
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1e5      	bne.n	80071ee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0310 	and.w	r3, r3, #16
 800722c:	2b10      	cmp	r3, #16
 800722e:	d10a      	bne.n	8007246 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007230:	2300      	movs	r3, #0
 8007232:	60fb      	str	r3, [r7, #12]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60fb      	str	r3, [r7, #12]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	60fb      	str	r3, [r7, #12]
 8007244:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f7ff fdbf 	bl	8006dd0 <HAL_UARTEx_RxEventCallback>
 8007252:	e002      	b.n	800725a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f7fb fbd5 	bl	8002a04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800725a:	2300      	movs	r3, #0
 800725c:	e002      	b.n	8007264 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800725e:	2300      	movs	r3, #0
 8007260:	e000      	b.n	8007264 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007262:	2302      	movs	r3, #2
  }
}
 8007264:	4618      	mov	r0, r3
 8007266:	3730      	adds	r7, #48	; 0x30
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}

0800726c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	b09f      	sub	sp, #124	; 0x7c
 8007272:	af00      	add	r7, sp, #0
 8007274:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007282:	68d9      	ldr	r1, [r3, #12]
 8007284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	ea40 0301 	orr.w	r3, r0, r1
 800728c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800728e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	431a      	orrs	r2, r3
 8007298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800729a:	695b      	ldr	r3, [r3, #20]
 800729c:	431a      	orrs	r2, r3
 800729e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80072a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80072b0:	f021 010c 	bic.w	r1, r1, #12
 80072b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80072ba:	430b      	orrs	r3, r1
 80072bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80072be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80072c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ca:	6999      	ldr	r1, [r3, #24]
 80072cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	ea40 0301 	orr.w	r3, r0, r1
 80072d4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80072d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	4bc5      	ldr	r3, [pc, #788]	; (80075f0 <UART_SetConfig+0x384>)
 80072dc:	429a      	cmp	r2, r3
 80072de:	d004      	beq.n	80072ea <UART_SetConfig+0x7e>
 80072e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	4bc3      	ldr	r3, [pc, #780]	; (80075f4 <UART_SetConfig+0x388>)
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d103      	bne.n	80072f2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80072ea:	f7fe f96f 	bl	80055cc <HAL_RCC_GetPCLK2Freq>
 80072ee:	6778      	str	r0, [r7, #116]	; 0x74
 80072f0:	e002      	b.n	80072f8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80072f2:	f7fe f957 	bl	80055a4 <HAL_RCC_GetPCLK1Freq>
 80072f6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fa:	69db      	ldr	r3, [r3, #28]
 80072fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007300:	f040 80b6 	bne.w	8007470 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007306:	461c      	mov	r4, r3
 8007308:	f04f 0500 	mov.w	r5, #0
 800730c:	4622      	mov	r2, r4
 800730e:	462b      	mov	r3, r5
 8007310:	1891      	adds	r1, r2, r2
 8007312:	6439      	str	r1, [r7, #64]	; 0x40
 8007314:	415b      	adcs	r3, r3
 8007316:	647b      	str	r3, [r7, #68]	; 0x44
 8007318:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800731c:	1912      	adds	r2, r2, r4
 800731e:	eb45 0303 	adc.w	r3, r5, r3
 8007322:	f04f 0000 	mov.w	r0, #0
 8007326:	f04f 0100 	mov.w	r1, #0
 800732a:	00d9      	lsls	r1, r3, #3
 800732c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007330:	00d0      	lsls	r0, r2, #3
 8007332:	4602      	mov	r2, r0
 8007334:	460b      	mov	r3, r1
 8007336:	1911      	adds	r1, r2, r4
 8007338:	6639      	str	r1, [r7, #96]	; 0x60
 800733a:	416b      	adcs	r3, r5
 800733c:	667b      	str	r3, [r7, #100]	; 0x64
 800733e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	461a      	mov	r2, r3
 8007344:	f04f 0300 	mov.w	r3, #0
 8007348:	1891      	adds	r1, r2, r2
 800734a:	63b9      	str	r1, [r7, #56]	; 0x38
 800734c:	415b      	adcs	r3, r3
 800734e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007350:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007354:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007358:	f7f9 fc96 	bl	8000c88 <__aeabi_uldivmod>
 800735c:	4602      	mov	r2, r0
 800735e:	460b      	mov	r3, r1
 8007360:	4ba5      	ldr	r3, [pc, #660]	; (80075f8 <UART_SetConfig+0x38c>)
 8007362:	fba3 2302 	umull	r2, r3, r3, r2
 8007366:	095b      	lsrs	r3, r3, #5
 8007368:	011e      	lsls	r6, r3, #4
 800736a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800736c:	461c      	mov	r4, r3
 800736e:	f04f 0500 	mov.w	r5, #0
 8007372:	4622      	mov	r2, r4
 8007374:	462b      	mov	r3, r5
 8007376:	1891      	adds	r1, r2, r2
 8007378:	6339      	str	r1, [r7, #48]	; 0x30
 800737a:	415b      	adcs	r3, r3
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
 800737e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007382:	1912      	adds	r2, r2, r4
 8007384:	eb45 0303 	adc.w	r3, r5, r3
 8007388:	f04f 0000 	mov.w	r0, #0
 800738c:	f04f 0100 	mov.w	r1, #0
 8007390:	00d9      	lsls	r1, r3, #3
 8007392:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007396:	00d0      	lsls	r0, r2, #3
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	1911      	adds	r1, r2, r4
 800739e:	65b9      	str	r1, [r7, #88]	; 0x58
 80073a0:	416b      	adcs	r3, r5
 80073a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	461a      	mov	r2, r3
 80073aa:	f04f 0300 	mov.w	r3, #0
 80073ae:	1891      	adds	r1, r2, r2
 80073b0:	62b9      	str	r1, [r7, #40]	; 0x28
 80073b2:	415b      	adcs	r3, r3
 80073b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80073ba:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80073be:	f7f9 fc63 	bl	8000c88 <__aeabi_uldivmod>
 80073c2:	4602      	mov	r2, r0
 80073c4:	460b      	mov	r3, r1
 80073c6:	4b8c      	ldr	r3, [pc, #560]	; (80075f8 <UART_SetConfig+0x38c>)
 80073c8:	fba3 1302 	umull	r1, r3, r3, r2
 80073cc:	095b      	lsrs	r3, r3, #5
 80073ce:	2164      	movs	r1, #100	; 0x64
 80073d0:	fb01 f303 	mul.w	r3, r1, r3
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	00db      	lsls	r3, r3, #3
 80073d8:	3332      	adds	r3, #50	; 0x32
 80073da:	4a87      	ldr	r2, [pc, #540]	; (80075f8 <UART_SetConfig+0x38c>)
 80073dc:	fba2 2303 	umull	r2, r3, r2, r3
 80073e0:	095b      	lsrs	r3, r3, #5
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073e8:	441e      	add	r6, r3
 80073ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ec:	4618      	mov	r0, r3
 80073ee:	f04f 0100 	mov.w	r1, #0
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	1894      	adds	r4, r2, r2
 80073f8:	623c      	str	r4, [r7, #32]
 80073fa:	415b      	adcs	r3, r3
 80073fc:	627b      	str	r3, [r7, #36]	; 0x24
 80073fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007402:	1812      	adds	r2, r2, r0
 8007404:	eb41 0303 	adc.w	r3, r1, r3
 8007408:	f04f 0400 	mov.w	r4, #0
 800740c:	f04f 0500 	mov.w	r5, #0
 8007410:	00dd      	lsls	r5, r3, #3
 8007412:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007416:	00d4      	lsls	r4, r2, #3
 8007418:	4622      	mov	r2, r4
 800741a:	462b      	mov	r3, r5
 800741c:	1814      	adds	r4, r2, r0
 800741e:	653c      	str	r4, [r7, #80]	; 0x50
 8007420:	414b      	adcs	r3, r1
 8007422:	657b      	str	r3, [r7, #84]	; 0x54
 8007424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	461a      	mov	r2, r3
 800742a:	f04f 0300 	mov.w	r3, #0
 800742e:	1891      	adds	r1, r2, r2
 8007430:	61b9      	str	r1, [r7, #24]
 8007432:	415b      	adcs	r3, r3
 8007434:	61fb      	str	r3, [r7, #28]
 8007436:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800743a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800743e:	f7f9 fc23 	bl	8000c88 <__aeabi_uldivmod>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	4b6c      	ldr	r3, [pc, #432]	; (80075f8 <UART_SetConfig+0x38c>)
 8007448:	fba3 1302 	umull	r1, r3, r3, r2
 800744c:	095b      	lsrs	r3, r3, #5
 800744e:	2164      	movs	r1, #100	; 0x64
 8007450:	fb01 f303 	mul.w	r3, r1, r3
 8007454:	1ad3      	subs	r3, r2, r3
 8007456:	00db      	lsls	r3, r3, #3
 8007458:	3332      	adds	r3, #50	; 0x32
 800745a:	4a67      	ldr	r2, [pc, #412]	; (80075f8 <UART_SetConfig+0x38c>)
 800745c:	fba2 2303 	umull	r2, r3, r2, r3
 8007460:	095b      	lsrs	r3, r3, #5
 8007462:	f003 0207 	and.w	r2, r3, #7
 8007466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4432      	add	r2, r6
 800746c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800746e:	e0b9      	b.n	80075e4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007472:	461c      	mov	r4, r3
 8007474:	f04f 0500 	mov.w	r5, #0
 8007478:	4622      	mov	r2, r4
 800747a:	462b      	mov	r3, r5
 800747c:	1891      	adds	r1, r2, r2
 800747e:	6139      	str	r1, [r7, #16]
 8007480:	415b      	adcs	r3, r3
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007488:	1912      	adds	r2, r2, r4
 800748a:	eb45 0303 	adc.w	r3, r5, r3
 800748e:	f04f 0000 	mov.w	r0, #0
 8007492:	f04f 0100 	mov.w	r1, #0
 8007496:	00d9      	lsls	r1, r3, #3
 8007498:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800749c:	00d0      	lsls	r0, r2, #3
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	eb12 0804 	adds.w	r8, r2, r4
 80074a6:	eb43 0905 	adc.w	r9, r3, r5
 80074aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f04f 0100 	mov.w	r1, #0
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	f04f 0300 	mov.w	r3, #0
 80074bc:	008b      	lsls	r3, r1, #2
 80074be:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80074c2:	0082      	lsls	r2, r0, #2
 80074c4:	4640      	mov	r0, r8
 80074c6:	4649      	mov	r1, r9
 80074c8:	f7f9 fbde 	bl	8000c88 <__aeabi_uldivmod>
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	4b49      	ldr	r3, [pc, #292]	; (80075f8 <UART_SetConfig+0x38c>)
 80074d2:	fba3 2302 	umull	r2, r3, r3, r2
 80074d6:	095b      	lsrs	r3, r3, #5
 80074d8:	011e      	lsls	r6, r3, #4
 80074da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074dc:	4618      	mov	r0, r3
 80074de:	f04f 0100 	mov.w	r1, #0
 80074e2:	4602      	mov	r2, r0
 80074e4:	460b      	mov	r3, r1
 80074e6:	1894      	adds	r4, r2, r2
 80074e8:	60bc      	str	r4, [r7, #8]
 80074ea:	415b      	adcs	r3, r3
 80074ec:	60fb      	str	r3, [r7, #12]
 80074ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074f2:	1812      	adds	r2, r2, r0
 80074f4:	eb41 0303 	adc.w	r3, r1, r3
 80074f8:	f04f 0400 	mov.w	r4, #0
 80074fc:	f04f 0500 	mov.w	r5, #0
 8007500:	00dd      	lsls	r5, r3, #3
 8007502:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007506:	00d4      	lsls	r4, r2, #3
 8007508:	4622      	mov	r2, r4
 800750a:	462b      	mov	r3, r5
 800750c:	1814      	adds	r4, r2, r0
 800750e:	64bc      	str	r4, [r7, #72]	; 0x48
 8007510:	414b      	adcs	r3, r1
 8007512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	4618      	mov	r0, r3
 800751a:	f04f 0100 	mov.w	r1, #0
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	f04f 0300 	mov.w	r3, #0
 8007526:	008b      	lsls	r3, r1, #2
 8007528:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800752c:	0082      	lsls	r2, r0, #2
 800752e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007532:	f7f9 fba9 	bl	8000c88 <__aeabi_uldivmod>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4b2f      	ldr	r3, [pc, #188]	; (80075f8 <UART_SetConfig+0x38c>)
 800753c:	fba3 1302 	umull	r1, r3, r3, r2
 8007540:	095b      	lsrs	r3, r3, #5
 8007542:	2164      	movs	r1, #100	; 0x64
 8007544:	fb01 f303 	mul.w	r3, r1, r3
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	3332      	adds	r3, #50	; 0x32
 800754e:	4a2a      	ldr	r2, [pc, #168]	; (80075f8 <UART_SetConfig+0x38c>)
 8007550:	fba2 2303 	umull	r2, r3, r2, r3
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800755a:	441e      	add	r6, r3
 800755c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800755e:	4618      	mov	r0, r3
 8007560:	f04f 0100 	mov.w	r1, #0
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	1894      	adds	r4, r2, r2
 800756a:	603c      	str	r4, [r7, #0]
 800756c:	415b      	adcs	r3, r3
 800756e:	607b      	str	r3, [r7, #4]
 8007570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007574:	1812      	adds	r2, r2, r0
 8007576:	eb41 0303 	adc.w	r3, r1, r3
 800757a:	f04f 0400 	mov.w	r4, #0
 800757e:	f04f 0500 	mov.w	r5, #0
 8007582:	00dd      	lsls	r5, r3, #3
 8007584:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007588:	00d4      	lsls	r4, r2, #3
 800758a:	4622      	mov	r2, r4
 800758c:	462b      	mov	r3, r5
 800758e:	eb12 0a00 	adds.w	sl, r2, r0
 8007592:	eb43 0b01 	adc.w	fp, r3, r1
 8007596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	4618      	mov	r0, r3
 800759c:	f04f 0100 	mov.w	r1, #0
 80075a0:	f04f 0200 	mov.w	r2, #0
 80075a4:	f04f 0300 	mov.w	r3, #0
 80075a8:	008b      	lsls	r3, r1, #2
 80075aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80075ae:	0082      	lsls	r2, r0, #2
 80075b0:	4650      	mov	r0, sl
 80075b2:	4659      	mov	r1, fp
 80075b4:	f7f9 fb68 	bl	8000c88 <__aeabi_uldivmod>
 80075b8:	4602      	mov	r2, r0
 80075ba:	460b      	mov	r3, r1
 80075bc:	4b0e      	ldr	r3, [pc, #56]	; (80075f8 <UART_SetConfig+0x38c>)
 80075be:	fba3 1302 	umull	r1, r3, r3, r2
 80075c2:	095b      	lsrs	r3, r3, #5
 80075c4:	2164      	movs	r1, #100	; 0x64
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	011b      	lsls	r3, r3, #4
 80075ce:	3332      	adds	r3, #50	; 0x32
 80075d0:	4a09      	ldr	r2, [pc, #36]	; (80075f8 <UART_SetConfig+0x38c>)
 80075d2:	fba2 2303 	umull	r2, r3, r2, r3
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	f003 020f 	and.w	r2, r3, #15
 80075dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4432      	add	r2, r6
 80075e2:	609a      	str	r2, [r3, #8]
}
 80075e4:	bf00      	nop
 80075e6:	377c      	adds	r7, #124	; 0x7c
 80075e8:	46bd      	mov	sp, r7
 80075ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ee:	bf00      	nop
 80075f0:	40011000 	.word	0x40011000
 80075f4:	40011400 	.word	0x40011400
 80075f8:	51eb851f 	.word	0x51eb851f

080075fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007606:	2300      	movs	r3, #0
 8007608:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800760a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800760e:	2b84      	cmp	r3, #132	; 0x84
 8007610:	d005      	beq.n	800761e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007612:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	4413      	add	r3, r2
 800761a:	3303      	adds	r3, #3
 800761c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800761e:	68fb      	ldr	r3, [r7, #12]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3714      	adds	r7, #20
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007630:	f000 fade 	bl	8007bf0 <vTaskStartScheduler>
  
  return osOK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	bd80      	pop	{r7, pc}

0800763a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800763a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800763c:	b089      	sub	sp, #36	; 0x24
 800763e:	af04      	add	r7, sp, #16
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d020      	beq.n	800768e <osThreadCreate+0x54>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d01c      	beq.n	800768e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685c      	ldr	r4, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681d      	ldr	r5, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691e      	ldr	r6, [r3, #16]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff ffc8 	bl	80075fc <makeFreeRtosPriority>
 800766c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007676:	9202      	str	r2, [sp, #8]
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	9100      	str	r1, [sp, #0]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	4632      	mov	r2, r6
 8007680:	4629      	mov	r1, r5
 8007682:	4620      	mov	r0, r4
 8007684:	f000 f8ed 	bl	8007862 <xTaskCreateStatic>
 8007688:	4603      	mov	r3, r0
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	e01c      	b.n	80076c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	685c      	ldr	r4, [r3, #4]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800769a:	b29e      	uxth	r6, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff ffaa 	bl	80075fc <makeFreeRtosPriority>
 80076a8:	4602      	mov	r2, r0
 80076aa:	f107 030c 	add.w	r3, r7, #12
 80076ae:	9301      	str	r3, [sp, #4]
 80076b0:	9200      	str	r2, [sp, #0]
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	4632      	mov	r2, r6
 80076b6:	4629      	mov	r1, r5
 80076b8:	4620      	mov	r0, r4
 80076ba:	f000 f92f 	bl	800791c <xTaskCreate>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d001      	beq.n	80076c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80076c4:	2300      	movs	r3, #0
 80076c6:	e000      	b.n	80076ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80076c8:	68fb      	ldr	r3, [r7, #12]
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d001      	beq.n	80076e8 <osDelay+0x16>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	e000      	b.n	80076ea <osDelay+0x18>
 80076e8:	2301      	movs	r3, #1
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fa4c 	bl	8007b88 <vTaskDelay>
  
  return osOK;
 80076f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80076fa:	b480      	push	{r7}
 80076fc:	b083      	sub	sp, #12
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f103 0208 	add.w	r2, r3, #8
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f04f 32ff 	mov.w	r2, #4294967295
 8007712:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f103 0208 	add.w	r2, r3, #8
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f103 0208 	add.w	r2, r3, #8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	689a      	ldr	r2, [r3, #8]
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	683a      	ldr	r2, [r7, #0]
 800777e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	601a      	str	r2, [r3, #0]
}
 8007790:	bf00      	nop
 8007792:	3714      	adds	r7, #20
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b2:	d103      	bne.n	80077bc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	60fb      	str	r3, [r7, #12]
 80077ba:	e00c      	b.n	80077d6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3308      	adds	r3, #8
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	e002      	b.n	80077ca <vListInsert+0x2e>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d2f6      	bcs.n	80077c4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	1c5a      	adds	r2, r3, #1
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	601a      	str	r2, [r3, #0]
}
 8007802:	bf00      	nop
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800780e:	b480      	push	{r7}
 8007810:	b085      	sub	sp, #20
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6892      	ldr	r2, [r2, #8]
 8007824:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6852      	ldr	r2, [r2, #4]
 800782e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	429a      	cmp	r2, r3
 8007838:	d103      	bne.n	8007842 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	1e5a      	subs	r2, r3, #1
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
}
 8007856:	4618      	mov	r0, r3
 8007858:	3714      	adds	r7, #20
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007862:	b580      	push	{r7, lr}
 8007864:	b08e      	sub	sp, #56	; 0x38
 8007866:	af04      	add	r7, sp, #16
 8007868:	60f8      	str	r0, [r7, #12]
 800786a:	60b9      	str	r1, [r7, #8]
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007888:	bf00      	nop
 800788a:	e7fe      	b.n	800788a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800788c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10a      	bne.n	80078a8 <xTaskCreateStatic+0x46>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	61fb      	str	r3, [r7, #28]
}
 80078a4:	bf00      	nop
 80078a6:	e7fe      	b.n	80078a6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078a8:	2354      	movs	r3, #84	; 0x54
 80078aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	2b54      	cmp	r3, #84	; 0x54
 80078b0:	d00a      	beq.n	80078c8 <xTaskCreateStatic+0x66>
	__asm volatile
 80078b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b6:	f383 8811 	msr	BASEPRI, r3
 80078ba:	f3bf 8f6f 	isb	sy
 80078be:	f3bf 8f4f 	dsb	sy
 80078c2:	61bb      	str	r3, [r7, #24]
}
 80078c4:	bf00      	nop
 80078c6:	e7fe      	b.n	80078c6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078c8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d01e      	beq.n	800790e <xTaskCreateStatic+0xac>
 80078d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d01b      	beq.n	800790e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078de:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078e8:	2300      	movs	r3, #0
 80078ea:	9303      	str	r3, [sp, #12]
 80078ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ee:	9302      	str	r3, [sp, #8]
 80078f0:	f107 0314 	add.w	r3, r7, #20
 80078f4:	9301      	str	r3, [sp, #4]
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	68b9      	ldr	r1, [r7, #8]
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f850 	bl	80079a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007906:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007908:	f000 f8d4 	bl	8007ab4 <prvAddNewTaskToReadyList>
 800790c:	e001      	b.n	8007912 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007912:	697b      	ldr	r3, [r7, #20]
	}
 8007914:	4618      	mov	r0, r3
 8007916:	3728      	adds	r7, #40	; 0x28
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800791c:	b580      	push	{r7, lr}
 800791e:	b08c      	sub	sp, #48	; 0x30
 8007920:	af04      	add	r7, sp, #16
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	603b      	str	r3, [r7, #0]
 8007928:	4613      	mov	r3, r2
 800792a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800792c:	88fb      	ldrh	r3, [r7, #6]
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4618      	mov	r0, r3
 8007932:	f000 fee1 	bl	80086f8 <pvPortMalloc>
 8007936:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00e      	beq.n	800795c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800793e:	2054      	movs	r0, #84	; 0x54
 8007940:	f000 feda 	bl	80086f8 <pvPortMalloc>
 8007944:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	631a      	str	r2, [r3, #48]	; 0x30
 8007952:	e005      	b.n	8007960 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007954:	6978      	ldr	r0, [r7, #20]
 8007956:	f000 ff9b 	bl	8008890 <vPortFree>
 800795a:	e001      	b.n	8007960 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800795c:	2300      	movs	r3, #0
 800795e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d017      	beq.n	8007996 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800796e:	88fa      	ldrh	r2, [r7, #6]
 8007970:	2300      	movs	r3, #0
 8007972:	9303      	str	r3, [sp, #12]
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	9302      	str	r3, [sp, #8]
 8007978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f80e 	bl	80079a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800798a:	69f8      	ldr	r0, [r7, #28]
 800798c:	f000 f892 	bl	8007ab4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007990:	2301      	movs	r3, #1
 8007992:	61bb      	str	r3, [r7, #24]
 8007994:	e002      	b.n	800799c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007996:	f04f 33ff 	mov.w	r3, #4294967295
 800799a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800799c:	69bb      	ldr	r3, [r7, #24]
	}
 800799e:	4618      	mov	r0, r3
 80079a0:	3720      	adds	r7, #32
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}

080079a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079a6:	b580      	push	{r7, lr}
 80079a8:	b088      	sub	sp, #32
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	60f8      	str	r0, [r7, #12]
 80079ae:	60b9      	str	r1, [r7, #8]
 80079b0:	607a      	str	r2, [r7, #4]
 80079b2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079be:	3b01      	subs	r3, #1
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	f023 0307 	bic.w	r3, r3, #7
 80079cc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <prvInitialiseNewTask+0x48>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	617b      	str	r3, [r7, #20]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d01f      	beq.n	8007a34 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079f4:	2300      	movs	r3, #0
 80079f6:	61fb      	str	r3, [r7, #28]
 80079f8:	e012      	b.n	8007a20 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	4413      	add	r3, r2
 8007a00:	7819      	ldrb	r1, [r3, #0]
 8007a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	4413      	add	r3, r2
 8007a08:	3334      	adds	r3, #52	; 0x34
 8007a0a:	460a      	mov	r2, r1
 8007a0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	4413      	add	r3, r2
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d006      	beq.n	8007a28 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	61fb      	str	r3, [r7, #28]
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	2b0f      	cmp	r3, #15
 8007a24:	d9e9      	bls.n	80079fa <prvInitialiseNewTask+0x54>
 8007a26:	e000      	b.n	8007a2a <prvInitialiseNewTask+0x84>
			{
				break;
 8007a28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a32:	e003      	b.n	8007a3c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a3e:	2b06      	cmp	r3, #6
 8007a40:	d901      	bls.n	8007a46 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a42:	2306      	movs	r3, #6
 8007a44:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a50:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	2200      	movs	r2, #0
 8007a56:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7ff fe6c 	bl	800773a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	3318      	adds	r3, #24
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff fe67 	bl	800773a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	f1c3 0207 	rsb	r2, r3, #7
 8007a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a80:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	2200      	movs	r2, #0
 8007a86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	68f9      	ldr	r1, [r7, #12]
 8007a94:	69b8      	ldr	r0, [r7, #24]
 8007a96:	f000 fc23 	bl	80082e0 <pxPortInitialiseStack>
 8007a9a:	4602      	mov	r2, r0
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d002      	beq.n	8007aac <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007aac:	bf00      	nop
 8007aae:	3720      	adds	r7, #32
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b082      	sub	sp, #8
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007abc:	f000 fd3a 	bl	8008534 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ac0:	4b2a      	ldr	r3, [pc, #168]	; (8007b6c <prvAddNewTaskToReadyList+0xb8>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	4a29      	ldr	r2, [pc, #164]	; (8007b6c <prvAddNewTaskToReadyList+0xb8>)
 8007ac8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007aca:	4b29      	ldr	r3, [pc, #164]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d109      	bne.n	8007ae6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ad2:	4a27      	ldr	r2, [pc, #156]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ad8:	4b24      	ldr	r3, [pc, #144]	; (8007b6c <prvAddNewTaskToReadyList+0xb8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d110      	bne.n	8007b02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ae0:	f000 fabc 	bl	800805c <prvInitialiseTaskLists>
 8007ae4:	e00d      	b.n	8007b02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007ae6:	4b23      	ldr	r3, [pc, #140]	; (8007b74 <prvAddNewTaskToReadyList+0xc0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d109      	bne.n	8007b02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007aee:	4b20      	ldr	r3, [pc, #128]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d802      	bhi.n	8007b02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007afc:	4a1c      	ldr	r2, [pc, #112]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b02:	4b1d      	ldr	r3, [pc, #116]	; (8007b78 <prvAddNewTaskToReadyList+0xc4>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3301      	adds	r3, #1
 8007b08:	4a1b      	ldr	r2, [pc, #108]	; (8007b78 <prvAddNewTaskToReadyList+0xc4>)
 8007b0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	2201      	movs	r2, #1
 8007b12:	409a      	lsls	r2, r3
 8007b14:	4b19      	ldr	r3, [pc, #100]	; (8007b7c <prvAddNewTaskToReadyList+0xc8>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	4a18      	ldr	r2, [pc, #96]	; (8007b7c <prvAddNewTaskToReadyList+0xc8>)
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <prvAddNewTaskToReadyList+0xcc>)
 8007b2c:	441a      	add	r2, r3
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	3304      	adds	r3, #4
 8007b32:	4619      	mov	r1, r3
 8007b34:	4610      	mov	r0, r2
 8007b36:	f7ff fe0d 	bl	8007754 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b3a:	f000 fd2b 	bl	8008594 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b3e:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <prvAddNewTaskToReadyList+0xc0>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00e      	beq.n	8007b64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b46:	4b0a      	ldr	r3, [pc, #40]	; (8007b70 <prvAddNewTaskToReadyList+0xbc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	429a      	cmp	r2, r3
 8007b52:	d207      	bcs.n	8007b64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b54:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <prvAddNewTaskToReadyList+0xd0>)
 8007b56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b5a:	601a      	str	r2, [r3, #0]
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b64:	bf00      	nop
 8007b66:	3708      	adds	r7, #8
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	20000674 	.word	0x20000674
 8007b70:	20000574 	.word	0x20000574
 8007b74:	20000680 	.word	0x20000680
 8007b78:	20000690 	.word	0x20000690
 8007b7c:	2000067c 	.word	0x2000067c
 8007b80:	20000578 	.word	0x20000578
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b90:	2300      	movs	r3, #0
 8007b92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d017      	beq.n	8007bca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b9a:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <vTaskDelay+0x60>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <vTaskDelay+0x30>
	__asm volatile
 8007ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba6:	f383 8811 	msr	BASEPRI, r3
 8007baa:	f3bf 8f6f 	isb	sy
 8007bae:	f3bf 8f4f 	dsb	sy
 8007bb2:	60bb      	str	r3, [r7, #8]
}
 8007bb4:	bf00      	nop
 8007bb6:	e7fe      	b.n	8007bb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bb8:	f000 f87a 	bl	8007cb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fb28 	bl	8008214 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bc4:	f000 f882 	bl	8007ccc <xTaskResumeAll>
 8007bc8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d107      	bne.n	8007be0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007bd0:	4b06      	ldr	r3, [pc, #24]	; (8007bec <vTaskDelay+0x64>)
 8007bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007be0:	bf00      	nop
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	2000069c 	.word	0x2000069c
 8007bec:	e000ed04 	.word	0xe000ed04

08007bf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08a      	sub	sp, #40	; 0x28
 8007bf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007bfe:	463a      	mov	r2, r7
 8007c00:	1d39      	adds	r1, r7, #4
 8007c02:	f107 0308 	add.w	r3, r7, #8
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7f9 f9f0 	bl	8000fec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	9202      	str	r2, [sp, #8]
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	2300      	movs	r3, #0
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	460a      	mov	r2, r1
 8007c1e:	491e      	ldr	r1, [pc, #120]	; (8007c98 <vTaskStartScheduler+0xa8>)
 8007c20:	481e      	ldr	r0, [pc, #120]	; (8007c9c <vTaskStartScheduler+0xac>)
 8007c22:	f7ff fe1e 	bl	8007862 <xTaskCreateStatic>
 8007c26:	4603      	mov	r3, r0
 8007c28:	4a1d      	ldr	r2, [pc, #116]	; (8007ca0 <vTaskStartScheduler+0xb0>)
 8007c2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c2c:	4b1c      	ldr	r3, [pc, #112]	; (8007ca0 <vTaskStartScheduler+0xb0>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d002      	beq.n	8007c3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c34:	2301      	movs	r3, #1
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e001      	b.n	8007c3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d116      	bne.n	8007c72 <vTaskStartScheduler+0x82>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	613b      	str	r3, [r7, #16]
}
 8007c56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c58:	4b12      	ldr	r3, [pc, #72]	; (8007ca4 <vTaskStartScheduler+0xb4>)
 8007c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c60:	4b11      	ldr	r3, [pc, #68]	; (8007ca8 <vTaskStartScheduler+0xb8>)
 8007c62:	2201      	movs	r2, #1
 8007c64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c66:	4b11      	ldr	r3, [pc, #68]	; (8007cac <vTaskStartScheduler+0xbc>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c6c:	f000 fbc0 	bl	80083f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c70:	e00e      	b.n	8007c90 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c78:	d10a      	bne.n	8007c90 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	f383 8811 	msr	BASEPRI, r3
 8007c82:	f3bf 8f6f 	isb	sy
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	60fb      	str	r3, [r7, #12]
}
 8007c8c:	bf00      	nop
 8007c8e:	e7fe      	b.n	8007c8e <vTaskStartScheduler+0x9e>
}
 8007c90:	bf00      	nop
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	0800d3e0 	.word	0x0800d3e0
 8007c9c:	0800802d 	.word	0x0800802d
 8007ca0:	20000698 	.word	0x20000698
 8007ca4:	20000694 	.word	0x20000694
 8007ca8:	20000680 	.word	0x20000680
 8007cac:	20000678 	.word	0x20000678

08007cb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007cb4:	4b04      	ldr	r3, [pc, #16]	; (8007cc8 <vTaskSuspendAll+0x18>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	4a03      	ldr	r2, [pc, #12]	; (8007cc8 <vTaskSuspendAll+0x18>)
 8007cbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007cbe:	bf00      	nop
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr
 8007cc8:	2000069c 	.word	0x2000069c

08007ccc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cda:	4b41      	ldr	r3, [pc, #260]	; (8007de0 <xTaskResumeAll+0x114>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce6:	f383 8811 	msr	BASEPRI, r3
 8007cea:	f3bf 8f6f 	isb	sy
 8007cee:	f3bf 8f4f 	dsb	sy
 8007cf2:	603b      	str	r3, [r7, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	e7fe      	b.n	8007cf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cf8:	f000 fc1c 	bl	8008534 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cfc:	4b38      	ldr	r3, [pc, #224]	; (8007de0 <xTaskResumeAll+0x114>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3b01      	subs	r3, #1
 8007d02:	4a37      	ldr	r2, [pc, #220]	; (8007de0 <xTaskResumeAll+0x114>)
 8007d04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d06:	4b36      	ldr	r3, [pc, #216]	; (8007de0 <xTaskResumeAll+0x114>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d161      	bne.n	8007dd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d0e:	4b35      	ldr	r3, [pc, #212]	; (8007de4 <xTaskResumeAll+0x118>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d05d      	beq.n	8007dd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d16:	e02e      	b.n	8007d76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d18:	4b33      	ldr	r3, [pc, #204]	; (8007de8 <xTaskResumeAll+0x11c>)
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	3318      	adds	r3, #24
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7ff fd72 	bl	800780e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7ff fd6d 	bl	800780e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d38:	2201      	movs	r2, #1
 8007d3a:	409a      	lsls	r2, r3
 8007d3c:	4b2b      	ldr	r3, [pc, #172]	; (8007dec <xTaskResumeAll+0x120>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	4a2a      	ldr	r2, [pc, #168]	; (8007dec <xTaskResumeAll+0x120>)
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	4413      	add	r3, r2
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4a27      	ldr	r2, [pc, #156]	; (8007df0 <xTaskResumeAll+0x124>)
 8007d54:	441a      	add	r2, r3
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3304      	adds	r3, #4
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	f7ff fcf9 	bl	8007754 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d66:	4b23      	ldr	r3, [pc, #140]	; (8007df4 <xTaskResumeAll+0x128>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d302      	bcc.n	8007d76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007d70:	4b21      	ldr	r3, [pc, #132]	; (8007df8 <xTaskResumeAll+0x12c>)
 8007d72:	2201      	movs	r2, #1
 8007d74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d76:	4b1c      	ldr	r3, [pc, #112]	; (8007de8 <xTaskResumeAll+0x11c>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1cc      	bne.n	8007d18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d84:	f000 fa08 	bl	8008198 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d88:	4b1c      	ldr	r3, [pc, #112]	; (8007dfc <xTaskResumeAll+0x130>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d010      	beq.n	8007db6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d94:	f000 f836 	bl	8007e04 <xTaskIncrementTick>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007d9e:	4b16      	ldr	r3, [pc, #88]	; (8007df8 <xTaskResumeAll+0x12c>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1f1      	bne.n	8007d94 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007db0:	4b12      	ldr	r3, [pc, #72]	; (8007dfc <xTaskResumeAll+0x130>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007db6:	4b10      	ldr	r3, [pc, #64]	; (8007df8 <xTaskResumeAll+0x12c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dc2:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <xTaskResumeAll+0x134>)
 8007dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007dd2:	f000 fbdf 	bl	8008594 <vPortExitCritical>

	return xAlreadyYielded;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	2000069c 	.word	0x2000069c
 8007de4:	20000674 	.word	0x20000674
 8007de8:	20000634 	.word	0x20000634
 8007dec:	2000067c 	.word	0x2000067c
 8007df0:	20000578 	.word	0x20000578
 8007df4:	20000574 	.word	0x20000574
 8007df8:	20000688 	.word	0x20000688
 8007dfc:	20000684 	.word	0x20000684
 8007e00:	e000ed04 	.word	0xe000ed04

08007e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e0e:	4b4e      	ldr	r3, [pc, #312]	; (8007f48 <xTaskIncrementTick+0x144>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f040 808e 	bne.w	8007f34 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e18:	4b4c      	ldr	r3, [pc, #304]	; (8007f4c <xTaskIncrementTick+0x148>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3301      	adds	r3, #1
 8007e1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e20:	4a4a      	ldr	r2, [pc, #296]	; (8007f4c <xTaskIncrementTick+0x148>)
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d120      	bne.n	8007e6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e2c:	4b48      	ldr	r3, [pc, #288]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <xTaskIncrementTick+0x48>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	603b      	str	r3, [r7, #0]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <xTaskIncrementTick+0x46>
 8007e4c:	4b40      	ldr	r3, [pc, #256]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	60fb      	str	r3, [r7, #12]
 8007e52:	4b40      	ldr	r3, [pc, #256]	; (8007f54 <xTaskIncrementTick+0x150>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a3e      	ldr	r2, [pc, #248]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	4a3e      	ldr	r2, [pc, #248]	; (8007f54 <xTaskIncrementTick+0x150>)
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6013      	str	r3, [r2, #0]
 8007e60:	4b3d      	ldr	r3, [pc, #244]	; (8007f58 <xTaskIncrementTick+0x154>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	4a3c      	ldr	r2, [pc, #240]	; (8007f58 <xTaskIncrementTick+0x154>)
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	f000 f995 	bl	8008198 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e6e:	4b3b      	ldr	r3, [pc, #236]	; (8007f5c <xTaskIncrementTick+0x158>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	693a      	ldr	r2, [r7, #16]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d348      	bcc.n	8007f0a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e78:	4b35      	ldr	r3, [pc, #212]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d104      	bne.n	8007e8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e82:	4b36      	ldr	r3, [pc, #216]	; (8007f5c <xTaskIncrementTick+0x158>)
 8007e84:	f04f 32ff 	mov.w	r2, #4294967295
 8007e88:	601a      	str	r2, [r3, #0]
					break;
 8007e8a:	e03e      	b.n	8007f0a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e8c:	4b30      	ldr	r3, [pc, #192]	; (8007f50 <xTaskIncrementTick+0x14c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d203      	bcs.n	8007eac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ea4:	4a2d      	ldr	r2, [pc, #180]	; (8007f5c <xTaskIncrementTick+0x158>)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007eaa:	e02e      	b.n	8007f0a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7ff fcac 	bl	800780e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	3318      	adds	r3, #24
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f7ff fca3 	bl	800780e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	2201      	movs	r2, #1
 8007ece:	409a      	lsls	r2, r3
 8007ed0:	4b23      	ldr	r3, [pc, #140]	; (8007f60 <xTaskIncrementTick+0x15c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	4a22      	ldr	r2, [pc, #136]	; (8007f60 <xTaskIncrementTick+0x15c>)
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	009b      	lsls	r3, r3, #2
 8007ee6:	4a1f      	ldr	r2, [pc, #124]	; (8007f64 <xTaskIncrementTick+0x160>)
 8007ee8:	441a      	add	r2, r3
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	3304      	adds	r3, #4
 8007eee:	4619      	mov	r1, r3
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	f7ff fc2f 	bl	8007754 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007efa:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <xTaskIncrementTick+0x164>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d3b9      	bcc.n	8007e78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f04:	2301      	movs	r3, #1
 8007f06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f08:	e7b6      	b.n	8007e78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f0a:	4b17      	ldr	r3, [pc, #92]	; (8007f68 <xTaskIncrementTick+0x164>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f10:	4914      	ldr	r1, [pc, #80]	; (8007f64 <xTaskIncrementTick+0x160>)
 8007f12:	4613      	mov	r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4413      	add	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	440b      	add	r3, r1
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d901      	bls.n	8007f26 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007f22:	2301      	movs	r3, #1
 8007f24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f26:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <xTaskIncrementTick+0x168>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	617b      	str	r3, [r7, #20]
 8007f32:	e004      	b.n	8007f3e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f34:	4b0e      	ldr	r3, [pc, #56]	; (8007f70 <xTaskIncrementTick+0x16c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	4a0d      	ldr	r2, [pc, #52]	; (8007f70 <xTaskIncrementTick+0x16c>)
 8007f3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f3e:	697b      	ldr	r3, [r7, #20]
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	2000069c 	.word	0x2000069c
 8007f4c:	20000678 	.word	0x20000678
 8007f50:	2000062c 	.word	0x2000062c
 8007f54:	20000630 	.word	0x20000630
 8007f58:	2000068c 	.word	0x2000068c
 8007f5c:	20000694 	.word	0x20000694
 8007f60:	2000067c 	.word	0x2000067c
 8007f64:	20000578 	.word	0x20000578
 8007f68:	20000574 	.word	0x20000574
 8007f6c:	20000688 	.word	0x20000688
 8007f70:	20000684 	.word	0x20000684

08007f74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f7a:	4b27      	ldr	r3, [pc, #156]	; (8008018 <vTaskSwitchContext+0xa4>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f82:	4b26      	ldr	r3, [pc, #152]	; (800801c <vTaskSwitchContext+0xa8>)
 8007f84:	2201      	movs	r2, #1
 8007f86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f88:	e03f      	b.n	800800a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007f8a:	4b24      	ldr	r3, [pc, #144]	; (800801c <vTaskSwitchContext+0xa8>)
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f90:	4b23      	ldr	r3, [pc, #140]	; (8008020 <vTaskSwitchContext+0xac>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	fab3 f383 	clz	r3, r3
 8007f9c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f9e:	7afb      	ldrb	r3, [r7, #11]
 8007fa0:	f1c3 031f 	rsb	r3, r3, #31
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	491f      	ldr	r1, [pc, #124]	; (8008024 <vTaskSwitchContext+0xb0>)
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	4613      	mov	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	440b      	add	r3, r1
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	607b      	str	r3, [r7, #4]
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <vTaskSwitchContext+0x5a>
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4a12      	ldr	r2, [pc, #72]	; (8008024 <vTaskSwitchContext+0xb0>)
 8007fdc:	4413      	add	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	685a      	ldr	r2, [r3, #4]
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	605a      	str	r2, [r3, #4]
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	685a      	ldr	r2, [r3, #4]
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	3308      	adds	r3, #8
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d104      	bne.n	8008000 <vTaskSwitchContext+0x8c>
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	685a      	ldr	r2, [r3, #4]
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	605a      	str	r2, [r3, #4]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	4a08      	ldr	r2, [pc, #32]	; (8008028 <vTaskSwitchContext+0xb4>)
 8008008:	6013      	str	r3, [r2, #0]
}
 800800a:	bf00      	nop
 800800c:	371c      	adds	r7, #28
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
 8008016:	bf00      	nop
 8008018:	2000069c 	.word	0x2000069c
 800801c:	20000688 	.word	0x20000688
 8008020:	2000067c 	.word	0x2000067c
 8008024:	20000578 	.word	0x20000578
 8008028:	20000574 	.word	0x20000574

0800802c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008034:	f000 f852 	bl	80080dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008038:	4b06      	ldr	r3, [pc, #24]	; (8008054 <prvIdleTask+0x28>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d9f9      	bls.n	8008034 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008040:	4b05      	ldr	r3, [pc, #20]	; (8008058 <prvIdleTask+0x2c>)
 8008042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008050:	e7f0      	b.n	8008034 <prvIdleTask+0x8>
 8008052:	bf00      	nop
 8008054:	20000578 	.word	0x20000578
 8008058:	e000ed04 	.word	0xe000ed04

0800805c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008062:	2300      	movs	r3, #0
 8008064:	607b      	str	r3, [r7, #4]
 8008066:	e00c      	b.n	8008082 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	4613      	mov	r3, r2
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4413      	add	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4a12      	ldr	r2, [pc, #72]	; (80080bc <prvInitialiseTaskLists+0x60>)
 8008074:	4413      	add	r3, r2
 8008076:	4618      	mov	r0, r3
 8008078:	f7ff fb3f 	bl	80076fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3301      	adds	r3, #1
 8008080:	607b      	str	r3, [r7, #4]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2b06      	cmp	r3, #6
 8008086:	d9ef      	bls.n	8008068 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008088:	480d      	ldr	r0, [pc, #52]	; (80080c0 <prvInitialiseTaskLists+0x64>)
 800808a:	f7ff fb36 	bl	80076fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800808e:	480d      	ldr	r0, [pc, #52]	; (80080c4 <prvInitialiseTaskLists+0x68>)
 8008090:	f7ff fb33 	bl	80076fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008094:	480c      	ldr	r0, [pc, #48]	; (80080c8 <prvInitialiseTaskLists+0x6c>)
 8008096:	f7ff fb30 	bl	80076fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800809a:	480c      	ldr	r0, [pc, #48]	; (80080cc <prvInitialiseTaskLists+0x70>)
 800809c:	f7ff fb2d 	bl	80076fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080a0:	480b      	ldr	r0, [pc, #44]	; (80080d0 <prvInitialiseTaskLists+0x74>)
 80080a2:	f7ff fb2a 	bl	80076fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080a6:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <prvInitialiseTaskLists+0x78>)
 80080a8:	4a05      	ldr	r2, [pc, #20]	; (80080c0 <prvInitialiseTaskLists+0x64>)
 80080aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080ac:	4b0a      	ldr	r3, [pc, #40]	; (80080d8 <prvInitialiseTaskLists+0x7c>)
 80080ae:	4a05      	ldr	r2, [pc, #20]	; (80080c4 <prvInitialiseTaskLists+0x68>)
 80080b0:	601a      	str	r2, [r3, #0]
}
 80080b2:	bf00      	nop
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20000578 	.word	0x20000578
 80080c0:	20000604 	.word	0x20000604
 80080c4:	20000618 	.word	0x20000618
 80080c8:	20000634 	.word	0x20000634
 80080cc:	20000648 	.word	0x20000648
 80080d0:	20000660 	.word	0x20000660
 80080d4:	2000062c 	.word	0x2000062c
 80080d8:	20000630 	.word	0x20000630

080080dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080e2:	e019      	b.n	8008118 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080e4:	f000 fa26 	bl	8008534 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080e8:	4b10      	ldr	r3, [pc, #64]	; (800812c <prvCheckTasksWaitingTermination+0x50>)
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	3304      	adds	r3, #4
 80080f4:	4618      	mov	r0, r3
 80080f6:	f7ff fb8a 	bl	800780e <uxListRemove>
				--uxCurrentNumberOfTasks;
 80080fa:	4b0d      	ldr	r3, [pc, #52]	; (8008130 <prvCheckTasksWaitingTermination+0x54>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3b01      	subs	r3, #1
 8008100:	4a0b      	ldr	r2, [pc, #44]	; (8008130 <prvCheckTasksWaitingTermination+0x54>)
 8008102:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008104:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <prvCheckTasksWaitingTermination+0x58>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3b01      	subs	r3, #1
 800810a:	4a0a      	ldr	r2, [pc, #40]	; (8008134 <prvCheckTasksWaitingTermination+0x58>)
 800810c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800810e:	f000 fa41 	bl	8008594 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f810 	bl	8008138 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008118:	4b06      	ldr	r3, [pc, #24]	; (8008134 <prvCheckTasksWaitingTermination+0x58>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e1      	bne.n	80080e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop
 800812c:	20000648 	.word	0x20000648
 8008130:	20000674 	.word	0x20000674
 8008134:	2000065c 	.word	0x2000065c

08008138 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008146:	2b00      	cmp	r3, #0
 8008148:	d108      	bne.n	800815c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814e:	4618      	mov	r0, r3
 8008150:	f000 fb9e 	bl	8008890 <vPortFree>
				vPortFree( pxTCB );
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fb9b 	bl	8008890 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800815a:	e018      	b.n	800818e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008162:	2b01      	cmp	r3, #1
 8008164:	d103      	bne.n	800816e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fb92 	bl	8008890 <vPortFree>
	}
 800816c:	e00f      	b.n	800818e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008174:	2b02      	cmp	r3, #2
 8008176:	d00a      	beq.n	800818e <prvDeleteTCB+0x56>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	60fb      	str	r3, [r7, #12]
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <prvDeleteTCB+0x54>
	}
 800818e:	bf00      	nop
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800819e:	4b0c      	ldr	r3, [pc, #48]	; (80081d0 <prvResetNextTaskUnblockTime+0x38>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d104      	bne.n	80081b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081a8:	4b0a      	ldr	r3, [pc, #40]	; (80081d4 <prvResetNextTaskUnblockTime+0x3c>)
 80081aa:	f04f 32ff 	mov.w	r2, #4294967295
 80081ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081b0:	e008      	b.n	80081c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b2:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <prvResetNextTaskUnblockTime+0x38>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	4a04      	ldr	r2, [pc, #16]	; (80081d4 <prvResetNextTaskUnblockTime+0x3c>)
 80081c2:	6013      	str	r3, [r2, #0]
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr
 80081d0:	2000062c 	.word	0x2000062c
 80081d4:	20000694 	.word	0x20000694

080081d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081de:	4b0b      	ldr	r3, [pc, #44]	; (800820c <xTaskGetSchedulerState+0x34>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d102      	bne.n	80081ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081e6:	2301      	movs	r3, #1
 80081e8:	607b      	str	r3, [r7, #4]
 80081ea:	e008      	b.n	80081fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ec:	4b08      	ldr	r3, [pc, #32]	; (8008210 <xTaskGetSchedulerState+0x38>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d102      	bne.n	80081fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081f4:	2302      	movs	r3, #2
 80081f6:	607b      	str	r3, [r7, #4]
 80081f8:	e001      	b.n	80081fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081fa:	2300      	movs	r3, #0
 80081fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081fe:	687b      	ldr	r3, [r7, #4]
	}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr
 800820c:	20000680 	.word	0x20000680
 8008210:	2000069c 	.word	0x2000069c

08008214 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800821e:	4b29      	ldr	r3, [pc, #164]	; (80082c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008224:	4b28      	ldr	r3, [pc, #160]	; (80082c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3304      	adds	r3, #4
 800822a:	4618      	mov	r0, r3
 800822c:	f7ff faef 	bl	800780e <uxListRemove>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10b      	bne.n	800824e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008236:	4b24      	ldr	r3, [pc, #144]	; (80082c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823c:	2201      	movs	r2, #1
 800823e:	fa02 f303 	lsl.w	r3, r2, r3
 8008242:	43da      	mvns	r2, r3
 8008244:	4b21      	ldr	r3, [pc, #132]	; (80082cc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4013      	ands	r3, r2
 800824a:	4a20      	ldr	r2, [pc, #128]	; (80082cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800824c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008254:	d10a      	bne.n	800826c <prvAddCurrentTaskToDelayedList+0x58>
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d007      	beq.n	800826c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800825c:	4b1a      	ldr	r3, [pc, #104]	; (80082c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3304      	adds	r3, #4
 8008262:	4619      	mov	r1, r3
 8008264:	481a      	ldr	r0, [pc, #104]	; (80082d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008266:	f7ff fa75 	bl	8007754 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800826a:	e026      	b.n	80082ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4413      	add	r3, r2
 8008272:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008274:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	429a      	cmp	r2, r3
 8008282:	d209      	bcs.n	8008298 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008284:	4b13      	ldr	r3, [pc, #76]	; (80082d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	4b0f      	ldr	r3, [pc, #60]	; (80082c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3304      	adds	r3, #4
 800828e:	4619      	mov	r1, r3
 8008290:	4610      	mov	r0, r2
 8008292:	f7ff fa83 	bl	800779c <vListInsert>
}
 8008296:	e010      	b.n	80082ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008298:	4b0f      	ldr	r3, [pc, #60]	; (80082d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3304      	adds	r3, #4
 80082a2:	4619      	mov	r1, r3
 80082a4:	4610      	mov	r0, r2
 80082a6:	f7ff fa79 	bl	800779c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082aa:	4b0c      	ldr	r3, [pc, #48]	; (80082dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d202      	bcs.n	80082ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082b4:	4a09      	ldr	r2, [pc, #36]	; (80082dc <prvAddCurrentTaskToDelayedList+0xc8>)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	6013      	str	r3, [r2, #0]
}
 80082ba:	bf00      	nop
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	20000678 	.word	0x20000678
 80082c8:	20000574 	.word	0x20000574
 80082cc:	2000067c 	.word	0x2000067c
 80082d0:	20000660 	.word	0x20000660
 80082d4:	20000630 	.word	0x20000630
 80082d8:	2000062c 	.word	0x2000062c
 80082dc:	20000694 	.word	0x20000694

080082e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	3b04      	subs	r3, #4
 80082f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80082f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3b04      	subs	r3, #4
 80082fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f023 0201 	bic.w	r2, r3, #1
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3b04      	subs	r3, #4
 800830e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008310:	4a0c      	ldr	r2, [pc, #48]	; (8008344 <pxPortInitialiseStack+0x64>)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	3b14      	subs	r3, #20
 800831a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3b04      	subs	r3, #4
 8008326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f06f 0202 	mvn.w	r2, #2
 800832e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3b20      	subs	r3, #32
 8008334:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008336:	68fb      	ldr	r3, [r7, #12]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	08008349 	.word	0x08008349

08008348 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008352:	4b12      	ldr	r3, [pc, #72]	; (800839c <prvTaskExitError+0x54>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835a:	d00a      	beq.n	8008372 <prvTaskExitError+0x2a>
	__asm volatile
 800835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008360:	f383 8811 	msr	BASEPRI, r3
 8008364:	f3bf 8f6f 	isb	sy
 8008368:	f3bf 8f4f 	dsb	sy
 800836c:	60fb      	str	r3, [r7, #12]
}
 800836e:	bf00      	nop
 8008370:	e7fe      	b.n	8008370 <prvTaskExitError+0x28>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	60bb      	str	r3, [r7, #8]
}
 8008384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008386:	bf00      	nop
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0fc      	beq.n	8008388 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800838e:	bf00      	nop
 8008390:	bf00      	nop
 8008392:	3714      	adds	r7, #20
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	2000000c 	.word	0x2000000c

080083a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083a0:	4b07      	ldr	r3, [pc, #28]	; (80083c0 <pxCurrentTCBConst2>)
 80083a2:	6819      	ldr	r1, [r3, #0]
 80083a4:	6808      	ldr	r0, [r1, #0]
 80083a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083aa:	f380 8809 	msr	PSP, r0
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f04f 0000 	mov.w	r0, #0
 80083b6:	f380 8811 	msr	BASEPRI, r0
 80083ba:	4770      	bx	lr
 80083bc:	f3af 8000 	nop.w

080083c0 <pxCurrentTCBConst2>:
 80083c0:	20000574 	.word	0x20000574
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083c4:	bf00      	nop
 80083c6:	bf00      	nop

080083c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083c8:	4808      	ldr	r0, [pc, #32]	; (80083ec <prvPortStartFirstTask+0x24>)
 80083ca:	6800      	ldr	r0, [r0, #0]
 80083cc:	6800      	ldr	r0, [r0, #0]
 80083ce:	f380 8808 	msr	MSP, r0
 80083d2:	f04f 0000 	mov.w	r0, #0
 80083d6:	f380 8814 	msr	CONTROL, r0
 80083da:	b662      	cpsie	i
 80083dc:	b661      	cpsie	f
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	df00      	svc	0
 80083e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083ea:	bf00      	nop
 80083ec:	e000ed08 	.word	0xe000ed08

080083f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80083f6:	4b46      	ldr	r3, [pc, #280]	; (8008510 <xPortStartScheduler+0x120>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a46      	ldr	r2, [pc, #280]	; (8008514 <xPortStartScheduler+0x124>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d10a      	bne.n	8008416 <xPortStartScheduler+0x26>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	613b      	str	r3, [r7, #16]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008416:	4b3e      	ldr	r3, [pc, #248]	; (8008510 <xPortStartScheduler+0x120>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a3f      	ldr	r2, [pc, #252]	; (8008518 <xPortStartScheduler+0x128>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d10a      	bne.n	8008436 <xPortStartScheduler+0x46>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	60fb      	str	r3, [r7, #12]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008436:	4b39      	ldr	r3, [pc, #228]	; (800851c <xPortStartScheduler+0x12c>)
 8008438:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	b2db      	uxtb	r3, r3
 8008440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	22ff      	movs	r2, #255	; 0xff
 8008446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	b2db      	uxtb	r3, r3
 800844e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008450:	78fb      	ldrb	r3, [r7, #3]
 8008452:	b2db      	uxtb	r3, r3
 8008454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008458:	b2da      	uxtb	r2, r3
 800845a:	4b31      	ldr	r3, [pc, #196]	; (8008520 <xPortStartScheduler+0x130>)
 800845c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800845e:	4b31      	ldr	r3, [pc, #196]	; (8008524 <xPortStartScheduler+0x134>)
 8008460:	2207      	movs	r2, #7
 8008462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008464:	e009      	b.n	800847a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008466:	4b2f      	ldr	r3, [pc, #188]	; (8008524 <xPortStartScheduler+0x134>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3b01      	subs	r3, #1
 800846c:	4a2d      	ldr	r2, [pc, #180]	; (8008524 <xPortStartScheduler+0x134>)
 800846e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	b2db      	uxtb	r3, r3
 8008474:	005b      	lsls	r3, r3, #1
 8008476:	b2db      	uxtb	r3, r3
 8008478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008482:	2b80      	cmp	r3, #128	; 0x80
 8008484:	d0ef      	beq.n	8008466 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008486:	4b27      	ldr	r3, [pc, #156]	; (8008524 <xPortStartScheduler+0x134>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f1c3 0307 	rsb	r3, r3, #7
 800848e:	2b04      	cmp	r3, #4
 8008490:	d00a      	beq.n	80084a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	60bb      	str	r3, [r7, #8]
}
 80084a4:	bf00      	nop
 80084a6:	e7fe      	b.n	80084a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084a8:	4b1e      	ldr	r3, [pc, #120]	; (8008524 <xPortStartScheduler+0x134>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	021b      	lsls	r3, r3, #8
 80084ae:	4a1d      	ldr	r2, [pc, #116]	; (8008524 <xPortStartScheduler+0x134>)
 80084b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084b2:	4b1c      	ldr	r3, [pc, #112]	; (8008524 <xPortStartScheduler+0x134>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084ba:	4a1a      	ldr	r2, [pc, #104]	; (8008524 <xPortStartScheduler+0x134>)
 80084bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084c6:	4b18      	ldr	r3, [pc, #96]	; (8008528 <xPortStartScheduler+0x138>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a17      	ldr	r2, [pc, #92]	; (8008528 <xPortStartScheduler+0x138>)
 80084cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084d2:	4b15      	ldr	r3, [pc, #84]	; (8008528 <xPortStartScheduler+0x138>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a14      	ldr	r2, [pc, #80]	; (8008528 <xPortStartScheduler+0x138>)
 80084d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084de:	f000 f8dd 	bl	800869c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084e2:	4b12      	ldr	r3, [pc, #72]	; (800852c <xPortStartScheduler+0x13c>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084e8:	f000 f8fc 	bl	80086e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084ec:	4b10      	ldr	r3, [pc, #64]	; (8008530 <xPortStartScheduler+0x140>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a0f      	ldr	r2, [pc, #60]	; (8008530 <xPortStartScheduler+0x140>)
 80084f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80084f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084f8:	f7ff ff66 	bl	80083c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084fc:	f7ff fd3a 	bl	8007f74 <vTaskSwitchContext>
	prvTaskExitError();
 8008500:	f7ff ff22 	bl	8008348 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	3718      	adds	r7, #24
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	e000ed00 	.word	0xe000ed00
 8008514:	410fc271 	.word	0x410fc271
 8008518:	410fc270 	.word	0x410fc270
 800851c:	e000e400 	.word	0xe000e400
 8008520:	200006a0 	.word	0x200006a0
 8008524:	200006a4 	.word	0x200006a4
 8008528:	e000ed20 	.word	0xe000ed20
 800852c:	2000000c 	.word	0x2000000c
 8008530:	e000ef34 	.word	0xe000ef34

08008534 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
	__asm volatile
 800853a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853e:	f383 8811 	msr	BASEPRI, r3
 8008542:	f3bf 8f6f 	isb	sy
 8008546:	f3bf 8f4f 	dsb	sy
 800854a:	607b      	str	r3, [r7, #4]
}
 800854c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800854e:	4b0f      	ldr	r3, [pc, #60]	; (800858c <vPortEnterCritical+0x58>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	3301      	adds	r3, #1
 8008554:	4a0d      	ldr	r2, [pc, #52]	; (800858c <vPortEnterCritical+0x58>)
 8008556:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008558:	4b0c      	ldr	r3, [pc, #48]	; (800858c <vPortEnterCritical+0x58>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d10f      	bne.n	8008580 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008560:	4b0b      	ldr	r3, [pc, #44]	; (8008590 <vPortEnterCritical+0x5c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <vPortEnterCritical+0x4c>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	603b      	str	r3, [r7, #0]
}
 800857c:	bf00      	nop
 800857e:	e7fe      	b.n	800857e <vPortEnterCritical+0x4a>
	}
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	2000000c 	.word	0x2000000c
 8008590:	e000ed04 	.word	0xe000ed04

08008594 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008594:	b480      	push	{r7}
 8008596:	b083      	sub	sp, #12
 8008598:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800859a:	4b12      	ldr	r3, [pc, #72]	; (80085e4 <vPortExitCritical+0x50>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d10a      	bne.n	80085b8 <vPortExitCritical+0x24>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	f383 8811 	msr	BASEPRI, r3
 80085aa:	f3bf 8f6f 	isb	sy
 80085ae:	f3bf 8f4f 	dsb	sy
 80085b2:	607b      	str	r3, [r7, #4]
}
 80085b4:	bf00      	nop
 80085b6:	e7fe      	b.n	80085b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085b8:	4b0a      	ldr	r3, [pc, #40]	; (80085e4 <vPortExitCritical+0x50>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3b01      	subs	r3, #1
 80085be:	4a09      	ldr	r2, [pc, #36]	; (80085e4 <vPortExitCritical+0x50>)
 80085c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085c2:	4b08      	ldr	r3, [pc, #32]	; (80085e4 <vPortExitCritical+0x50>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d105      	bne.n	80085d6 <vPortExitCritical+0x42>
 80085ca:	2300      	movs	r3, #0
 80085cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085d6:	bf00      	nop
 80085d8:	370c      	adds	r7, #12
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr
 80085e2:	bf00      	nop
 80085e4:	2000000c 	.word	0x2000000c
	...

080085f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085f0:	f3ef 8009 	mrs	r0, PSP
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	4b15      	ldr	r3, [pc, #84]	; (8008650 <pxCurrentTCBConst>)
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	f01e 0f10 	tst.w	lr, #16
 8008600:	bf08      	it	eq
 8008602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860a:	6010      	str	r0, [r2, #0]
 800860c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008614:	f380 8811 	msr	BASEPRI, r0
 8008618:	f3bf 8f4f 	dsb	sy
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f7ff fca8 	bl	8007f74 <vTaskSwitchContext>
 8008624:	f04f 0000 	mov.w	r0, #0
 8008628:	f380 8811 	msr	BASEPRI, r0
 800862c:	bc09      	pop	{r0, r3}
 800862e:	6819      	ldr	r1, [r3, #0]
 8008630:	6808      	ldr	r0, [r1, #0]
 8008632:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008636:	f01e 0f10 	tst.w	lr, #16
 800863a:	bf08      	it	eq
 800863c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008640:	f380 8809 	msr	PSP, r0
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	4770      	bx	lr
 800864a:	bf00      	nop
 800864c:	f3af 8000 	nop.w

08008650 <pxCurrentTCBConst>:
 8008650:	20000574 	.word	0x20000574
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008654:	bf00      	nop
 8008656:	bf00      	nop

08008658 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b082      	sub	sp, #8
 800865c:	af00      	add	r7, sp, #0
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	607b      	str	r3, [r7, #4]
}
 8008670:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008672:	f7ff fbc7 	bl	8007e04 <xTaskIncrementTick>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800867c:	4b06      	ldr	r3, [pc, #24]	; (8008698 <xPortSysTickHandler+0x40>)
 800867e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	2300      	movs	r3, #0
 8008686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	f383 8811 	msr	BASEPRI, r3
}
 800868e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008690:	bf00      	nop
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	e000ed04 	.word	0xe000ed04

0800869c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800869c:	b480      	push	{r7}
 800869e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086a0:	4b0b      	ldr	r3, [pc, #44]	; (80086d0 <vPortSetupTimerInterrupt+0x34>)
 80086a2:	2200      	movs	r2, #0
 80086a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086a6:	4b0b      	ldr	r3, [pc, #44]	; (80086d4 <vPortSetupTimerInterrupt+0x38>)
 80086a8:	2200      	movs	r2, #0
 80086aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086ac:	4b0a      	ldr	r3, [pc, #40]	; (80086d8 <vPortSetupTimerInterrupt+0x3c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a0a      	ldr	r2, [pc, #40]	; (80086dc <vPortSetupTimerInterrupt+0x40>)
 80086b2:	fba2 2303 	umull	r2, r3, r2, r3
 80086b6:	099b      	lsrs	r3, r3, #6
 80086b8:	4a09      	ldr	r2, [pc, #36]	; (80086e0 <vPortSetupTimerInterrupt+0x44>)
 80086ba:	3b01      	subs	r3, #1
 80086bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086be:	4b04      	ldr	r3, [pc, #16]	; (80086d0 <vPortSetupTimerInterrupt+0x34>)
 80086c0:	2207      	movs	r2, #7
 80086c2:	601a      	str	r2, [r3, #0]
}
 80086c4:	bf00      	nop
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
 80086ce:	bf00      	nop
 80086d0:	e000e010 	.word	0xe000e010
 80086d4:	e000e018 	.word	0xe000e018
 80086d8:	20000000 	.word	0x20000000
 80086dc:	10624dd3 	.word	0x10624dd3
 80086e0:	e000e014 	.word	0xe000e014

080086e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80086f4 <vPortEnableVFP+0x10>
 80086e8:	6801      	ldr	r1, [r0, #0]
 80086ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ee:	6001      	str	r1, [r0, #0]
 80086f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80086f2:	bf00      	nop
 80086f4:	e000ed88 	.word	0xe000ed88

080086f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08a      	sub	sp, #40	; 0x28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008700:	2300      	movs	r3, #0
 8008702:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008704:	f7ff fad4 	bl	8007cb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008708:	4b5b      	ldr	r3, [pc, #364]	; (8008878 <pvPortMalloc+0x180>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d101      	bne.n	8008714 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008710:	f000 f920 	bl	8008954 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008714:	4b59      	ldr	r3, [pc, #356]	; (800887c <pvPortMalloc+0x184>)
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4013      	ands	r3, r2
 800871c:	2b00      	cmp	r3, #0
 800871e:	f040 8093 	bne.w	8008848 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d01d      	beq.n	8008764 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008728:	2208      	movs	r2, #8
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f003 0307 	and.w	r3, r3, #7
 8008736:	2b00      	cmp	r3, #0
 8008738:	d014      	beq.n	8008764 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f023 0307 	bic.w	r3, r3, #7
 8008740:	3308      	adds	r3, #8
 8008742:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00a      	beq.n	8008764 <pvPortMalloc+0x6c>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	617b      	str	r3, [r7, #20]
}
 8008760:	bf00      	nop
 8008762:	e7fe      	b.n	8008762 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d06e      	beq.n	8008848 <pvPortMalloc+0x150>
 800876a:	4b45      	ldr	r3, [pc, #276]	; (8008880 <pvPortMalloc+0x188>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	687a      	ldr	r2, [r7, #4]
 8008770:	429a      	cmp	r2, r3
 8008772:	d869      	bhi.n	8008848 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008774:	4b43      	ldr	r3, [pc, #268]	; (8008884 <pvPortMalloc+0x18c>)
 8008776:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008778:	4b42      	ldr	r3, [pc, #264]	; (8008884 <pvPortMalloc+0x18c>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800877e:	e004      	b.n	800878a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	429a      	cmp	r2, r3
 8008792:	d903      	bls.n	800879c <pvPortMalloc+0xa4>
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1f1      	bne.n	8008780 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800879c:	4b36      	ldr	r3, [pc, #216]	; (8008878 <pvPortMalloc+0x180>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d050      	beq.n	8008848 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2208      	movs	r2, #8
 80087ac:	4413      	add	r3, r2
 80087ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	2308      	movs	r3, #8
 80087c2:	005b      	lsls	r3, r3, #1
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d91f      	bls.n	8008808 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	f003 0307 	and.w	r3, r3, #7
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d00a      	beq.n	80087f0 <pvPortMalloc+0xf8>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	613b      	str	r3, [r7, #16]
}
 80087ec:	bf00      	nop
 80087ee:	e7fe      	b.n	80087ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80087f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	1ad2      	subs	r2, r2, r3
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008802:	69b8      	ldr	r0, [r7, #24]
 8008804:	f000 f908 	bl	8008a18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008808:	4b1d      	ldr	r3, [pc, #116]	; (8008880 <pvPortMalloc+0x188>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	4a1b      	ldr	r2, [pc, #108]	; (8008880 <pvPortMalloc+0x188>)
 8008814:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008816:	4b1a      	ldr	r3, [pc, #104]	; (8008880 <pvPortMalloc+0x188>)
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	4b1b      	ldr	r3, [pc, #108]	; (8008888 <pvPortMalloc+0x190>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d203      	bcs.n	800882a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008822:	4b17      	ldr	r3, [pc, #92]	; (8008880 <pvPortMalloc+0x188>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a18      	ldr	r2, [pc, #96]	; (8008888 <pvPortMalloc+0x190>)
 8008828:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	4b13      	ldr	r3, [pc, #76]	; (800887c <pvPortMalloc+0x184>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	431a      	orrs	r2, r3
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800883e:	4b13      	ldr	r3, [pc, #76]	; (800888c <pvPortMalloc+0x194>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3301      	adds	r3, #1
 8008844:	4a11      	ldr	r2, [pc, #68]	; (800888c <pvPortMalloc+0x194>)
 8008846:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008848:	f7ff fa40 	bl	8007ccc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	f003 0307 	and.w	r3, r3, #7
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <pvPortMalloc+0x174>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	60fb      	str	r3, [r7, #12]
}
 8008868:	bf00      	nop
 800886a:	e7fe      	b.n	800886a <pvPortMalloc+0x172>
	return pvReturn;
 800886c:	69fb      	ldr	r3, [r7, #28]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3728      	adds	r7, #40	; 0x28
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	200042b0 	.word	0x200042b0
 800887c:	200042c4 	.word	0x200042c4
 8008880:	200042b4 	.word	0x200042b4
 8008884:	200042a8 	.word	0x200042a8
 8008888:	200042b8 	.word	0x200042b8
 800888c:	200042bc 	.word	0x200042bc

08008890 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b086      	sub	sp, #24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d04d      	beq.n	800893e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088a2:	2308      	movs	r3, #8
 80088a4:	425b      	negs	r3, r3
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	4413      	add	r3, r2
 80088aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	685a      	ldr	r2, [r3, #4]
 80088b4:	4b24      	ldr	r3, [pc, #144]	; (8008948 <vPortFree+0xb8>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4013      	ands	r3, r2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10a      	bne.n	80088d4 <vPortFree+0x44>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	60fb      	str	r3, [r7, #12]
}
 80088d0:	bf00      	nop
 80088d2:	e7fe      	b.n	80088d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d00a      	beq.n	80088f2 <vPortFree+0x62>
	__asm volatile
 80088dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e0:	f383 8811 	msr	BASEPRI, r3
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	f3bf 8f4f 	dsb	sy
 80088ec:	60bb      	str	r3, [r7, #8]
}
 80088ee:	bf00      	nop
 80088f0:	e7fe      	b.n	80088f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	4b14      	ldr	r3, [pc, #80]	; (8008948 <vPortFree+0xb8>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4013      	ands	r3, r2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01e      	beq.n	800893e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d11a      	bne.n	800893e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	685a      	ldr	r2, [r3, #4]
 800890c:	4b0e      	ldr	r3, [pc, #56]	; (8008948 <vPortFree+0xb8>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	43db      	mvns	r3, r3
 8008912:	401a      	ands	r2, r3
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008918:	f7ff f9ca 	bl	8007cb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	685a      	ldr	r2, [r3, #4]
 8008920:	4b0a      	ldr	r3, [pc, #40]	; (800894c <vPortFree+0xbc>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4413      	add	r3, r2
 8008926:	4a09      	ldr	r2, [pc, #36]	; (800894c <vPortFree+0xbc>)
 8008928:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800892a:	6938      	ldr	r0, [r7, #16]
 800892c:	f000 f874 	bl	8008a18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008930:	4b07      	ldr	r3, [pc, #28]	; (8008950 <vPortFree+0xc0>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	4a06      	ldr	r2, [pc, #24]	; (8008950 <vPortFree+0xc0>)
 8008938:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800893a:	f7ff f9c7 	bl	8007ccc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800893e:	bf00      	nop
 8008940:	3718      	adds	r7, #24
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}
 8008946:	bf00      	nop
 8008948:	200042c4 	.word	0x200042c4
 800894c:	200042b4 	.word	0x200042b4
 8008950:	200042c0 	.word	0x200042c0

08008954 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800895a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800895e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008960:	4b27      	ldr	r3, [pc, #156]	; (8008a00 <prvHeapInit+0xac>)
 8008962:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f003 0307 	and.w	r3, r3, #7
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00c      	beq.n	8008988 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3307      	adds	r3, #7
 8008972:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 0307 	bic.w	r3, r3, #7
 800897a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	4a1f      	ldr	r2, [pc, #124]	; (8008a00 <prvHeapInit+0xac>)
 8008984:	4413      	add	r3, r2
 8008986:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800898c:	4a1d      	ldr	r2, [pc, #116]	; (8008a04 <prvHeapInit+0xb0>)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008992:	4b1c      	ldr	r3, [pc, #112]	; (8008a04 <prvHeapInit+0xb0>)
 8008994:	2200      	movs	r2, #0
 8008996:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	4413      	add	r3, r2
 800899e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089a0:	2208      	movs	r2, #8
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	1a9b      	subs	r3, r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f023 0307 	bic.w	r3, r3, #7
 80089ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4a15      	ldr	r2, [pc, #84]	; (8008a08 <prvHeapInit+0xb4>)
 80089b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089b6:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <prvHeapInit+0xb4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2200      	movs	r2, #0
 80089bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089be:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <prvHeapInit+0xb4>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2200      	movs	r2, #0
 80089c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	1ad2      	subs	r2, r2, r3
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089d4:	4b0c      	ldr	r3, [pc, #48]	; (8008a08 <prvHeapInit+0xb4>)
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	4a0a      	ldr	r2, [pc, #40]	; (8008a0c <prvHeapInit+0xb8>)
 80089e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	4a09      	ldr	r2, [pc, #36]	; (8008a10 <prvHeapInit+0xbc>)
 80089ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089ec:	4b09      	ldr	r3, [pc, #36]	; (8008a14 <prvHeapInit+0xc0>)
 80089ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80089f2:	601a      	str	r2, [r3, #0]
}
 80089f4:	bf00      	nop
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr
 8008a00:	200006a8 	.word	0x200006a8
 8008a04:	200042a8 	.word	0x200042a8
 8008a08:	200042b0 	.word	0x200042b0
 8008a0c:	200042b8 	.word	0x200042b8
 8008a10:	200042b4 	.word	0x200042b4
 8008a14:	200042c4 	.word	0x200042c4

08008a18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a20:	4b28      	ldr	r3, [pc, #160]	; (8008ac4 <prvInsertBlockIntoFreeList+0xac>)
 8008a22:	60fb      	str	r3, [r7, #12]
 8008a24:	e002      	b.n	8008a2c <prvInsertBlockIntoFreeList+0x14>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d8f7      	bhi.n	8008a26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	4413      	add	r3, r2
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d108      	bne.n	8008a5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	441a      	add	r2, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	68ba      	ldr	r2, [r7, #8]
 8008a64:	441a      	add	r2, r3
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d118      	bne.n	8008aa0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	4b15      	ldr	r3, [pc, #84]	; (8008ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d00d      	beq.n	8008a96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	441a      	add	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	601a      	str	r2, [r3, #0]
 8008a94:	e008      	b.n	8008aa8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008a96:	4b0c      	ldr	r3, [pc, #48]	; (8008ac8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	601a      	str	r2, [r3, #0]
 8008a9e:	e003      	b.n	8008aa8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d002      	beq.n	8008ab6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ab6:	bf00      	nop
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	200042a8 	.word	0x200042a8
 8008ac8:	200042b0 	.word	0x200042b0

08008acc <__errno>:
 8008acc:	4b01      	ldr	r3, [pc, #4]	; (8008ad4 <__errno+0x8>)
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20000010 	.word	0x20000010

08008ad8 <__libc_init_array>:
 8008ad8:	b570      	push	{r4, r5, r6, lr}
 8008ada:	4d0d      	ldr	r5, [pc, #52]	; (8008b10 <__libc_init_array+0x38>)
 8008adc:	4c0d      	ldr	r4, [pc, #52]	; (8008b14 <__libc_init_array+0x3c>)
 8008ade:	1b64      	subs	r4, r4, r5
 8008ae0:	10a4      	asrs	r4, r4, #2
 8008ae2:	2600      	movs	r6, #0
 8008ae4:	42a6      	cmp	r6, r4
 8008ae6:	d109      	bne.n	8008afc <__libc_init_array+0x24>
 8008ae8:	4d0b      	ldr	r5, [pc, #44]	; (8008b18 <__libc_init_array+0x40>)
 8008aea:	4c0c      	ldr	r4, [pc, #48]	; (8008b1c <__libc_init_array+0x44>)
 8008aec:	f004 fc48 	bl	800d380 <_init>
 8008af0:	1b64      	subs	r4, r4, r5
 8008af2:	10a4      	asrs	r4, r4, #2
 8008af4:	2600      	movs	r6, #0
 8008af6:	42a6      	cmp	r6, r4
 8008af8:	d105      	bne.n	8008b06 <__libc_init_array+0x2e>
 8008afa:	bd70      	pop	{r4, r5, r6, pc}
 8008afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b00:	4798      	blx	r3
 8008b02:	3601      	adds	r6, #1
 8008b04:	e7ee      	b.n	8008ae4 <__libc_init_array+0xc>
 8008b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b0a:	4798      	blx	r3
 8008b0c:	3601      	adds	r6, #1
 8008b0e:	e7f2      	b.n	8008af6 <__libc_init_array+0x1e>
 8008b10:	0800d9bc 	.word	0x0800d9bc
 8008b14:	0800d9bc 	.word	0x0800d9bc
 8008b18:	0800d9bc 	.word	0x0800d9bc
 8008b1c:	0800d9c0 	.word	0x0800d9c0

08008b20 <memcpy>:
 8008b20:	440a      	add	r2, r1
 8008b22:	4291      	cmp	r1, r2
 8008b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b28:	d100      	bne.n	8008b2c <memcpy+0xc>
 8008b2a:	4770      	bx	lr
 8008b2c:	b510      	push	{r4, lr}
 8008b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b36:	4291      	cmp	r1, r2
 8008b38:	d1f9      	bne.n	8008b2e <memcpy+0xe>
 8008b3a:	bd10      	pop	{r4, pc}

08008b3c <memset>:
 8008b3c:	4402      	add	r2, r0
 8008b3e:	4603      	mov	r3, r0
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d100      	bne.n	8008b46 <memset+0xa>
 8008b44:	4770      	bx	lr
 8008b46:	f803 1b01 	strb.w	r1, [r3], #1
 8008b4a:	e7f9      	b.n	8008b40 <memset+0x4>

08008b4c <__cvt>:
 8008b4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b50:	ec55 4b10 	vmov	r4, r5, d0
 8008b54:	2d00      	cmp	r5, #0
 8008b56:	460e      	mov	r6, r1
 8008b58:	4619      	mov	r1, r3
 8008b5a:	462b      	mov	r3, r5
 8008b5c:	bfbb      	ittet	lt
 8008b5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b62:	461d      	movlt	r5, r3
 8008b64:	2300      	movge	r3, #0
 8008b66:	232d      	movlt	r3, #45	; 0x2d
 8008b68:	700b      	strb	r3, [r1, #0]
 8008b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b70:	4691      	mov	r9, r2
 8008b72:	f023 0820 	bic.w	r8, r3, #32
 8008b76:	bfbc      	itt	lt
 8008b78:	4622      	movlt	r2, r4
 8008b7a:	4614      	movlt	r4, r2
 8008b7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b80:	d005      	beq.n	8008b8e <__cvt+0x42>
 8008b82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b86:	d100      	bne.n	8008b8a <__cvt+0x3e>
 8008b88:	3601      	adds	r6, #1
 8008b8a:	2102      	movs	r1, #2
 8008b8c:	e000      	b.n	8008b90 <__cvt+0x44>
 8008b8e:	2103      	movs	r1, #3
 8008b90:	ab03      	add	r3, sp, #12
 8008b92:	9301      	str	r3, [sp, #4]
 8008b94:	ab02      	add	r3, sp, #8
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	ec45 4b10 	vmov	d0, r4, r5
 8008b9c:	4653      	mov	r3, sl
 8008b9e:	4632      	mov	r2, r6
 8008ba0:	f001 fdb6 	bl	800a710 <_dtoa_r>
 8008ba4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ba8:	4607      	mov	r7, r0
 8008baa:	d102      	bne.n	8008bb2 <__cvt+0x66>
 8008bac:	f019 0f01 	tst.w	r9, #1
 8008bb0:	d022      	beq.n	8008bf8 <__cvt+0xac>
 8008bb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bb6:	eb07 0906 	add.w	r9, r7, r6
 8008bba:	d110      	bne.n	8008bde <__cvt+0x92>
 8008bbc:	783b      	ldrb	r3, [r7, #0]
 8008bbe:	2b30      	cmp	r3, #48	; 0x30
 8008bc0:	d10a      	bne.n	8008bd8 <__cvt+0x8c>
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	4629      	mov	r1, r5
 8008bca:	f7f7 ff7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bce:	b918      	cbnz	r0, 8008bd8 <__cvt+0x8c>
 8008bd0:	f1c6 0601 	rsb	r6, r6, #1
 8008bd4:	f8ca 6000 	str.w	r6, [sl]
 8008bd8:	f8da 3000 	ldr.w	r3, [sl]
 8008bdc:	4499      	add	r9, r3
 8008bde:	2200      	movs	r2, #0
 8008be0:	2300      	movs	r3, #0
 8008be2:	4620      	mov	r0, r4
 8008be4:	4629      	mov	r1, r5
 8008be6:	f7f7 ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bea:	b108      	cbz	r0, 8008bf0 <__cvt+0xa4>
 8008bec:	f8cd 900c 	str.w	r9, [sp, #12]
 8008bf0:	2230      	movs	r2, #48	; 0x30
 8008bf2:	9b03      	ldr	r3, [sp, #12]
 8008bf4:	454b      	cmp	r3, r9
 8008bf6:	d307      	bcc.n	8008c08 <__cvt+0xbc>
 8008bf8:	9b03      	ldr	r3, [sp, #12]
 8008bfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bfc:	1bdb      	subs	r3, r3, r7
 8008bfe:	4638      	mov	r0, r7
 8008c00:	6013      	str	r3, [r2, #0]
 8008c02:	b004      	add	sp, #16
 8008c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c08:	1c59      	adds	r1, r3, #1
 8008c0a:	9103      	str	r1, [sp, #12]
 8008c0c:	701a      	strb	r2, [r3, #0]
 8008c0e:	e7f0      	b.n	8008bf2 <__cvt+0xa6>

08008c10 <__exponent>:
 8008c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c12:	4603      	mov	r3, r0
 8008c14:	2900      	cmp	r1, #0
 8008c16:	bfb8      	it	lt
 8008c18:	4249      	neglt	r1, r1
 8008c1a:	f803 2b02 	strb.w	r2, [r3], #2
 8008c1e:	bfb4      	ite	lt
 8008c20:	222d      	movlt	r2, #45	; 0x2d
 8008c22:	222b      	movge	r2, #43	; 0x2b
 8008c24:	2909      	cmp	r1, #9
 8008c26:	7042      	strb	r2, [r0, #1]
 8008c28:	dd2a      	ble.n	8008c80 <__exponent+0x70>
 8008c2a:	f10d 0407 	add.w	r4, sp, #7
 8008c2e:	46a4      	mov	ip, r4
 8008c30:	270a      	movs	r7, #10
 8008c32:	46a6      	mov	lr, r4
 8008c34:	460a      	mov	r2, r1
 8008c36:	fb91 f6f7 	sdiv	r6, r1, r7
 8008c3a:	fb07 1516 	mls	r5, r7, r6, r1
 8008c3e:	3530      	adds	r5, #48	; 0x30
 8008c40:	2a63      	cmp	r2, #99	; 0x63
 8008c42:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008c4a:	4631      	mov	r1, r6
 8008c4c:	dcf1      	bgt.n	8008c32 <__exponent+0x22>
 8008c4e:	3130      	adds	r1, #48	; 0x30
 8008c50:	f1ae 0502 	sub.w	r5, lr, #2
 8008c54:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c58:	1c44      	adds	r4, r0, #1
 8008c5a:	4629      	mov	r1, r5
 8008c5c:	4561      	cmp	r1, ip
 8008c5e:	d30a      	bcc.n	8008c76 <__exponent+0x66>
 8008c60:	f10d 0209 	add.w	r2, sp, #9
 8008c64:	eba2 020e 	sub.w	r2, r2, lr
 8008c68:	4565      	cmp	r5, ip
 8008c6a:	bf88      	it	hi
 8008c6c:	2200      	movhi	r2, #0
 8008c6e:	4413      	add	r3, r2
 8008c70:	1a18      	subs	r0, r3, r0
 8008c72:	b003      	add	sp, #12
 8008c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c7a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008c7e:	e7ed      	b.n	8008c5c <__exponent+0x4c>
 8008c80:	2330      	movs	r3, #48	; 0x30
 8008c82:	3130      	adds	r1, #48	; 0x30
 8008c84:	7083      	strb	r3, [r0, #2]
 8008c86:	70c1      	strb	r1, [r0, #3]
 8008c88:	1d03      	adds	r3, r0, #4
 8008c8a:	e7f1      	b.n	8008c70 <__exponent+0x60>

08008c8c <_printf_float>:
 8008c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c90:	ed2d 8b02 	vpush	{d8}
 8008c94:	b08d      	sub	sp, #52	; 0x34
 8008c96:	460c      	mov	r4, r1
 8008c98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c9c:	4616      	mov	r6, r2
 8008c9e:	461f      	mov	r7, r3
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	f002 fe91 	bl	800b9c8 <_localeconv_r>
 8008ca6:	f8d0 a000 	ldr.w	sl, [r0]
 8008caa:	4650      	mov	r0, sl
 8008cac:	f7f7 fa90 	bl	80001d0 <strlen>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8008cb4:	6823      	ldr	r3, [r4, #0]
 8008cb6:	9305      	str	r3, [sp, #20]
 8008cb8:	f8d8 3000 	ldr.w	r3, [r8]
 8008cbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008cc0:	3307      	adds	r3, #7
 8008cc2:	f023 0307 	bic.w	r3, r3, #7
 8008cc6:	f103 0208 	add.w	r2, r3, #8
 8008cca:	f8c8 2000 	str.w	r2, [r8]
 8008cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cd2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008cd6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008cda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cde:	9307      	str	r3, [sp, #28]
 8008ce0:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ce4:	ee08 0a10 	vmov	s16, r0
 8008ce8:	4b9f      	ldr	r3, [pc, #636]	; (8008f68 <_printf_float+0x2dc>)
 8008cea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cee:	f04f 32ff 	mov.w	r2, #4294967295
 8008cf2:	f7f7 ff1b 	bl	8000b2c <__aeabi_dcmpun>
 8008cf6:	bb88      	cbnz	r0, 8008d5c <_printf_float+0xd0>
 8008cf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cfc:	4b9a      	ldr	r3, [pc, #616]	; (8008f68 <_printf_float+0x2dc>)
 8008cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8008d02:	f7f7 fef5 	bl	8000af0 <__aeabi_dcmple>
 8008d06:	bb48      	cbnz	r0, 8008d5c <_printf_float+0xd0>
 8008d08:	2200      	movs	r2, #0
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	4640      	mov	r0, r8
 8008d0e:	4649      	mov	r1, r9
 8008d10:	f7f7 fee4 	bl	8000adc <__aeabi_dcmplt>
 8008d14:	b110      	cbz	r0, 8008d1c <_printf_float+0x90>
 8008d16:	232d      	movs	r3, #45	; 0x2d
 8008d18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d1c:	4b93      	ldr	r3, [pc, #588]	; (8008f6c <_printf_float+0x2e0>)
 8008d1e:	4894      	ldr	r0, [pc, #592]	; (8008f70 <_printf_float+0x2e4>)
 8008d20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d24:	bf94      	ite	ls
 8008d26:	4698      	movls	r8, r3
 8008d28:	4680      	movhi	r8, r0
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	6123      	str	r3, [r4, #16]
 8008d2e:	9b05      	ldr	r3, [sp, #20]
 8008d30:	f023 0204 	bic.w	r2, r3, #4
 8008d34:	6022      	str	r2, [r4, #0]
 8008d36:	f04f 0900 	mov.w	r9, #0
 8008d3a:	9700      	str	r7, [sp, #0]
 8008d3c:	4633      	mov	r3, r6
 8008d3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d40:	4621      	mov	r1, r4
 8008d42:	4628      	mov	r0, r5
 8008d44:	f000 f9d8 	bl	80090f8 <_printf_common>
 8008d48:	3001      	adds	r0, #1
 8008d4a:	f040 8090 	bne.w	8008e6e <_printf_float+0x1e2>
 8008d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d52:	b00d      	add	sp, #52	; 0x34
 8008d54:	ecbd 8b02 	vpop	{d8}
 8008d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5c:	4642      	mov	r2, r8
 8008d5e:	464b      	mov	r3, r9
 8008d60:	4640      	mov	r0, r8
 8008d62:	4649      	mov	r1, r9
 8008d64:	f7f7 fee2 	bl	8000b2c <__aeabi_dcmpun>
 8008d68:	b140      	cbz	r0, 8008d7c <_printf_float+0xf0>
 8008d6a:	464b      	mov	r3, r9
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	bfbc      	itt	lt
 8008d70:	232d      	movlt	r3, #45	; 0x2d
 8008d72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d76:	487f      	ldr	r0, [pc, #508]	; (8008f74 <_printf_float+0x2e8>)
 8008d78:	4b7f      	ldr	r3, [pc, #508]	; (8008f78 <_printf_float+0x2ec>)
 8008d7a:	e7d1      	b.n	8008d20 <_printf_float+0x94>
 8008d7c:	6863      	ldr	r3, [r4, #4]
 8008d7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d82:	9206      	str	r2, [sp, #24]
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	d13f      	bne.n	8008e08 <_printf_float+0x17c>
 8008d88:	2306      	movs	r3, #6
 8008d8a:	6063      	str	r3, [r4, #4]
 8008d8c:	9b05      	ldr	r3, [sp, #20]
 8008d8e:	6861      	ldr	r1, [r4, #4]
 8008d90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d94:	2300      	movs	r3, #0
 8008d96:	9303      	str	r3, [sp, #12]
 8008d98:	ab0a      	add	r3, sp, #40	; 0x28
 8008d9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d9e:	ab09      	add	r3, sp, #36	; 0x24
 8008da0:	ec49 8b10 	vmov	d0, r8, r9
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	6022      	str	r2, [r4, #0]
 8008da8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008dac:	4628      	mov	r0, r5
 8008dae:	f7ff fecd 	bl	8008b4c <__cvt>
 8008db2:	9b06      	ldr	r3, [sp, #24]
 8008db4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008db6:	2b47      	cmp	r3, #71	; 0x47
 8008db8:	4680      	mov	r8, r0
 8008dba:	d108      	bne.n	8008dce <_printf_float+0x142>
 8008dbc:	1cc8      	adds	r0, r1, #3
 8008dbe:	db02      	blt.n	8008dc6 <_printf_float+0x13a>
 8008dc0:	6863      	ldr	r3, [r4, #4]
 8008dc2:	4299      	cmp	r1, r3
 8008dc4:	dd41      	ble.n	8008e4a <_printf_float+0x1be>
 8008dc6:	f1ab 0b02 	sub.w	fp, fp, #2
 8008dca:	fa5f fb8b 	uxtb.w	fp, fp
 8008dce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dd2:	d820      	bhi.n	8008e16 <_printf_float+0x18a>
 8008dd4:	3901      	subs	r1, #1
 8008dd6:	465a      	mov	r2, fp
 8008dd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008ddc:	9109      	str	r1, [sp, #36]	; 0x24
 8008dde:	f7ff ff17 	bl	8008c10 <__exponent>
 8008de2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008de4:	1813      	adds	r3, r2, r0
 8008de6:	2a01      	cmp	r2, #1
 8008de8:	4681      	mov	r9, r0
 8008dea:	6123      	str	r3, [r4, #16]
 8008dec:	dc02      	bgt.n	8008df4 <_printf_float+0x168>
 8008dee:	6822      	ldr	r2, [r4, #0]
 8008df0:	07d2      	lsls	r2, r2, #31
 8008df2:	d501      	bpl.n	8008df8 <_printf_float+0x16c>
 8008df4:	3301      	adds	r3, #1
 8008df6:	6123      	str	r3, [r4, #16]
 8008df8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d09c      	beq.n	8008d3a <_printf_float+0xae>
 8008e00:	232d      	movs	r3, #45	; 0x2d
 8008e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e06:	e798      	b.n	8008d3a <_printf_float+0xae>
 8008e08:	9a06      	ldr	r2, [sp, #24]
 8008e0a:	2a47      	cmp	r2, #71	; 0x47
 8008e0c:	d1be      	bne.n	8008d8c <_printf_float+0x100>
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1bc      	bne.n	8008d8c <_printf_float+0x100>
 8008e12:	2301      	movs	r3, #1
 8008e14:	e7b9      	b.n	8008d8a <_printf_float+0xfe>
 8008e16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e1a:	d118      	bne.n	8008e4e <_printf_float+0x1c2>
 8008e1c:	2900      	cmp	r1, #0
 8008e1e:	6863      	ldr	r3, [r4, #4]
 8008e20:	dd0b      	ble.n	8008e3a <_printf_float+0x1ae>
 8008e22:	6121      	str	r1, [r4, #16]
 8008e24:	b913      	cbnz	r3, 8008e2c <_printf_float+0x1a0>
 8008e26:	6822      	ldr	r2, [r4, #0]
 8008e28:	07d0      	lsls	r0, r2, #31
 8008e2a:	d502      	bpl.n	8008e32 <_printf_float+0x1a6>
 8008e2c:	3301      	adds	r3, #1
 8008e2e:	440b      	add	r3, r1
 8008e30:	6123      	str	r3, [r4, #16]
 8008e32:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e34:	f04f 0900 	mov.w	r9, #0
 8008e38:	e7de      	b.n	8008df8 <_printf_float+0x16c>
 8008e3a:	b913      	cbnz	r3, 8008e42 <_printf_float+0x1b6>
 8008e3c:	6822      	ldr	r2, [r4, #0]
 8008e3e:	07d2      	lsls	r2, r2, #31
 8008e40:	d501      	bpl.n	8008e46 <_printf_float+0x1ba>
 8008e42:	3302      	adds	r3, #2
 8008e44:	e7f4      	b.n	8008e30 <_printf_float+0x1a4>
 8008e46:	2301      	movs	r3, #1
 8008e48:	e7f2      	b.n	8008e30 <_printf_float+0x1a4>
 8008e4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e50:	4299      	cmp	r1, r3
 8008e52:	db05      	blt.n	8008e60 <_printf_float+0x1d4>
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	6121      	str	r1, [r4, #16]
 8008e58:	07d8      	lsls	r0, r3, #31
 8008e5a:	d5ea      	bpl.n	8008e32 <_printf_float+0x1a6>
 8008e5c:	1c4b      	adds	r3, r1, #1
 8008e5e:	e7e7      	b.n	8008e30 <_printf_float+0x1a4>
 8008e60:	2900      	cmp	r1, #0
 8008e62:	bfd4      	ite	le
 8008e64:	f1c1 0202 	rsble	r2, r1, #2
 8008e68:	2201      	movgt	r2, #1
 8008e6a:	4413      	add	r3, r2
 8008e6c:	e7e0      	b.n	8008e30 <_printf_float+0x1a4>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	055a      	lsls	r2, r3, #21
 8008e72:	d407      	bmi.n	8008e84 <_printf_float+0x1f8>
 8008e74:	6923      	ldr	r3, [r4, #16]
 8008e76:	4642      	mov	r2, r8
 8008e78:	4631      	mov	r1, r6
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	47b8      	blx	r7
 8008e7e:	3001      	adds	r0, #1
 8008e80:	d12c      	bne.n	8008edc <_printf_float+0x250>
 8008e82:	e764      	b.n	8008d4e <_printf_float+0xc2>
 8008e84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e88:	f240 80e0 	bls.w	800904c <_printf_float+0x3c0>
 8008e8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e90:	2200      	movs	r2, #0
 8008e92:	2300      	movs	r3, #0
 8008e94:	f7f7 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	d034      	beq.n	8008f06 <_printf_float+0x27a>
 8008e9c:	4a37      	ldr	r2, [pc, #220]	; (8008f7c <_printf_float+0x2f0>)
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	4631      	mov	r1, r6
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	47b8      	blx	r7
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	f43f af51 	beq.w	8008d4e <_printf_float+0xc2>
 8008eac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	db02      	blt.n	8008eba <_printf_float+0x22e>
 8008eb4:	6823      	ldr	r3, [r4, #0]
 8008eb6:	07d8      	lsls	r0, r3, #31
 8008eb8:	d510      	bpl.n	8008edc <_printf_float+0x250>
 8008eba:	ee18 3a10 	vmov	r3, s16
 8008ebe:	4652      	mov	r2, sl
 8008ec0:	4631      	mov	r1, r6
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	47b8      	blx	r7
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	f43f af41 	beq.w	8008d4e <_printf_float+0xc2>
 8008ecc:	f04f 0800 	mov.w	r8, #0
 8008ed0:	f104 091a 	add.w	r9, r4, #26
 8008ed4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	4543      	cmp	r3, r8
 8008eda:	dc09      	bgt.n	8008ef0 <_printf_float+0x264>
 8008edc:	6823      	ldr	r3, [r4, #0]
 8008ede:	079b      	lsls	r3, r3, #30
 8008ee0:	f100 8105 	bmi.w	80090ee <_printf_float+0x462>
 8008ee4:	68e0      	ldr	r0, [r4, #12]
 8008ee6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ee8:	4298      	cmp	r0, r3
 8008eea:	bfb8      	it	lt
 8008eec:	4618      	movlt	r0, r3
 8008eee:	e730      	b.n	8008d52 <_printf_float+0xc6>
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	464a      	mov	r2, r9
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	47b8      	blx	r7
 8008efa:	3001      	adds	r0, #1
 8008efc:	f43f af27 	beq.w	8008d4e <_printf_float+0xc2>
 8008f00:	f108 0801 	add.w	r8, r8, #1
 8008f04:	e7e6      	b.n	8008ed4 <_printf_float+0x248>
 8008f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	dc39      	bgt.n	8008f80 <_printf_float+0x2f4>
 8008f0c:	4a1b      	ldr	r2, [pc, #108]	; (8008f7c <_printf_float+0x2f0>)
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4631      	mov	r1, r6
 8008f12:	4628      	mov	r0, r5
 8008f14:	47b8      	blx	r7
 8008f16:	3001      	adds	r0, #1
 8008f18:	f43f af19 	beq.w	8008d4e <_printf_float+0xc2>
 8008f1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f20:	4313      	orrs	r3, r2
 8008f22:	d102      	bne.n	8008f2a <_printf_float+0x29e>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	07d9      	lsls	r1, r3, #31
 8008f28:	d5d8      	bpl.n	8008edc <_printf_float+0x250>
 8008f2a:	ee18 3a10 	vmov	r3, s16
 8008f2e:	4652      	mov	r2, sl
 8008f30:	4631      	mov	r1, r6
 8008f32:	4628      	mov	r0, r5
 8008f34:	47b8      	blx	r7
 8008f36:	3001      	adds	r0, #1
 8008f38:	f43f af09 	beq.w	8008d4e <_printf_float+0xc2>
 8008f3c:	f04f 0900 	mov.w	r9, #0
 8008f40:	f104 0a1a 	add.w	sl, r4, #26
 8008f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f46:	425b      	negs	r3, r3
 8008f48:	454b      	cmp	r3, r9
 8008f4a:	dc01      	bgt.n	8008f50 <_printf_float+0x2c4>
 8008f4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f4e:	e792      	b.n	8008e76 <_printf_float+0x1ea>
 8008f50:	2301      	movs	r3, #1
 8008f52:	4652      	mov	r2, sl
 8008f54:	4631      	mov	r1, r6
 8008f56:	4628      	mov	r0, r5
 8008f58:	47b8      	blx	r7
 8008f5a:	3001      	adds	r0, #1
 8008f5c:	f43f aef7 	beq.w	8008d4e <_printf_float+0xc2>
 8008f60:	f109 0901 	add.w	r9, r9, #1
 8008f64:	e7ee      	b.n	8008f44 <_printf_float+0x2b8>
 8008f66:	bf00      	nop
 8008f68:	7fefffff 	.word	0x7fefffff
 8008f6c:	0800d504 	.word	0x0800d504
 8008f70:	0800d508 	.word	0x0800d508
 8008f74:	0800d510 	.word	0x0800d510
 8008f78:	0800d50c 	.word	0x0800d50c
 8008f7c:	0800d514 	.word	0x0800d514
 8008f80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f84:	429a      	cmp	r2, r3
 8008f86:	bfa8      	it	ge
 8008f88:	461a      	movge	r2, r3
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	4691      	mov	r9, r2
 8008f8e:	dc37      	bgt.n	8009000 <_printf_float+0x374>
 8008f90:	f04f 0b00 	mov.w	fp, #0
 8008f94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f98:	f104 021a 	add.w	r2, r4, #26
 8008f9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f9e:	9305      	str	r3, [sp, #20]
 8008fa0:	eba3 0309 	sub.w	r3, r3, r9
 8008fa4:	455b      	cmp	r3, fp
 8008fa6:	dc33      	bgt.n	8009010 <_printf_float+0x384>
 8008fa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fac:	429a      	cmp	r2, r3
 8008fae:	db3b      	blt.n	8009028 <_printf_float+0x39c>
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	07da      	lsls	r2, r3, #31
 8008fb4:	d438      	bmi.n	8009028 <_printf_float+0x39c>
 8008fb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008fb8:	9b05      	ldr	r3, [sp, #20]
 8008fba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	eba2 0901 	sub.w	r9, r2, r1
 8008fc2:	4599      	cmp	r9, r3
 8008fc4:	bfa8      	it	ge
 8008fc6:	4699      	movge	r9, r3
 8008fc8:	f1b9 0f00 	cmp.w	r9, #0
 8008fcc:	dc35      	bgt.n	800903a <_printf_float+0x3ae>
 8008fce:	f04f 0800 	mov.w	r8, #0
 8008fd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fd6:	f104 0a1a 	add.w	sl, r4, #26
 8008fda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fde:	1a9b      	subs	r3, r3, r2
 8008fe0:	eba3 0309 	sub.w	r3, r3, r9
 8008fe4:	4543      	cmp	r3, r8
 8008fe6:	f77f af79 	ble.w	8008edc <_printf_float+0x250>
 8008fea:	2301      	movs	r3, #1
 8008fec:	4652      	mov	r2, sl
 8008fee:	4631      	mov	r1, r6
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	47b8      	blx	r7
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	f43f aeaa 	beq.w	8008d4e <_printf_float+0xc2>
 8008ffa:	f108 0801 	add.w	r8, r8, #1
 8008ffe:	e7ec      	b.n	8008fda <_printf_float+0x34e>
 8009000:	4613      	mov	r3, r2
 8009002:	4631      	mov	r1, r6
 8009004:	4642      	mov	r2, r8
 8009006:	4628      	mov	r0, r5
 8009008:	47b8      	blx	r7
 800900a:	3001      	adds	r0, #1
 800900c:	d1c0      	bne.n	8008f90 <_printf_float+0x304>
 800900e:	e69e      	b.n	8008d4e <_printf_float+0xc2>
 8009010:	2301      	movs	r3, #1
 8009012:	4631      	mov	r1, r6
 8009014:	4628      	mov	r0, r5
 8009016:	9205      	str	r2, [sp, #20]
 8009018:	47b8      	blx	r7
 800901a:	3001      	adds	r0, #1
 800901c:	f43f ae97 	beq.w	8008d4e <_printf_float+0xc2>
 8009020:	9a05      	ldr	r2, [sp, #20]
 8009022:	f10b 0b01 	add.w	fp, fp, #1
 8009026:	e7b9      	b.n	8008f9c <_printf_float+0x310>
 8009028:	ee18 3a10 	vmov	r3, s16
 800902c:	4652      	mov	r2, sl
 800902e:	4631      	mov	r1, r6
 8009030:	4628      	mov	r0, r5
 8009032:	47b8      	blx	r7
 8009034:	3001      	adds	r0, #1
 8009036:	d1be      	bne.n	8008fb6 <_printf_float+0x32a>
 8009038:	e689      	b.n	8008d4e <_printf_float+0xc2>
 800903a:	9a05      	ldr	r2, [sp, #20]
 800903c:	464b      	mov	r3, r9
 800903e:	4442      	add	r2, r8
 8009040:	4631      	mov	r1, r6
 8009042:	4628      	mov	r0, r5
 8009044:	47b8      	blx	r7
 8009046:	3001      	adds	r0, #1
 8009048:	d1c1      	bne.n	8008fce <_printf_float+0x342>
 800904a:	e680      	b.n	8008d4e <_printf_float+0xc2>
 800904c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800904e:	2a01      	cmp	r2, #1
 8009050:	dc01      	bgt.n	8009056 <_printf_float+0x3ca>
 8009052:	07db      	lsls	r3, r3, #31
 8009054:	d538      	bpl.n	80090c8 <_printf_float+0x43c>
 8009056:	2301      	movs	r3, #1
 8009058:	4642      	mov	r2, r8
 800905a:	4631      	mov	r1, r6
 800905c:	4628      	mov	r0, r5
 800905e:	47b8      	blx	r7
 8009060:	3001      	adds	r0, #1
 8009062:	f43f ae74 	beq.w	8008d4e <_printf_float+0xc2>
 8009066:	ee18 3a10 	vmov	r3, s16
 800906a:	4652      	mov	r2, sl
 800906c:	4631      	mov	r1, r6
 800906e:	4628      	mov	r0, r5
 8009070:	47b8      	blx	r7
 8009072:	3001      	adds	r0, #1
 8009074:	f43f ae6b 	beq.w	8008d4e <_printf_float+0xc2>
 8009078:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800907c:	2200      	movs	r2, #0
 800907e:	2300      	movs	r3, #0
 8009080:	f7f7 fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 8009084:	b9d8      	cbnz	r0, 80090be <_printf_float+0x432>
 8009086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009088:	f108 0201 	add.w	r2, r8, #1
 800908c:	3b01      	subs	r3, #1
 800908e:	4631      	mov	r1, r6
 8009090:	4628      	mov	r0, r5
 8009092:	47b8      	blx	r7
 8009094:	3001      	adds	r0, #1
 8009096:	d10e      	bne.n	80090b6 <_printf_float+0x42a>
 8009098:	e659      	b.n	8008d4e <_printf_float+0xc2>
 800909a:	2301      	movs	r3, #1
 800909c:	4652      	mov	r2, sl
 800909e:	4631      	mov	r1, r6
 80090a0:	4628      	mov	r0, r5
 80090a2:	47b8      	blx	r7
 80090a4:	3001      	adds	r0, #1
 80090a6:	f43f ae52 	beq.w	8008d4e <_printf_float+0xc2>
 80090aa:	f108 0801 	add.w	r8, r8, #1
 80090ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090b0:	3b01      	subs	r3, #1
 80090b2:	4543      	cmp	r3, r8
 80090b4:	dcf1      	bgt.n	800909a <_printf_float+0x40e>
 80090b6:	464b      	mov	r3, r9
 80090b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090bc:	e6dc      	b.n	8008e78 <_printf_float+0x1ec>
 80090be:	f04f 0800 	mov.w	r8, #0
 80090c2:	f104 0a1a 	add.w	sl, r4, #26
 80090c6:	e7f2      	b.n	80090ae <_printf_float+0x422>
 80090c8:	2301      	movs	r3, #1
 80090ca:	4642      	mov	r2, r8
 80090cc:	e7df      	b.n	800908e <_printf_float+0x402>
 80090ce:	2301      	movs	r3, #1
 80090d0:	464a      	mov	r2, r9
 80090d2:	4631      	mov	r1, r6
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b8      	blx	r7
 80090d8:	3001      	adds	r0, #1
 80090da:	f43f ae38 	beq.w	8008d4e <_printf_float+0xc2>
 80090de:	f108 0801 	add.w	r8, r8, #1
 80090e2:	68e3      	ldr	r3, [r4, #12]
 80090e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090e6:	1a5b      	subs	r3, r3, r1
 80090e8:	4543      	cmp	r3, r8
 80090ea:	dcf0      	bgt.n	80090ce <_printf_float+0x442>
 80090ec:	e6fa      	b.n	8008ee4 <_printf_float+0x258>
 80090ee:	f04f 0800 	mov.w	r8, #0
 80090f2:	f104 0919 	add.w	r9, r4, #25
 80090f6:	e7f4      	b.n	80090e2 <_printf_float+0x456>

080090f8 <_printf_common>:
 80090f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090fc:	4616      	mov	r6, r2
 80090fe:	4699      	mov	r9, r3
 8009100:	688a      	ldr	r2, [r1, #8]
 8009102:	690b      	ldr	r3, [r1, #16]
 8009104:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009108:	4293      	cmp	r3, r2
 800910a:	bfb8      	it	lt
 800910c:	4613      	movlt	r3, r2
 800910e:	6033      	str	r3, [r6, #0]
 8009110:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009114:	4607      	mov	r7, r0
 8009116:	460c      	mov	r4, r1
 8009118:	b10a      	cbz	r2, 800911e <_printf_common+0x26>
 800911a:	3301      	adds	r3, #1
 800911c:	6033      	str	r3, [r6, #0]
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	0699      	lsls	r1, r3, #26
 8009122:	bf42      	ittt	mi
 8009124:	6833      	ldrmi	r3, [r6, #0]
 8009126:	3302      	addmi	r3, #2
 8009128:	6033      	strmi	r3, [r6, #0]
 800912a:	6825      	ldr	r5, [r4, #0]
 800912c:	f015 0506 	ands.w	r5, r5, #6
 8009130:	d106      	bne.n	8009140 <_printf_common+0x48>
 8009132:	f104 0a19 	add.w	sl, r4, #25
 8009136:	68e3      	ldr	r3, [r4, #12]
 8009138:	6832      	ldr	r2, [r6, #0]
 800913a:	1a9b      	subs	r3, r3, r2
 800913c:	42ab      	cmp	r3, r5
 800913e:	dc26      	bgt.n	800918e <_printf_common+0x96>
 8009140:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009144:	1e13      	subs	r3, r2, #0
 8009146:	6822      	ldr	r2, [r4, #0]
 8009148:	bf18      	it	ne
 800914a:	2301      	movne	r3, #1
 800914c:	0692      	lsls	r2, r2, #26
 800914e:	d42b      	bmi.n	80091a8 <_printf_common+0xb0>
 8009150:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009154:	4649      	mov	r1, r9
 8009156:	4638      	mov	r0, r7
 8009158:	47c0      	blx	r8
 800915a:	3001      	adds	r0, #1
 800915c:	d01e      	beq.n	800919c <_printf_common+0xa4>
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	68e5      	ldr	r5, [r4, #12]
 8009162:	6832      	ldr	r2, [r6, #0]
 8009164:	f003 0306 	and.w	r3, r3, #6
 8009168:	2b04      	cmp	r3, #4
 800916a:	bf08      	it	eq
 800916c:	1aad      	subeq	r5, r5, r2
 800916e:	68a3      	ldr	r3, [r4, #8]
 8009170:	6922      	ldr	r2, [r4, #16]
 8009172:	bf0c      	ite	eq
 8009174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009178:	2500      	movne	r5, #0
 800917a:	4293      	cmp	r3, r2
 800917c:	bfc4      	itt	gt
 800917e:	1a9b      	subgt	r3, r3, r2
 8009180:	18ed      	addgt	r5, r5, r3
 8009182:	2600      	movs	r6, #0
 8009184:	341a      	adds	r4, #26
 8009186:	42b5      	cmp	r5, r6
 8009188:	d11a      	bne.n	80091c0 <_printf_common+0xc8>
 800918a:	2000      	movs	r0, #0
 800918c:	e008      	b.n	80091a0 <_printf_common+0xa8>
 800918e:	2301      	movs	r3, #1
 8009190:	4652      	mov	r2, sl
 8009192:	4649      	mov	r1, r9
 8009194:	4638      	mov	r0, r7
 8009196:	47c0      	blx	r8
 8009198:	3001      	adds	r0, #1
 800919a:	d103      	bne.n	80091a4 <_printf_common+0xac>
 800919c:	f04f 30ff 	mov.w	r0, #4294967295
 80091a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a4:	3501      	adds	r5, #1
 80091a6:	e7c6      	b.n	8009136 <_printf_common+0x3e>
 80091a8:	18e1      	adds	r1, r4, r3
 80091aa:	1c5a      	adds	r2, r3, #1
 80091ac:	2030      	movs	r0, #48	; 0x30
 80091ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091b2:	4422      	add	r2, r4
 80091b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091bc:	3302      	adds	r3, #2
 80091be:	e7c7      	b.n	8009150 <_printf_common+0x58>
 80091c0:	2301      	movs	r3, #1
 80091c2:	4622      	mov	r2, r4
 80091c4:	4649      	mov	r1, r9
 80091c6:	4638      	mov	r0, r7
 80091c8:	47c0      	blx	r8
 80091ca:	3001      	adds	r0, #1
 80091cc:	d0e6      	beq.n	800919c <_printf_common+0xa4>
 80091ce:	3601      	adds	r6, #1
 80091d0:	e7d9      	b.n	8009186 <_printf_common+0x8e>
	...

080091d4 <_printf_i>:
 80091d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091d8:	460c      	mov	r4, r1
 80091da:	4691      	mov	r9, r2
 80091dc:	7e27      	ldrb	r7, [r4, #24]
 80091de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091e0:	2f78      	cmp	r7, #120	; 0x78
 80091e2:	4680      	mov	r8, r0
 80091e4:	469a      	mov	sl, r3
 80091e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091ea:	d807      	bhi.n	80091fc <_printf_i+0x28>
 80091ec:	2f62      	cmp	r7, #98	; 0x62
 80091ee:	d80a      	bhi.n	8009206 <_printf_i+0x32>
 80091f0:	2f00      	cmp	r7, #0
 80091f2:	f000 80d8 	beq.w	80093a6 <_printf_i+0x1d2>
 80091f6:	2f58      	cmp	r7, #88	; 0x58
 80091f8:	f000 80a3 	beq.w	8009342 <_printf_i+0x16e>
 80091fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009200:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009204:	e03a      	b.n	800927c <_printf_i+0xa8>
 8009206:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800920a:	2b15      	cmp	r3, #21
 800920c:	d8f6      	bhi.n	80091fc <_printf_i+0x28>
 800920e:	a001      	add	r0, pc, #4	; (adr r0, 8009214 <_printf_i+0x40>)
 8009210:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009214:	0800926d 	.word	0x0800926d
 8009218:	08009281 	.word	0x08009281
 800921c:	080091fd 	.word	0x080091fd
 8009220:	080091fd 	.word	0x080091fd
 8009224:	080091fd 	.word	0x080091fd
 8009228:	080091fd 	.word	0x080091fd
 800922c:	08009281 	.word	0x08009281
 8009230:	080091fd 	.word	0x080091fd
 8009234:	080091fd 	.word	0x080091fd
 8009238:	080091fd 	.word	0x080091fd
 800923c:	080091fd 	.word	0x080091fd
 8009240:	0800938d 	.word	0x0800938d
 8009244:	080092b1 	.word	0x080092b1
 8009248:	0800936f 	.word	0x0800936f
 800924c:	080091fd 	.word	0x080091fd
 8009250:	080091fd 	.word	0x080091fd
 8009254:	080093af 	.word	0x080093af
 8009258:	080091fd 	.word	0x080091fd
 800925c:	080092b1 	.word	0x080092b1
 8009260:	080091fd 	.word	0x080091fd
 8009264:	080091fd 	.word	0x080091fd
 8009268:	08009377 	.word	0x08009377
 800926c:	680b      	ldr	r3, [r1, #0]
 800926e:	1d1a      	adds	r2, r3, #4
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	600a      	str	r2, [r1, #0]
 8009274:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009278:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800927c:	2301      	movs	r3, #1
 800927e:	e0a3      	b.n	80093c8 <_printf_i+0x1f4>
 8009280:	6825      	ldr	r5, [r4, #0]
 8009282:	6808      	ldr	r0, [r1, #0]
 8009284:	062e      	lsls	r6, r5, #24
 8009286:	f100 0304 	add.w	r3, r0, #4
 800928a:	d50a      	bpl.n	80092a2 <_printf_i+0xce>
 800928c:	6805      	ldr	r5, [r0, #0]
 800928e:	600b      	str	r3, [r1, #0]
 8009290:	2d00      	cmp	r5, #0
 8009292:	da03      	bge.n	800929c <_printf_i+0xc8>
 8009294:	232d      	movs	r3, #45	; 0x2d
 8009296:	426d      	negs	r5, r5
 8009298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800929c:	485e      	ldr	r0, [pc, #376]	; (8009418 <_printf_i+0x244>)
 800929e:	230a      	movs	r3, #10
 80092a0:	e019      	b.n	80092d6 <_printf_i+0x102>
 80092a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80092a6:	6805      	ldr	r5, [r0, #0]
 80092a8:	600b      	str	r3, [r1, #0]
 80092aa:	bf18      	it	ne
 80092ac:	b22d      	sxthne	r5, r5
 80092ae:	e7ef      	b.n	8009290 <_printf_i+0xbc>
 80092b0:	680b      	ldr	r3, [r1, #0]
 80092b2:	6825      	ldr	r5, [r4, #0]
 80092b4:	1d18      	adds	r0, r3, #4
 80092b6:	6008      	str	r0, [r1, #0]
 80092b8:	0628      	lsls	r0, r5, #24
 80092ba:	d501      	bpl.n	80092c0 <_printf_i+0xec>
 80092bc:	681d      	ldr	r5, [r3, #0]
 80092be:	e002      	b.n	80092c6 <_printf_i+0xf2>
 80092c0:	0669      	lsls	r1, r5, #25
 80092c2:	d5fb      	bpl.n	80092bc <_printf_i+0xe8>
 80092c4:	881d      	ldrh	r5, [r3, #0]
 80092c6:	4854      	ldr	r0, [pc, #336]	; (8009418 <_printf_i+0x244>)
 80092c8:	2f6f      	cmp	r7, #111	; 0x6f
 80092ca:	bf0c      	ite	eq
 80092cc:	2308      	moveq	r3, #8
 80092ce:	230a      	movne	r3, #10
 80092d0:	2100      	movs	r1, #0
 80092d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092d6:	6866      	ldr	r6, [r4, #4]
 80092d8:	60a6      	str	r6, [r4, #8]
 80092da:	2e00      	cmp	r6, #0
 80092dc:	bfa2      	ittt	ge
 80092de:	6821      	ldrge	r1, [r4, #0]
 80092e0:	f021 0104 	bicge.w	r1, r1, #4
 80092e4:	6021      	strge	r1, [r4, #0]
 80092e6:	b90d      	cbnz	r5, 80092ec <_printf_i+0x118>
 80092e8:	2e00      	cmp	r6, #0
 80092ea:	d04d      	beq.n	8009388 <_printf_i+0x1b4>
 80092ec:	4616      	mov	r6, r2
 80092ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80092f2:	fb03 5711 	mls	r7, r3, r1, r5
 80092f6:	5dc7      	ldrb	r7, [r0, r7]
 80092f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80092fc:	462f      	mov	r7, r5
 80092fe:	42bb      	cmp	r3, r7
 8009300:	460d      	mov	r5, r1
 8009302:	d9f4      	bls.n	80092ee <_printf_i+0x11a>
 8009304:	2b08      	cmp	r3, #8
 8009306:	d10b      	bne.n	8009320 <_printf_i+0x14c>
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	07df      	lsls	r7, r3, #31
 800930c:	d508      	bpl.n	8009320 <_printf_i+0x14c>
 800930e:	6923      	ldr	r3, [r4, #16]
 8009310:	6861      	ldr	r1, [r4, #4]
 8009312:	4299      	cmp	r1, r3
 8009314:	bfde      	ittt	le
 8009316:	2330      	movle	r3, #48	; 0x30
 8009318:	f806 3c01 	strble.w	r3, [r6, #-1]
 800931c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009320:	1b92      	subs	r2, r2, r6
 8009322:	6122      	str	r2, [r4, #16]
 8009324:	f8cd a000 	str.w	sl, [sp]
 8009328:	464b      	mov	r3, r9
 800932a:	aa03      	add	r2, sp, #12
 800932c:	4621      	mov	r1, r4
 800932e:	4640      	mov	r0, r8
 8009330:	f7ff fee2 	bl	80090f8 <_printf_common>
 8009334:	3001      	adds	r0, #1
 8009336:	d14c      	bne.n	80093d2 <_printf_i+0x1fe>
 8009338:	f04f 30ff 	mov.w	r0, #4294967295
 800933c:	b004      	add	sp, #16
 800933e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009342:	4835      	ldr	r0, [pc, #212]	; (8009418 <_printf_i+0x244>)
 8009344:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	680e      	ldr	r6, [r1, #0]
 800934c:	061f      	lsls	r7, r3, #24
 800934e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009352:	600e      	str	r6, [r1, #0]
 8009354:	d514      	bpl.n	8009380 <_printf_i+0x1ac>
 8009356:	07d9      	lsls	r1, r3, #31
 8009358:	bf44      	itt	mi
 800935a:	f043 0320 	orrmi.w	r3, r3, #32
 800935e:	6023      	strmi	r3, [r4, #0]
 8009360:	b91d      	cbnz	r5, 800936a <_printf_i+0x196>
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	f023 0320 	bic.w	r3, r3, #32
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	2310      	movs	r3, #16
 800936c:	e7b0      	b.n	80092d0 <_printf_i+0xfc>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	f043 0320 	orr.w	r3, r3, #32
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	2378      	movs	r3, #120	; 0x78
 8009378:	4828      	ldr	r0, [pc, #160]	; (800941c <_printf_i+0x248>)
 800937a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800937e:	e7e3      	b.n	8009348 <_printf_i+0x174>
 8009380:	065e      	lsls	r6, r3, #25
 8009382:	bf48      	it	mi
 8009384:	b2ad      	uxthmi	r5, r5
 8009386:	e7e6      	b.n	8009356 <_printf_i+0x182>
 8009388:	4616      	mov	r6, r2
 800938a:	e7bb      	b.n	8009304 <_printf_i+0x130>
 800938c:	680b      	ldr	r3, [r1, #0]
 800938e:	6826      	ldr	r6, [r4, #0]
 8009390:	6960      	ldr	r0, [r4, #20]
 8009392:	1d1d      	adds	r5, r3, #4
 8009394:	600d      	str	r5, [r1, #0]
 8009396:	0635      	lsls	r5, r6, #24
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	d501      	bpl.n	80093a0 <_printf_i+0x1cc>
 800939c:	6018      	str	r0, [r3, #0]
 800939e:	e002      	b.n	80093a6 <_printf_i+0x1d2>
 80093a0:	0671      	lsls	r1, r6, #25
 80093a2:	d5fb      	bpl.n	800939c <_printf_i+0x1c8>
 80093a4:	8018      	strh	r0, [r3, #0]
 80093a6:	2300      	movs	r3, #0
 80093a8:	6123      	str	r3, [r4, #16]
 80093aa:	4616      	mov	r6, r2
 80093ac:	e7ba      	b.n	8009324 <_printf_i+0x150>
 80093ae:	680b      	ldr	r3, [r1, #0]
 80093b0:	1d1a      	adds	r2, r3, #4
 80093b2:	600a      	str	r2, [r1, #0]
 80093b4:	681e      	ldr	r6, [r3, #0]
 80093b6:	6862      	ldr	r2, [r4, #4]
 80093b8:	2100      	movs	r1, #0
 80093ba:	4630      	mov	r0, r6
 80093bc:	f7f6 ff10 	bl	80001e0 <memchr>
 80093c0:	b108      	cbz	r0, 80093c6 <_printf_i+0x1f2>
 80093c2:	1b80      	subs	r0, r0, r6
 80093c4:	6060      	str	r0, [r4, #4]
 80093c6:	6863      	ldr	r3, [r4, #4]
 80093c8:	6123      	str	r3, [r4, #16]
 80093ca:	2300      	movs	r3, #0
 80093cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093d0:	e7a8      	b.n	8009324 <_printf_i+0x150>
 80093d2:	6923      	ldr	r3, [r4, #16]
 80093d4:	4632      	mov	r2, r6
 80093d6:	4649      	mov	r1, r9
 80093d8:	4640      	mov	r0, r8
 80093da:	47d0      	blx	sl
 80093dc:	3001      	adds	r0, #1
 80093de:	d0ab      	beq.n	8009338 <_printf_i+0x164>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	079b      	lsls	r3, r3, #30
 80093e4:	d413      	bmi.n	800940e <_printf_i+0x23a>
 80093e6:	68e0      	ldr	r0, [r4, #12]
 80093e8:	9b03      	ldr	r3, [sp, #12]
 80093ea:	4298      	cmp	r0, r3
 80093ec:	bfb8      	it	lt
 80093ee:	4618      	movlt	r0, r3
 80093f0:	e7a4      	b.n	800933c <_printf_i+0x168>
 80093f2:	2301      	movs	r3, #1
 80093f4:	4632      	mov	r2, r6
 80093f6:	4649      	mov	r1, r9
 80093f8:	4640      	mov	r0, r8
 80093fa:	47d0      	blx	sl
 80093fc:	3001      	adds	r0, #1
 80093fe:	d09b      	beq.n	8009338 <_printf_i+0x164>
 8009400:	3501      	adds	r5, #1
 8009402:	68e3      	ldr	r3, [r4, #12]
 8009404:	9903      	ldr	r1, [sp, #12]
 8009406:	1a5b      	subs	r3, r3, r1
 8009408:	42ab      	cmp	r3, r5
 800940a:	dcf2      	bgt.n	80093f2 <_printf_i+0x21e>
 800940c:	e7eb      	b.n	80093e6 <_printf_i+0x212>
 800940e:	2500      	movs	r5, #0
 8009410:	f104 0619 	add.w	r6, r4, #25
 8009414:	e7f5      	b.n	8009402 <_printf_i+0x22e>
 8009416:	bf00      	nop
 8009418:	0800d516 	.word	0x0800d516
 800941c:	0800d527 	.word	0x0800d527

08009420 <_scanf_float>:
 8009420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	b087      	sub	sp, #28
 8009426:	4617      	mov	r7, r2
 8009428:	9303      	str	r3, [sp, #12]
 800942a:	688b      	ldr	r3, [r1, #8]
 800942c:	1e5a      	subs	r2, r3, #1
 800942e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009432:	bf83      	ittte	hi
 8009434:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009438:	195b      	addhi	r3, r3, r5
 800943a:	9302      	strhi	r3, [sp, #8]
 800943c:	2300      	movls	r3, #0
 800943e:	bf86      	itte	hi
 8009440:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009444:	608b      	strhi	r3, [r1, #8]
 8009446:	9302      	strls	r3, [sp, #8]
 8009448:	680b      	ldr	r3, [r1, #0]
 800944a:	468b      	mov	fp, r1
 800944c:	2500      	movs	r5, #0
 800944e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009452:	f84b 3b1c 	str.w	r3, [fp], #28
 8009456:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800945a:	4680      	mov	r8, r0
 800945c:	460c      	mov	r4, r1
 800945e:	465e      	mov	r6, fp
 8009460:	46aa      	mov	sl, r5
 8009462:	46a9      	mov	r9, r5
 8009464:	9501      	str	r5, [sp, #4]
 8009466:	68a2      	ldr	r2, [r4, #8]
 8009468:	b152      	cbz	r2, 8009480 <_scanf_float+0x60>
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	2b4e      	cmp	r3, #78	; 0x4e
 8009470:	d864      	bhi.n	800953c <_scanf_float+0x11c>
 8009472:	2b40      	cmp	r3, #64	; 0x40
 8009474:	d83c      	bhi.n	80094f0 <_scanf_float+0xd0>
 8009476:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800947a:	b2c8      	uxtb	r0, r1
 800947c:	280e      	cmp	r0, #14
 800947e:	d93a      	bls.n	80094f6 <_scanf_float+0xd6>
 8009480:	f1b9 0f00 	cmp.w	r9, #0
 8009484:	d003      	beq.n	800948e <_scanf_float+0x6e>
 8009486:	6823      	ldr	r3, [r4, #0]
 8009488:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009492:	f1ba 0f01 	cmp.w	sl, #1
 8009496:	f200 8113 	bhi.w	80096c0 <_scanf_float+0x2a0>
 800949a:	455e      	cmp	r6, fp
 800949c:	f200 8105 	bhi.w	80096aa <_scanf_float+0x28a>
 80094a0:	2501      	movs	r5, #1
 80094a2:	4628      	mov	r0, r5
 80094a4:	b007      	add	sp, #28
 80094a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094aa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80094ae:	2a0d      	cmp	r2, #13
 80094b0:	d8e6      	bhi.n	8009480 <_scanf_float+0x60>
 80094b2:	a101      	add	r1, pc, #4	; (adr r1, 80094b8 <_scanf_float+0x98>)
 80094b4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80094b8:	080095f7 	.word	0x080095f7
 80094bc:	08009481 	.word	0x08009481
 80094c0:	08009481 	.word	0x08009481
 80094c4:	08009481 	.word	0x08009481
 80094c8:	08009657 	.word	0x08009657
 80094cc:	0800962f 	.word	0x0800962f
 80094d0:	08009481 	.word	0x08009481
 80094d4:	08009481 	.word	0x08009481
 80094d8:	08009605 	.word	0x08009605
 80094dc:	08009481 	.word	0x08009481
 80094e0:	08009481 	.word	0x08009481
 80094e4:	08009481 	.word	0x08009481
 80094e8:	08009481 	.word	0x08009481
 80094ec:	080095bd 	.word	0x080095bd
 80094f0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80094f4:	e7db      	b.n	80094ae <_scanf_float+0x8e>
 80094f6:	290e      	cmp	r1, #14
 80094f8:	d8c2      	bhi.n	8009480 <_scanf_float+0x60>
 80094fa:	a001      	add	r0, pc, #4	; (adr r0, 8009500 <_scanf_float+0xe0>)
 80094fc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009500:	080095af 	.word	0x080095af
 8009504:	08009481 	.word	0x08009481
 8009508:	080095af 	.word	0x080095af
 800950c:	08009643 	.word	0x08009643
 8009510:	08009481 	.word	0x08009481
 8009514:	0800955d 	.word	0x0800955d
 8009518:	08009599 	.word	0x08009599
 800951c:	08009599 	.word	0x08009599
 8009520:	08009599 	.word	0x08009599
 8009524:	08009599 	.word	0x08009599
 8009528:	08009599 	.word	0x08009599
 800952c:	08009599 	.word	0x08009599
 8009530:	08009599 	.word	0x08009599
 8009534:	08009599 	.word	0x08009599
 8009538:	08009599 	.word	0x08009599
 800953c:	2b6e      	cmp	r3, #110	; 0x6e
 800953e:	d809      	bhi.n	8009554 <_scanf_float+0x134>
 8009540:	2b60      	cmp	r3, #96	; 0x60
 8009542:	d8b2      	bhi.n	80094aa <_scanf_float+0x8a>
 8009544:	2b54      	cmp	r3, #84	; 0x54
 8009546:	d077      	beq.n	8009638 <_scanf_float+0x218>
 8009548:	2b59      	cmp	r3, #89	; 0x59
 800954a:	d199      	bne.n	8009480 <_scanf_float+0x60>
 800954c:	2d07      	cmp	r5, #7
 800954e:	d197      	bne.n	8009480 <_scanf_float+0x60>
 8009550:	2508      	movs	r5, #8
 8009552:	e029      	b.n	80095a8 <_scanf_float+0x188>
 8009554:	2b74      	cmp	r3, #116	; 0x74
 8009556:	d06f      	beq.n	8009638 <_scanf_float+0x218>
 8009558:	2b79      	cmp	r3, #121	; 0x79
 800955a:	e7f6      	b.n	800954a <_scanf_float+0x12a>
 800955c:	6821      	ldr	r1, [r4, #0]
 800955e:	05c8      	lsls	r0, r1, #23
 8009560:	d51a      	bpl.n	8009598 <_scanf_float+0x178>
 8009562:	9b02      	ldr	r3, [sp, #8]
 8009564:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009568:	6021      	str	r1, [r4, #0]
 800956a:	f109 0901 	add.w	r9, r9, #1
 800956e:	b11b      	cbz	r3, 8009578 <_scanf_float+0x158>
 8009570:	3b01      	subs	r3, #1
 8009572:	3201      	adds	r2, #1
 8009574:	9302      	str	r3, [sp, #8]
 8009576:	60a2      	str	r2, [r4, #8]
 8009578:	68a3      	ldr	r3, [r4, #8]
 800957a:	3b01      	subs	r3, #1
 800957c:	60a3      	str	r3, [r4, #8]
 800957e:	6923      	ldr	r3, [r4, #16]
 8009580:	3301      	adds	r3, #1
 8009582:	6123      	str	r3, [r4, #16]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3b01      	subs	r3, #1
 8009588:	2b00      	cmp	r3, #0
 800958a:	607b      	str	r3, [r7, #4]
 800958c:	f340 8084 	ble.w	8009698 <_scanf_float+0x278>
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	3301      	adds	r3, #1
 8009594:	603b      	str	r3, [r7, #0]
 8009596:	e766      	b.n	8009466 <_scanf_float+0x46>
 8009598:	eb1a 0f05 	cmn.w	sl, r5
 800959c:	f47f af70 	bne.w	8009480 <_scanf_float+0x60>
 80095a0:	6822      	ldr	r2, [r4, #0]
 80095a2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80095a6:	6022      	str	r2, [r4, #0]
 80095a8:	f806 3b01 	strb.w	r3, [r6], #1
 80095ac:	e7e4      	b.n	8009578 <_scanf_float+0x158>
 80095ae:	6822      	ldr	r2, [r4, #0]
 80095b0:	0610      	lsls	r0, r2, #24
 80095b2:	f57f af65 	bpl.w	8009480 <_scanf_float+0x60>
 80095b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095ba:	e7f4      	b.n	80095a6 <_scanf_float+0x186>
 80095bc:	f1ba 0f00 	cmp.w	sl, #0
 80095c0:	d10e      	bne.n	80095e0 <_scanf_float+0x1c0>
 80095c2:	f1b9 0f00 	cmp.w	r9, #0
 80095c6:	d10e      	bne.n	80095e6 <_scanf_float+0x1c6>
 80095c8:	6822      	ldr	r2, [r4, #0]
 80095ca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80095ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80095d2:	d108      	bne.n	80095e6 <_scanf_float+0x1c6>
 80095d4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80095d8:	6022      	str	r2, [r4, #0]
 80095da:	f04f 0a01 	mov.w	sl, #1
 80095de:	e7e3      	b.n	80095a8 <_scanf_float+0x188>
 80095e0:	f1ba 0f02 	cmp.w	sl, #2
 80095e4:	d055      	beq.n	8009692 <_scanf_float+0x272>
 80095e6:	2d01      	cmp	r5, #1
 80095e8:	d002      	beq.n	80095f0 <_scanf_float+0x1d0>
 80095ea:	2d04      	cmp	r5, #4
 80095ec:	f47f af48 	bne.w	8009480 <_scanf_float+0x60>
 80095f0:	3501      	adds	r5, #1
 80095f2:	b2ed      	uxtb	r5, r5
 80095f4:	e7d8      	b.n	80095a8 <_scanf_float+0x188>
 80095f6:	f1ba 0f01 	cmp.w	sl, #1
 80095fa:	f47f af41 	bne.w	8009480 <_scanf_float+0x60>
 80095fe:	f04f 0a02 	mov.w	sl, #2
 8009602:	e7d1      	b.n	80095a8 <_scanf_float+0x188>
 8009604:	b97d      	cbnz	r5, 8009626 <_scanf_float+0x206>
 8009606:	f1b9 0f00 	cmp.w	r9, #0
 800960a:	f47f af3c 	bne.w	8009486 <_scanf_float+0x66>
 800960e:	6822      	ldr	r2, [r4, #0]
 8009610:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009614:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009618:	f47f af39 	bne.w	800948e <_scanf_float+0x6e>
 800961c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009620:	6022      	str	r2, [r4, #0]
 8009622:	2501      	movs	r5, #1
 8009624:	e7c0      	b.n	80095a8 <_scanf_float+0x188>
 8009626:	2d03      	cmp	r5, #3
 8009628:	d0e2      	beq.n	80095f0 <_scanf_float+0x1d0>
 800962a:	2d05      	cmp	r5, #5
 800962c:	e7de      	b.n	80095ec <_scanf_float+0x1cc>
 800962e:	2d02      	cmp	r5, #2
 8009630:	f47f af26 	bne.w	8009480 <_scanf_float+0x60>
 8009634:	2503      	movs	r5, #3
 8009636:	e7b7      	b.n	80095a8 <_scanf_float+0x188>
 8009638:	2d06      	cmp	r5, #6
 800963a:	f47f af21 	bne.w	8009480 <_scanf_float+0x60>
 800963e:	2507      	movs	r5, #7
 8009640:	e7b2      	b.n	80095a8 <_scanf_float+0x188>
 8009642:	6822      	ldr	r2, [r4, #0]
 8009644:	0591      	lsls	r1, r2, #22
 8009646:	f57f af1b 	bpl.w	8009480 <_scanf_float+0x60>
 800964a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800964e:	6022      	str	r2, [r4, #0]
 8009650:	f8cd 9004 	str.w	r9, [sp, #4]
 8009654:	e7a8      	b.n	80095a8 <_scanf_float+0x188>
 8009656:	6822      	ldr	r2, [r4, #0]
 8009658:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800965c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009660:	d006      	beq.n	8009670 <_scanf_float+0x250>
 8009662:	0550      	lsls	r0, r2, #21
 8009664:	f57f af0c 	bpl.w	8009480 <_scanf_float+0x60>
 8009668:	f1b9 0f00 	cmp.w	r9, #0
 800966c:	f43f af0f 	beq.w	800948e <_scanf_float+0x6e>
 8009670:	0591      	lsls	r1, r2, #22
 8009672:	bf58      	it	pl
 8009674:	9901      	ldrpl	r1, [sp, #4]
 8009676:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800967a:	bf58      	it	pl
 800967c:	eba9 0101 	subpl.w	r1, r9, r1
 8009680:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009684:	bf58      	it	pl
 8009686:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800968a:	6022      	str	r2, [r4, #0]
 800968c:	f04f 0900 	mov.w	r9, #0
 8009690:	e78a      	b.n	80095a8 <_scanf_float+0x188>
 8009692:	f04f 0a03 	mov.w	sl, #3
 8009696:	e787      	b.n	80095a8 <_scanf_float+0x188>
 8009698:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800969c:	4639      	mov	r1, r7
 800969e:	4640      	mov	r0, r8
 80096a0:	4798      	blx	r3
 80096a2:	2800      	cmp	r0, #0
 80096a4:	f43f aedf 	beq.w	8009466 <_scanf_float+0x46>
 80096a8:	e6ea      	b.n	8009480 <_scanf_float+0x60>
 80096aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096b2:	463a      	mov	r2, r7
 80096b4:	4640      	mov	r0, r8
 80096b6:	4798      	blx	r3
 80096b8:	6923      	ldr	r3, [r4, #16]
 80096ba:	3b01      	subs	r3, #1
 80096bc:	6123      	str	r3, [r4, #16]
 80096be:	e6ec      	b.n	800949a <_scanf_float+0x7a>
 80096c0:	1e6b      	subs	r3, r5, #1
 80096c2:	2b06      	cmp	r3, #6
 80096c4:	d825      	bhi.n	8009712 <_scanf_float+0x2f2>
 80096c6:	2d02      	cmp	r5, #2
 80096c8:	d836      	bhi.n	8009738 <_scanf_float+0x318>
 80096ca:	455e      	cmp	r6, fp
 80096cc:	f67f aee8 	bls.w	80094a0 <_scanf_float+0x80>
 80096d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096d4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096d8:	463a      	mov	r2, r7
 80096da:	4640      	mov	r0, r8
 80096dc:	4798      	blx	r3
 80096de:	6923      	ldr	r3, [r4, #16]
 80096e0:	3b01      	subs	r3, #1
 80096e2:	6123      	str	r3, [r4, #16]
 80096e4:	e7f1      	b.n	80096ca <_scanf_float+0x2aa>
 80096e6:	9802      	ldr	r0, [sp, #8]
 80096e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096ec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80096f0:	9002      	str	r0, [sp, #8]
 80096f2:	463a      	mov	r2, r7
 80096f4:	4640      	mov	r0, r8
 80096f6:	4798      	blx	r3
 80096f8:	6923      	ldr	r3, [r4, #16]
 80096fa:	3b01      	subs	r3, #1
 80096fc:	6123      	str	r3, [r4, #16]
 80096fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009702:	fa5f fa8a 	uxtb.w	sl, sl
 8009706:	f1ba 0f02 	cmp.w	sl, #2
 800970a:	d1ec      	bne.n	80096e6 <_scanf_float+0x2c6>
 800970c:	3d03      	subs	r5, #3
 800970e:	b2ed      	uxtb	r5, r5
 8009710:	1b76      	subs	r6, r6, r5
 8009712:	6823      	ldr	r3, [r4, #0]
 8009714:	05da      	lsls	r2, r3, #23
 8009716:	d52f      	bpl.n	8009778 <_scanf_float+0x358>
 8009718:	055b      	lsls	r3, r3, #21
 800971a:	d510      	bpl.n	800973e <_scanf_float+0x31e>
 800971c:	455e      	cmp	r6, fp
 800971e:	f67f aebf 	bls.w	80094a0 <_scanf_float+0x80>
 8009722:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009726:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800972a:	463a      	mov	r2, r7
 800972c:	4640      	mov	r0, r8
 800972e:	4798      	blx	r3
 8009730:	6923      	ldr	r3, [r4, #16]
 8009732:	3b01      	subs	r3, #1
 8009734:	6123      	str	r3, [r4, #16]
 8009736:	e7f1      	b.n	800971c <_scanf_float+0x2fc>
 8009738:	46aa      	mov	sl, r5
 800973a:	9602      	str	r6, [sp, #8]
 800973c:	e7df      	b.n	80096fe <_scanf_float+0x2de>
 800973e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009742:	6923      	ldr	r3, [r4, #16]
 8009744:	2965      	cmp	r1, #101	; 0x65
 8009746:	f103 33ff 	add.w	r3, r3, #4294967295
 800974a:	f106 35ff 	add.w	r5, r6, #4294967295
 800974e:	6123      	str	r3, [r4, #16]
 8009750:	d00c      	beq.n	800976c <_scanf_float+0x34c>
 8009752:	2945      	cmp	r1, #69	; 0x45
 8009754:	d00a      	beq.n	800976c <_scanf_float+0x34c>
 8009756:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800975a:	463a      	mov	r2, r7
 800975c:	4640      	mov	r0, r8
 800975e:	4798      	blx	r3
 8009760:	6923      	ldr	r3, [r4, #16]
 8009762:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009766:	3b01      	subs	r3, #1
 8009768:	1eb5      	subs	r5, r6, #2
 800976a:	6123      	str	r3, [r4, #16]
 800976c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009770:	463a      	mov	r2, r7
 8009772:	4640      	mov	r0, r8
 8009774:	4798      	blx	r3
 8009776:	462e      	mov	r6, r5
 8009778:	6825      	ldr	r5, [r4, #0]
 800977a:	f015 0510 	ands.w	r5, r5, #16
 800977e:	d158      	bne.n	8009832 <_scanf_float+0x412>
 8009780:	7035      	strb	r5, [r6, #0]
 8009782:	6823      	ldr	r3, [r4, #0]
 8009784:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800978c:	d11c      	bne.n	80097c8 <_scanf_float+0x3a8>
 800978e:	9b01      	ldr	r3, [sp, #4]
 8009790:	454b      	cmp	r3, r9
 8009792:	eba3 0209 	sub.w	r2, r3, r9
 8009796:	d124      	bne.n	80097e2 <_scanf_float+0x3c2>
 8009798:	2200      	movs	r2, #0
 800979a:	4659      	mov	r1, fp
 800979c:	4640      	mov	r0, r8
 800979e:	f000 fe9d 	bl	800a4dc <_strtod_r>
 80097a2:	9b03      	ldr	r3, [sp, #12]
 80097a4:	6821      	ldr	r1, [r4, #0]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f011 0f02 	tst.w	r1, #2
 80097ac:	ec57 6b10 	vmov	r6, r7, d0
 80097b0:	f103 0204 	add.w	r2, r3, #4
 80097b4:	d020      	beq.n	80097f8 <_scanf_float+0x3d8>
 80097b6:	9903      	ldr	r1, [sp, #12]
 80097b8:	600a      	str	r2, [r1, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	e9c3 6700 	strd	r6, r7, [r3]
 80097c0:	68e3      	ldr	r3, [r4, #12]
 80097c2:	3301      	adds	r3, #1
 80097c4:	60e3      	str	r3, [r4, #12]
 80097c6:	e66c      	b.n	80094a2 <_scanf_float+0x82>
 80097c8:	9b04      	ldr	r3, [sp, #16]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d0e4      	beq.n	8009798 <_scanf_float+0x378>
 80097ce:	9905      	ldr	r1, [sp, #20]
 80097d0:	230a      	movs	r3, #10
 80097d2:	462a      	mov	r2, r5
 80097d4:	3101      	adds	r1, #1
 80097d6:	4640      	mov	r0, r8
 80097d8:	f000 ff0a 	bl	800a5f0 <_strtol_r>
 80097dc:	9b04      	ldr	r3, [sp, #16]
 80097de:	9e05      	ldr	r6, [sp, #20]
 80097e0:	1ac2      	subs	r2, r0, r3
 80097e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80097e6:	429e      	cmp	r6, r3
 80097e8:	bf28      	it	cs
 80097ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80097ee:	4912      	ldr	r1, [pc, #72]	; (8009838 <_scanf_float+0x418>)
 80097f0:	4630      	mov	r0, r6
 80097f2:	f000 f82b 	bl	800984c <siprintf>
 80097f6:	e7cf      	b.n	8009798 <_scanf_float+0x378>
 80097f8:	f011 0f04 	tst.w	r1, #4
 80097fc:	9903      	ldr	r1, [sp, #12]
 80097fe:	600a      	str	r2, [r1, #0]
 8009800:	d1db      	bne.n	80097ba <_scanf_float+0x39a>
 8009802:	f8d3 8000 	ldr.w	r8, [r3]
 8009806:	ee10 2a10 	vmov	r2, s0
 800980a:	ee10 0a10 	vmov	r0, s0
 800980e:	463b      	mov	r3, r7
 8009810:	4639      	mov	r1, r7
 8009812:	f7f7 f98b 	bl	8000b2c <__aeabi_dcmpun>
 8009816:	b128      	cbz	r0, 8009824 <_scanf_float+0x404>
 8009818:	4808      	ldr	r0, [pc, #32]	; (800983c <_scanf_float+0x41c>)
 800981a:	f000 f811 	bl	8009840 <nanf>
 800981e:	ed88 0a00 	vstr	s0, [r8]
 8009822:	e7cd      	b.n	80097c0 <_scanf_float+0x3a0>
 8009824:	4630      	mov	r0, r6
 8009826:	4639      	mov	r1, r7
 8009828:	f7f7 f9de 	bl	8000be8 <__aeabi_d2f>
 800982c:	f8c8 0000 	str.w	r0, [r8]
 8009830:	e7c6      	b.n	80097c0 <_scanf_float+0x3a0>
 8009832:	2500      	movs	r5, #0
 8009834:	e635      	b.n	80094a2 <_scanf_float+0x82>
 8009836:	bf00      	nop
 8009838:	0800d538 	.word	0x0800d538
 800983c:	0800d950 	.word	0x0800d950

08009840 <nanf>:
 8009840:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009848 <nanf+0x8>
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	7fc00000 	.word	0x7fc00000

0800984c <siprintf>:
 800984c:	b40e      	push	{r1, r2, r3}
 800984e:	b500      	push	{lr}
 8009850:	b09c      	sub	sp, #112	; 0x70
 8009852:	ab1d      	add	r3, sp, #116	; 0x74
 8009854:	9002      	str	r0, [sp, #8]
 8009856:	9006      	str	r0, [sp, #24]
 8009858:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800985c:	4809      	ldr	r0, [pc, #36]	; (8009884 <siprintf+0x38>)
 800985e:	9107      	str	r1, [sp, #28]
 8009860:	9104      	str	r1, [sp, #16]
 8009862:	4909      	ldr	r1, [pc, #36]	; (8009888 <siprintf+0x3c>)
 8009864:	f853 2b04 	ldr.w	r2, [r3], #4
 8009868:	9105      	str	r1, [sp, #20]
 800986a:	6800      	ldr	r0, [r0, #0]
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	a902      	add	r1, sp, #8
 8009870:	f002 fe98 	bl	800c5a4 <_svfiprintf_r>
 8009874:	9b02      	ldr	r3, [sp, #8]
 8009876:	2200      	movs	r2, #0
 8009878:	701a      	strb	r2, [r3, #0]
 800987a:	b01c      	add	sp, #112	; 0x70
 800987c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009880:	b003      	add	sp, #12
 8009882:	4770      	bx	lr
 8009884:	20000010 	.word	0x20000010
 8009888:	ffff0208 	.word	0xffff0208

0800988c <sulp>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	4604      	mov	r4, r0
 8009890:	460d      	mov	r5, r1
 8009892:	ec45 4b10 	vmov	d0, r4, r5
 8009896:	4616      	mov	r6, r2
 8009898:	f002 fc20 	bl	800c0dc <__ulp>
 800989c:	ec51 0b10 	vmov	r0, r1, d0
 80098a0:	b17e      	cbz	r6, 80098c2 <sulp+0x36>
 80098a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80098a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	dd09      	ble.n	80098c2 <sulp+0x36>
 80098ae:	051b      	lsls	r3, r3, #20
 80098b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80098b4:	2400      	movs	r4, #0
 80098b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80098ba:	4622      	mov	r2, r4
 80098bc:	462b      	mov	r3, r5
 80098be:	f7f6 fe9b 	bl	80005f8 <__aeabi_dmul>
 80098c2:	bd70      	pop	{r4, r5, r6, pc}
 80098c4:	0000      	movs	r0, r0
	...

080098c8 <_strtod_l>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	b0a3      	sub	sp, #140	; 0x8c
 80098ce:	461f      	mov	r7, r3
 80098d0:	2300      	movs	r3, #0
 80098d2:	931e      	str	r3, [sp, #120]	; 0x78
 80098d4:	4ba4      	ldr	r3, [pc, #656]	; (8009b68 <_strtod_l+0x2a0>)
 80098d6:	9219      	str	r2, [sp, #100]	; 0x64
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	9307      	str	r3, [sp, #28]
 80098dc:	4604      	mov	r4, r0
 80098de:	4618      	mov	r0, r3
 80098e0:	4688      	mov	r8, r1
 80098e2:	f7f6 fc75 	bl	80001d0 <strlen>
 80098e6:	f04f 0a00 	mov.w	sl, #0
 80098ea:	4605      	mov	r5, r0
 80098ec:	f04f 0b00 	mov.w	fp, #0
 80098f0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80098f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098f6:	781a      	ldrb	r2, [r3, #0]
 80098f8:	2a2b      	cmp	r2, #43	; 0x2b
 80098fa:	d04c      	beq.n	8009996 <_strtod_l+0xce>
 80098fc:	d839      	bhi.n	8009972 <_strtod_l+0xaa>
 80098fe:	2a0d      	cmp	r2, #13
 8009900:	d832      	bhi.n	8009968 <_strtod_l+0xa0>
 8009902:	2a08      	cmp	r2, #8
 8009904:	d832      	bhi.n	800996c <_strtod_l+0xa4>
 8009906:	2a00      	cmp	r2, #0
 8009908:	d03c      	beq.n	8009984 <_strtod_l+0xbc>
 800990a:	2300      	movs	r3, #0
 800990c:	930e      	str	r3, [sp, #56]	; 0x38
 800990e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8009910:	7833      	ldrb	r3, [r6, #0]
 8009912:	2b30      	cmp	r3, #48	; 0x30
 8009914:	f040 80b4 	bne.w	8009a80 <_strtod_l+0x1b8>
 8009918:	7873      	ldrb	r3, [r6, #1]
 800991a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800991e:	2b58      	cmp	r3, #88	; 0x58
 8009920:	d16c      	bne.n	80099fc <_strtod_l+0x134>
 8009922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009924:	9301      	str	r3, [sp, #4]
 8009926:	ab1e      	add	r3, sp, #120	; 0x78
 8009928:	9702      	str	r7, [sp, #8]
 800992a:	9300      	str	r3, [sp, #0]
 800992c:	4a8f      	ldr	r2, [pc, #572]	; (8009b6c <_strtod_l+0x2a4>)
 800992e:	ab1f      	add	r3, sp, #124	; 0x7c
 8009930:	a91d      	add	r1, sp, #116	; 0x74
 8009932:	4620      	mov	r0, r4
 8009934:	f001 fd40 	bl	800b3b8 <__gethex>
 8009938:	f010 0707 	ands.w	r7, r0, #7
 800993c:	4605      	mov	r5, r0
 800993e:	d005      	beq.n	800994c <_strtod_l+0x84>
 8009940:	2f06      	cmp	r7, #6
 8009942:	d12a      	bne.n	800999a <_strtod_l+0xd2>
 8009944:	3601      	adds	r6, #1
 8009946:	2300      	movs	r3, #0
 8009948:	961d      	str	r6, [sp, #116]	; 0x74
 800994a:	930e      	str	r3, [sp, #56]	; 0x38
 800994c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800994e:	2b00      	cmp	r3, #0
 8009950:	f040 8596 	bne.w	800a480 <_strtod_l+0xbb8>
 8009954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009956:	b1db      	cbz	r3, 8009990 <_strtod_l+0xc8>
 8009958:	4652      	mov	r2, sl
 800995a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800995e:	ec43 2b10 	vmov	d0, r2, r3
 8009962:	b023      	add	sp, #140	; 0x8c
 8009964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009968:	2a20      	cmp	r2, #32
 800996a:	d1ce      	bne.n	800990a <_strtod_l+0x42>
 800996c:	3301      	adds	r3, #1
 800996e:	931d      	str	r3, [sp, #116]	; 0x74
 8009970:	e7c0      	b.n	80098f4 <_strtod_l+0x2c>
 8009972:	2a2d      	cmp	r2, #45	; 0x2d
 8009974:	d1c9      	bne.n	800990a <_strtod_l+0x42>
 8009976:	2201      	movs	r2, #1
 8009978:	920e      	str	r2, [sp, #56]	; 0x38
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	921d      	str	r2, [sp, #116]	; 0x74
 800997e:	785b      	ldrb	r3, [r3, #1]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d1c4      	bne.n	800990e <_strtod_l+0x46>
 8009984:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009986:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800998a:	2b00      	cmp	r3, #0
 800998c:	f040 8576 	bne.w	800a47c <_strtod_l+0xbb4>
 8009990:	4652      	mov	r2, sl
 8009992:	465b      	mov	r3, fp
 8009994:	e7e3      	b.n	800995e <_strtod_l+0x96>
 8009996:	2200      	movs	r2, #0
 8009998:	e7ee      	b.n	8009978 <_strtod_l+0xb0>
 800999a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800999c:	b13a      	cbz	r2, 80099ae <_strtod_l+0xe6>
 800999e:	2135      	movs	r1, #53	; 0x35
 80099a0:	a820      	add	r0, sp, #128	; 0x80
 80099a2:	f002 fca6 	bl	800c2f2 <__copybits>
 80099a6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80099a8:	4620      	mov	r0, r4
 80099aa:	f002 f86b 	bl	800ba84 <_Bfree>
 80099ae:	3f01      	subs	r7, #1
 80099b0:	2f05      	cmp	r7, #5
 80099b2:	d807      	bhi.n	80099c4 <_strtod_l+0xfc>
 80099b4:	e8df f007 	tbb	[pc, r7]
 80099b8:	1d180b0e 	.word	0x1d180b0e
 80099bc:	030e      	.short	0x030e
 80099be:	f04f 0b00 	mov.w	fp, #0
 80099c2:	46da      	mov	sl, fp
 80099c4:	0728      	lsls	r0, r5, #28
 80099c6:	d5c1      	bpl.n	800994c <_strtod_l+0x84>
 80099c8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80099cc:	e7be      	b.n	800994c <_strtod_l+0x84>
 80099ce:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80099d2:	e7f7      	b.n	80099c4 <_strtod_l+0xfc>
 80099d4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80099d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80099da:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80099de:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80099e2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80099e6:	e7ed      	b.n	80099c4 <_strtod_l+0xfc>
 80099e8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8009b70 <_strtod_l+0x2a8>
 80099ec:	f04f 0a00 	mov.w	sl, #0
 80099f0:	e7e8      	b.n	80099c4 <_strtod_l+0xfc>
 80099f2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80099f6:	f04f 3aff 	mov.w	sl, #4294967295
 80099fa:	e7e3      	b.n	80099c4 <_strtod_l+0xfc>
 80099fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	921d      	str	r2, [sp, #116]	; 0x74
 8009a02:	785b      	ldrb	r3, [r3, #1]
 8009a04:	2b30      	cmp	r3, #48	; 0x30
 8009a06:	d0f9      	beq.n	80099fc <_strtod_l+0x134>
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d09f      	beq.n	800994c <_strtod_l+0x84>
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f04f 0900 	mov.w	r9, #0
 8009a12:	9304      	str	r3, [sp, #16]
 8009a14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009a16:	930a      	str	r3, [sp, #40]	; 0x28
 8009a18:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a1c:	464f      	mov	r7, r9
 8009a1e:	220a      	movs	r2, #10
 8009a20:	981d      	ldr	r0, [sp, #116]	; 0x74
 8009a22:	7806      	ldrb	r6, [r0, #0]
 8009a24:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009a28:	b2d9      	uxtb	r1, r3
 8009a2a:	2909      	cmp	r1, #9
 8009a2c:	d92a      	bls.n	8009a84 <_strtod_l+0x1bc>
 8009a2e:	9907      	ldr	r1, [sp, #28]
 8009a30:	462a      	mov	r2, r5
 8009a32:	f002 fed1 	bl	800c7d8 <strncmp>
 8009a36:	b398      	cbz	r0, 8009aa0 <_strtod_l+0x1d8>
 8009a38:	2000      	movs	r0, #0
 8009a3a:	4633      	mov	r3, r6
 8009a3c:	463d      	mov	r5, r7
 8009a3e:	9007      	str	r0, [sp, #28]
 8009a40:	4602      	mov	r2, r0
 8009a42:	2b65      	cmp	r3, #101	; 0x65
 8009a44:	d001      	beq.n	8009a4a <_strtod_l+0x182>
 8009a46:	2b45      	cmp	r3, #69	; 0x45
 8009a48:	d118      	bne.n	8009a7c <_strtod_l+0x1b4>
 8009a4a:	b91d      	cbnz	r5, 8009a54 <_strtod_l+0x18c>
 8009a4c:	9b04      	ldr	r3, [sp, #16]
 8009a4e:	4303      	orrs	r3, r0
 8009a50:	d098      	beq.n	8009984 <_strtod_l+0xbc>
 8009a52:	2500      	movs	r5, #0
 8009a54:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8009a58:	f108 0301 	add.w	r3, r8, #1
 8009a5c:	931d      	str	r3, [sp, #116]	; 0x74
 8009a5e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009a62:	2b2b      	cmp	r3, #43	; 0x2b
 8009a64:	d075      	beq.n	8009b52 <_strtod_l+0x28a>
 8009a66:	2b2d      	cmp	r3, #45	; 0x2d
 8009a68:	d07b      	beq.n	8009b62 <_strtod_l+0x29a>
 8009a6a:	f04f 0c00 	mov.w	ip, #0
 8009a6e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8009a72:	2909      	cmp	r1, #9
 8009a74:	f240 8082 	bls.w	8009b7c <_strtod_l+0x2b4>
 8009a78:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8009a7c:	2600      	movs	r6, #0
 8009a7e:	e09d      	b.n	8009bbc <_strtod_l+0x2f4>
 8009a80:	2300      	movs	r3, #0
 8009a82:	e7c4      	b.n	8009a0e <_strtod_l+0x146>
 8009a84:	2f08      	cmp	r7, #8
 8009a86:	bfd8      	it	le
 8009a88:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009a8a:	f100 0001 	add.w	r0, r0, #1
 8009a8e:	bfda      	itte	le
 8009a90:	fb02 3301 	mlale	r3, r2, r1, r3
 8009a94:	9309      	strle	r3, [sp, #36]	; 0x24
 8009a96:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009a9a:	3701      	adds	r7, #1
 8009a9c:	901d      	str	r0, [sp, #116]	; 0x74
 8009a9e:	e7bf      	b.n	8009a20 <_strtod_l+0x158>
 8009aa0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009aa2:	195a      	adds	r2, r3, r5
 8009aa4:	921d      	str	r2, [sp, #116]	; 0x74
 8009aa6:	5d5b      	ldrb	r3, [r3, r5]
 8009aa8:	2f00      	cmp	r7, #0
 8009aaa:	d037      	beq.n	8009b1c <_strtod_l+0x254>
 8009aac:	9007      	str	r0, [sp, #28]
 8009aae:	463d      	mov	r5, r7
 8009ab0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009ab4:	2a09      	cmp	r2, #9
 8009ab6:	d912      	bls.n	8009ade <_strtod_l+0x216>
 8009ab8:	2201      	movs	r2, #1
 8009aba:	e7c2      	b.n	8009a42 <_strtod_l+0x17a>
 8009abc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009abe:	1c5a      	adds	r2, r3, #1
 8009ac0:	921d      	str	r2, [sp, #116]	; 0x74
 8009ac2:	785b      	ldrb	r3, [r3, #1]
 8009ac4:	3001      	adds	r0, #1
 8009ac6:	2b30      	cmp	r3, #48	; 0x30
 8009ac8:	d0f8      	beq.n	8009abc <_strtod_l+0x1f4>
 8009aca:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8009ace:	2a08      	cmp	r2, #8
 8009ad0:	f200 84db 	bhi.w	800a48a <_strtod_l+0xbc2>
 8009ad4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009ad6:	9007      	str	r0, [sp, #28]
 8009ad8:	2000      	movs	r0, #0
 8009ada:	920a      	str	r2, [sp, #40]	; 0x28
 8009adc:	4605      	mov	r5, r0
 8009ade:	3b30      	subs	r3, #48	; 0x30
 8009ae0:	f100 0201 	add.w	r2, r0, #1
 8009ae4:	d014      	beq.n	8009b10 <_strtod_l+0x248>
 8009ae6:	9907      	ldr	r1, [sp, #28]
 8009ae8:	4411      	add	r1, r2
 8009aea:	9107      	str	r1, [sp, #28]
 8009aec:	462a      	mov	r2, r5
 8009aee:	eb00 0e05 	add.w	lr, r0, r5
 8009af2:	210a      	movs	r1, #10
 8009af4:	4572      	cmp	r2, lr
 8009af6:	d113      	bne.n	8009b20 <_strtod_l+0x258>
 8009af8:	182a      	adds	r2, r5, r0
 8009afa:	2a08      	cmp	r2, #8
 8009afc:	f105 0501 	add.w	r5, r5, #1
 8009b00:	4405      	add	r5, r0
 8009b02:	dc1c      	bgt.n	8009b3e <_strtod_l+0x276>
 8009b04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b06:	220a      	movs	r2, #10
 8009b08:	fb02 3301 	mla	r3, r2, r1, r3
 8009b0c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b0e:	2200      	movs	r2, #0
 8009b10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b12:	1c59      	adds	r1, r3, #1
 8009b14:	911d      	str	r1, [sp, #116]	; 0x74
 8009b16:	785b      	ldrb	r3, [r3, #1]
 8009b18:	4610      	mov	r0, r2
 8009b1a:	e7c9      	b.n	8009ab0 <_strtod_l+0x1e8>
 8009b1c:	4638      	mov	r0, r7
 8009b1e:	e7d2      	b.n	8009ac6 <_strtod_l+0x1fe>
 8009b20:	2a08      	cmp	r2, #8
 8009b22:	dc04      	bgt.n	8009b2e <_strtod_l+0x266>
 8009b24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8009b26:	434e      	muls	r6, r1
 8009b28:	9609      	str	r6, [sp, #36]	; 0x24
 8009b2a:	3201      	adds	r2, #1
 8009b2c:	e7e2      	b.n	8009af4 <_strtod_l+0x22c>
 8009b2e:	f102 0c01 	add.w	ip, r2, #1
 8009b32:	f1bc 0f10 	cmp.w	ip, #16
 8009b36:	bfd8      	it	le
 8009b38:	fb01 f909 	mulle.w	r9, r1, r9
 8009b3c:	e7f5      	b.n	8009b2a <_strtod_l+0x262>
 8009b3e:	2d10      	cmp	r5, #16
 8009b40:	bfdc      	itt	le
 8009b42:	220a      	movle	r2, #10
 8009b44:	fb02 3909 	mlale	r9, r2, r9, r3
 8009b48:	e7e1      	b.n	8009b0e <_strtod_l+0x246>
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	9307      	str	r3, [sp, #28]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	e77c      	b.n	8009a4c <_strtod_l+0x184>
 8009b52:	f04f 0c00 	mov.w	ip, #0
 8009b56:	f108 0302 	add.w	r3, r8, #2
 8009b5a:	931d      	str	r3, [sp, #116]	; 0x74
 8009b5c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8009b60:	e785      	b.n	8009a6e <_strtod_l+0x1a6>
 8009b62:	f04f 0c01 	mov.w	ip, #1
 8009b66:	e7f6      	b.n	8009b56 <_strtod_l+0x28e>
 8009b68:	0800d790 	.word	0x0800d790
 8009b6c:	0800d540 	.word	0x0800d540
 8009b70:	7ff00000 	.word	0x7ff00000
 8009b74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b76:	1c59      	adds	r1, r3, #1
 8009b78:	911d      	str	r1, [sp, #116]	; 0x74
 8009b7a:	785b      	ldrb	r3, [r3, #1]
 8009b7c:	2b30      	cmp	r3, #48	; 0x30
 8009b7e:	d0f9      	beq.n	8009b74 <_strtod_l+0x2ac>
 8009b80:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8009b84:	2908      	cmp	r1, #8
 8009b86:	f63f af79 	bhi.w	8009a7c <_strtod_l+0x1b4>
 8009b8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009b8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b90:	9308      	str	r3, [sp, #32]
 8009b92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009b94:	1c59      	adds	r1, r3, #1
 8009b96:	911d      	str	r1, [sp, #116]	; 0x74
 8009b98:	785b      	ldrb	r3, [r3, #1]
 8009b9a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009b9e:	2e09      	cmp	r6, #9
 8009ba0:	d937      	bls.n	8009c12 <_strtod_l+0x34a>
 8009ba2:	9e08      	ldr	r6, [sp, #32]
 8009ba4:	1b89      	subs	r1, r1, r6
 8009ba6:	2908      	cmp	r1, #8
 8009ba8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009bac:	dc02      	bgt.n	8009bb4 <_strtod_l+0x2ec>
 8009bae:	4576      	cmp	r6, lr
 8009bb0:	bfa8      	it	ge
 8009bb2:	4676      	movge	r6, lr
 8009bb4:	f1bc 0f00 	cmp.w	ip, #0
 8009bb8:	d000      	beq.n	8009bbc <_strtod_l+0x2f4>
 8009bba:	4276      	negs	r6, r6
 8009bbc:	2d00      	cmp	r5, #0
 8009bbe:	d14f      	bne.n	8009c60 <_strtod_l+0x398>
 8009bc0:	9904      	ldr	r1, [sp, #16]
 8009bc2:	4301      	orrs	r1, r0
 8009bc4:	f47f aec2 	bne.w	800994c <_strtod_l+0x84>
 8009bc8:	2a00      	cmp	r2, #0
 8009bca:	f47f aedb 	bne.w	8009984 <_strtod_l+0xbc>
 8009bce:	2b69      	cmp	r3, #105	; 0x69
 8009bd0:	d027      	beq.n	8009c22 <_strtod_l+0x35a>
 8009bd2:	dc24      	bgt.n	8009c1e <_strtod_l+0x356>
 8009bd4:	2b49      	cmp	r3, #73	; 0x49
 8009bd6:	d024      	beq.n	8009c22 <_strtod_l+0x35a>
 8009bd8:	2b4e      	cmp	r3, #78	; 0x4e
 8009bda:	f47f aed3 	bne.w	8009984 <_strtod_l+0xbc>
 8009bde:	499e      	ldr	r1, [pc, #632]	; (8009e58 <_strtod_l+0x590>)
 8009be0:	a81d      	add	r0, sp, #116	; 0x74
 8009be2:	f001 fe41 	bl	800b868 <__match>
 8009be6:	2800      	cmp	r0, #0
 8009be8:	f43f aecc 	beq.w	8009984 <_strtod_l+0xbc>
 8009bec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	2b28      	cmp	r3, #40	; 0x28
 8009bf2:	d12d      	bne.n	8009c50 <_strtod_l+0x388>
 8009bf4:	4999      	ldr	r1, [pc, #612]	; (8009e5c <_strtod_l+0x594>)
 8009bf6:	aa20      	add	r2, sp, #128	; 0x80
 8009bf8:	a81d      	add	r0, sp, #116	; 0x74
 8009bfa:	f001 fe49 	bl	800b890 <__hexnan>
 8009bfe:	2805      	cmp	r0, #5
 8009c00:	d126      	bne.n	8009c50 <_strtod_l+0x388>
 8009c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c04:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009c08:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009c0c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009c10:	e69c      	b.n	800994c <_strtod_l+0x84>
 8009c12:	210a      	movs	r1, #10
 8009c14:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009c18:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009c1c:	e7b9      	b.n	8009b92 <_strtod_l+0x2ca>
 8009c1e:	2b6e      	cmp	r3, #110	; 0x6e
 8009c20:	e7db      	b.n	8009bda <_strtod_l+0x312>
 8009c22:	498f      	ldr	r1, [pc, #572]	; (8009e60 <_strtod_l+0x598>)
 8009c24:	a81d      	add	r0, sp, #116	; 0x74
 8009c26:	f001 fe1f 	bl	800b868 <__match>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f43f aeaa 	beq.w	8009984 <_strtod_l+0xbc>
 8009c30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c32:	498c      	ldr	r1, [pc, #560]	; (8009e64 <_strtod_l+0x59c>)
 8009c34:	3b01      	subs	r3, #1
 8009c36:	a81d      	add	r0, sp, #116	; 0x74
 8009c38:	931d      	str	r3, [sp, #116]	; 0x74
 8009c3a:	f001 fe15 	bl	800b868 <__match>
 8009c3e:	b910      	cbnz	r0, 8009c46 <_strtod_l+0x37e>
 8009c40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009c42:	3301      	adds	r3, #1
 8009c44:	931d      	str	r3, [sp, #116]	; 0x74
 8009c46:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8009e74 <_strtod_l+0x5ac>
 8009c4a:	f04f 0a00 	mov.w	sl, #0
 8009c4e:	e67d      	b.n	800994c <_strtod_l+0x84>
 8009c50:	4885      	ldr	r0, [pc, #532]	; (8009e68 <_strtod_l+0x5a0>)
 8009c52:	f002 fda9 	bl	800c7a8 <nan>
 8009c56:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009c5a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009c5e:	e675      	b.n	800994c <_strtod_l+0x84>
 8009c60:	9b07      	ldr	r3, [sp, #28]
 8009c62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c64:	1af3      	subs	r3, r6, r3
 8009c66:	2f00      	cmp	r7, #0
 8009c68:	bf08      	it	eq
 8009c6a:	462f      	moveq	r7, r5
 8009c6c:	2d10      	cmp	r5, #16
 8009c6e:	9308      	str	r3, [sp, #32]
 8009c70:	46a8      	mov	r8, r5
 8009c72:	bfa8      	it	ge
 8009c74:	f04f 0810 	movge.w	r8, #16
 8009c78:	f7f6 fc44 	bl	8000504 <__aeabi_ui2d>
 8009c7c:	2d09      	cmp	r5, #9
 8009c7e:	4682      	mov	sl, r0
 8009c80:	468b      	mov	fp, r1
 8009c82:	dd13      	ble.n	8009cac <_strtod_l+0x3e4>
 8009c84:	4b79      	ldr	r3, [pc, #484]	; (8009e6c <_strtod_l+0x5a4>)
 8009c86:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009c8a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009c8e:	f7f6 fcb3 	bl	80005f8 <__aeabi_dmul>
 8009c92:	4682      	mov	sl, r0
 8009c94:	4648      	mov	r0, r9
 8009c96:	468b      	mov	fp, r1
 8009c98:	f7f6 fc34 	bl	8000504 <__aeabi_ui2d>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	4650      	mov	r0, sl
 8009ca2:	4659      	mov	r1, fp
 8009ca4:	f7f6 faf2 	bl	800028c <__adddf3>
 8009ca8:	4682      	mov	sl, r0
 8009caa:	468b      	mov	fp, r1
 8009cac:	2d0f      	cmp	r5, #15
 8009cae:	dc38      	bgt.n	8009d22 <_strtod_l+0x45a>
 8009cb0:	9b08      	ldr	r3, [sp, #32]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f43f ae4a 	beq.w	800994c <_strtod_l+0x84>
 8009cb8:	dd24      	ble.n	8009d04 <_strtod_l+0x43c>
 8009cba:	2b16      	cmp	r3, #22
 8009cbc:	dc0b      	bgt.n	8009cd6 <_strtod_l+0x40e>
 8009cbe:	4d6b      	ldr	r5, [pc, #428]	; (8009e6c <_strtod_l+0x5a4>)
 8009cc0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8009cc4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009cc8:	4652      	mov	r2, sl
 8009cca:	465b      	mov	r3, fp
 8009ccc:	f7f6 fc94 	bl	80005f8 <__aeabi_dmul>
 8009cd0:	4682      	mov	sl, r0
 8009cd2:	468b      	mov	fp, r1
 8009cd4:	e63a      	b.n	800994c <_strtod_l+0x84>
 8009cd6:	9a08      	ldr	r2, [sp, #32]
 8009cd8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	db20      	blt.n	8009d22 <_strtod_l+0x45a>
 8009ce0:	4c62      	ldr	r4, [pc, #392]	; (8009e6c <_strtod_l+0x5a4>)
 8009ce2:	f1c5 050f 	rsb	r5, r5, #15
 8009ce6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009cea:	4652      	mov	r2, sl
 8009cec:	465b      	mov	r3, fp
 8009cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cf2:	f7f6 fc81 	bl	80005f8 <__aeabi_dmul>
 8009cf6:	9b08      	ldr	r3, [sp, #32]
 8009cf8:	1b5d      	subs	r5, r3, r5
 8009cfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009cfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009d02:	e7e3      	b.n	8009ccc <_strtod_l+0x404>
 8009d04:	9b08      	ldr	r3, [sp, #32]
 8009d06:	3316      	adds	r3, #22
 8009d08:	db0b      	blt.n	8009d22 <_strtod_l+0x45a>
 8009d0a:	9b07      	ldr	r3, [sp, #28]
 8009d0c:	4a57      	ldr	r2, [pc, #348]	; (8009e6c <_strtod_l+0x5a4>)
 8009d0e:	1b9e      	subs	r6, r3, r6
 8009d10:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8009d14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d18:	4650      	mov	r0, sl
 8009d1a:	4659      	mov	r1, fp
 8009d1c:	f7f6 fd96 	bl	800084c <__aeabi_ddiv>
 8009d20:	e7d6      	b.n	8009cd0 <_strtod_l+0x408>
 8009d22:	9b08      	ldr	r3, [sp, #32]
 8009d24:	eba5 0808 	sub.w	r8, r5, r8
 8009d28:	4498      	add	r8, r3
 8009d2a:	f1b8 0f00 	cmp.w	r8, #0
 8009d2e:	dd71      	ble.n	8009e14 <_strtod_l+0x54c>
 8009d30:	f018 030f 	ands.w	r3, r8, #15
 8009d34:	d00a      	beq.n	8009d4c <_strtod_l+0x484>
 8009d36:	494d      	ldr	r1, [pc, #308]	; (8009e6c <_strtod_l+0x5a4>)
 8009d38:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d3c:	4652      	mov	r2, sl
 8009d3e:	465b      	mov	r3, fp
 8009d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d44:	f7f6 fc58 	bl	80005f8 <__aeabi_dmul>
 8009d48:	4682      	mov	sl, r0
 8009d4a:	468b      	mov	fp, r1
 8009d4c:	f038 080f 	bics.w	r8, r8, #15
 8009d50:	d04d      	beq.n	8009dee <_strtod_l+0x526>
 8009d52:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009d56:	dd22      	ble.n	8009d9e <_strtod_l+0x4d6>
 8009d58:	2500      	movs	r5, #0
 8009d5a:	462e      	mov	r6, r5
 8009d5c:	9509      	str	r5, [sp, #36]	; 0x24
 8009d5e:	9507      	str	r5, [sp, #28]
 8009d60:	2322      	movs	r3, #34	; 0x22
 8009d62:	f8df b110 	ldr.w	fp, [pc, #272]	; 8009e74 <_strtod_l+0x5ac>
 8009d66:	6023      	str	r3, [r4, #0]
 8009d68:	f04f 0a00 	mov.w	sl, #0
 8009d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	f43f adec 	beq.w	800994c <_strtod_l+0x84>
 8009d74:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009d76:	4620      	mov	r0, r4
 8009d78:	f001 fe84 	bl	800ba84 <_Bfree>
 8009d7c:	9907      	ldr	r1, [sp, #28]
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f001 fe80 	bl	800ba84 <_Bfree>
 8009d84:	4631      	mov	r1, r6
 8009d86:	4620      	mov	r0, r4
 8009d88:	f001 fe7c 	bl	800ba84 <_Bfree>
 8009d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f001 fe78 	bl	800ba84 <_Bfree>
 8009d94:	4629      	mov	r1, r5
 8009d96:	4620      	mov	r0, r4
 8009d98:	f001 fe74 	bl	800ba84 <_Bfree>
 8009d9c:	e5d6      	b.n	800994c <_strtod_l+0x84>
 8009d9e:	2300      	movs	r3, #0
 8009da0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009da4:	4650      	mov	r0, sl
 8009da6:	4659      	mov	r1, fp
 8009da8:	4699      	mov	r9, r3
 8009daa:	f1b8 0f01 	cmp.w	r8, #1
 8009dae:	dc21      	bgt.n	8009df4 <_strtod_l+0x52c>
 8009db0:	b10b      	cbz	r3, 8009db6 <_strtod_l+0x4ee>
 8009db2:	4682      	mov	sl, r0
 8009db4:	468b      	mov	fp, r1
 8009db6:	4b2e      	ldr	r3, [pc, #184]	; (8009e70 <_strtod_l+0x5a8>)
 8009db8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009dbc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009dc0:	4652      	mov	r2, sl
 8009dc2:	465b      	mov	r3, fp
 8009dc4:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009dc8:	f7f6 fc16 	bl	80005f8 <__aeabi_dmul>
 8009dcc:	4b29      	ldr	r3, [pc, #164]	; (8009e74 <_strtod_l+0x5ac>)
 8009dce:	460a      	mov	r2, r1
 8009dd0:	400b      	ands	r3, r1
 8009dd2:	4929      	ldr	r1, [pc, #164]	; (8009e78 <_strtod_l+0x5b0>)
 8009dd4:	428b      	cmp	r3, r1
 8009dd6:	4682      	mov	sl, r0
 8009dd8:	d8be      	bhi.n	8009d58 <_strtod_l+0x490>
 8009dda:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009dde:	428b      	cmp	r3, r1
 8009de0:	bf86      	itte	hi
 8009de2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009e7c <_strtod_l+0x5b4>
 8009de6:	f04f 3aff 	movhi.w	sl, #4294967295
 8009dea:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009dee:	2300      	movs	r3, #0
 8009df0:	9304      	str	r3, [sp, #16]
 8009df2:	e081      	b.n	8009ef8 <_strtod_l+0x630>
 8009df4:	f018 0f01 	tst.w	r8, #1
 8009df8:	d007      	beq.n	8009e0a <_strtod_l+0x542>
 8009dfa:	4b1d      	ldr	r3, [pc, #116]	; (8009e70 <_strtod_l+0x5a8>)
 8009dfc:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 fbf8 	bl	80005f8 <__aeabi_dmul>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	f109 0901 	add.w	r9, r9, #1
 8009e0e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009e12:	e7ca      	b.n	8009daa <_strtod_l+0x4e2>
 8009e14:	d0eb      	beq.n	8009dee <_strtod_l+0x526>
 8009e16:	f1c8 0800 	rsb	r8, r8, #0
 8009e1a:	f018 020f 	ands.w	r2, r8, #15
 8009e1e:	d00a      	beq.n	8009e36 <_strtod_l+0x56e>
 8009e20:	4b12      	ldr	r3, [pc, #72]	; (8009e6c <_strtod_l+0x5a4>)
 8009e22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e26:	4650      	mov	r0, sl
 8009e28:	4659      	mov	r1, fp
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	f7f6 fd0d 	bl	800084c <__aeabi_ddiv>
 8009e32:	4682      	mov	sl, r0
 8009e34:	468b      	mov	fp, r1
 8009e36:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009e3a:	d0d8      	beq.n	8009dee <_strtod_l+0x526>
 8009e3c:	f1b8 0f1f 	cmp.w	r8, #31
 8009e40:	dd1e      	ble.n	8009e80 <_strtod_l+0x5b8>
 8009e42:	2500      	movs	r5, #0
 8009e44:	462e      	mov	r6, r5
 8009e46:	9509      	str	r5, [sp, #36]	; 0x24
 8009e48:	9507      	str	r5, [sp, #28]
 8009e4a:	2322      	movs	r3, #34	; 0x22
 8009e4c:	f04f 0a00 	mov.w	sl, #0
 8009e50:	f04f 0b00 	mov.w	fp, #0
 8009e54:	6023      	str	r3, [r4, #0]
 8009e56:	e789      	b.n	8009d6c <_strtod_l+0x4a4>
 8009e58:	0800d511 	.word	0x0800d511
 8009e5c:	0800d554 	.word	0x0800d554
 8009e60:	0800d509 	.word	0x0800d509
 8009e64:	0800d694 	.word	0x0800d694
 8009e68:	0800d950 	.word	0x0800d950
 8009e6c:	0800d830 	.word	0x0800d830
 8009e70:	0800d808 	.word	0x0800d808
 8009e74:	7ff00000 	.word	0x7ff00000
 8009e78:	7ca00000 	.word	0x7ca00000
 8009e7c:	7fefffff 	.word	0x7fefffff
 8009e80:	f018 0310 	ands.w	r3, r8, #16
 8009e84:	bf18      	it	ne
 8009e86:	236a      	movne	r3, #106	; 0x6a
 8009e88:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800a240 <_strtod_l+0x978>
 8009e8c:	9304      	str	r3, [sp, #16]
 8009e8e:	4650      	mov	r0, sl
 8009e90:	4659      	mov	r1, fp
 8009e92:	2300      	movs	r3, #0
 8009e94:	f018 0f01 	tst.w	r8, #1
 8009e98:	d004      	beq.n	8009ea4 <_strtod_l+0x5dc>
 8009e9a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009e9e:	f7f6 fbab 	bl	80005f8 <__aeabi_dmul>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009ea8:	f109 0908 	add.w	r9, r9, #8
 8009eac:	d1f2      	bne.n	8009e94 <_strtod_l+0x5cc>
 8009eae:	b10b      	cbz	r3, 8009eb4 <_strtod_l+0x5ec>
 8009eb0:	4682      	mov	sl, r0
 8009eb2:	468b      	mov	fp, r1
 8009eb4:	9b04      	ldr	r3, [sp, #16]
 8009eb6:	b1bb      	cbz	r3, 8009ee8 <_strtod_l+0x620>
 8009eb8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009ebc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	4659      	mov	r1, fp
 8009ec4:	dd10      	ble.n	8009ee8 <_strtod_l+0x620>
 8009ec6:	2b1f      	cmp	r3, #31
 8009ec8:	f340 8128 	ble.w	800a11c <_strtod_l+0x854>
 8009ecc:	2b34      	cmp	r3, #52	; 0x34
 8009ece:	bfde      	ittt	le
 8009ed0:	3b20      	suble	r3, #32
 8009ed2:	f04f 32ff 	movle.w	r2, #4294967295
 8009ed6:	fa02 f303 	lslle.w	r3, r2, r3
 8009eda:	f04f 0a00 	mov.w	sl, #0
 8009ede:	bfcc      	ite	gt
 8009ee0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009ee4:	ea03 0b01 	andle.w	fp, r3, r1
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2300      	movs	r3, #0
 8009eec:	4650      	mov	r0, sl
 8009eee:	4659      	mov	r1, fp
 8009ef0:	f7f6 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d1a4      	bne.n	8009e42 <_strtod_l+0x57a>
 8009ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009efa:	9300      	str	r3, [sp, #0]
 8009efc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009efe:	462b      	mov	r3, r5
 8009f00:	463a      	mov	r2, r7
 8009f02:	4620      	mov	r0, r4
 8009f04:	f001 fe2a 	bl	800bb5c <__s2b>
 8009f08:	9009      	str	r0, [sp, #36]	; 0x24
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	f43f af24 	beq.w	8009d58 <_strtod_l+0x490>
 8009f10:	9b07      	ldr	r3, [sp, #28]
 8009f12:	1b9e      	subs	r6, r3, r6
 8009f14:	9b08      	ldr	r3, [sp, #32]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	bfb4      	ite	lt
 8009f1a:	4633      	movlt	r3, r6
 8009f1c:	2300      	movge	r3, #0
 8009f1e:	9310      	str	r3, [sp, #64]	; 0x40
 8009f20:	9b08      	ldr	r3, [sp, #32]
 8009f22:	2500      	movs	r5, #0
 8009f24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009f28:	9318      	str	r3, [sp, #96]	; 0x60
 8009f2a:	462e      	mov	r6, r5
 8009f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2e:	4620      	mov	r0, r4
 8009f30:	6859      	ldr	r1, [r3, #4]
 8009f32:	f001 fd67 	bl	800ba04 <_Balloc>
 8009f36:	9007      	str	r0, [sp, #28]
 8009f38:	2800      	cmp	r0, #0
 8009f3a:	f43f af11 	beq.w	8009d60 <_strtod_l+0x498>
 8009f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f40:	691a      	ldr	r2, [r3, #16]
 8009f42:	3202      	adds	r2, #2
 8009f44:	f103 010c 	add.w	r1, r3, #12
 8009f48:	0092      	lsls	r2, r2, #2
 8009f4a:	300c      	adds	r0, #12
 8009f4c:	f7fe fde8 	bl	8008b20 <memcpy>
 8009f50:	ec4b ab10 	vmov	d0, sl, fp
 8009f54:	aa20      	add	r2, sp, #128	; 0x80
 8009f56:	a91f      	add	r1, sp, #124	; 0x7c
 8009f58:	4620      	mov	r0, r4
 8009f5a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8009f5e:	f002 f939 	bl	800c1d4 <__d2b>
 8009f62:	901e      	str	r0, [sp, #120]	; 0x78
 8009f64:	2800      	cmp	r0, #0
 8009f66:	f43f aefb 	beq.w	8009d60 <_strtod_l+0x498>
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	f001 fe8f 	bl	800bc90 <__i2b>
 8009f72:	4606      	mov	r6, r0
 8009f74:	2800      	cmp	r0, #0
 8009f76:	f43f aef3 	beq.w	8009d60 <_strtod_l+0x498>
 8009f7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009f7c:	9904      	ldr	r1, [sp, #16]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	bfab      	itete	ge
 8009f82:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8009f84:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8009f86:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8009f88:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8009f8c:	bfac      	ite	ge
 8009f8e:	eb03 0902 	addge.w	r9, r3, r2
 8009f92:	1ad7      	sublt	r7, r2, r3
 8009f94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009f96:	eba3 0801 	sub.w	r8, r3, r1
 8009f9a:	4490      	add	r8, r2
 8009f9c:	4ba3      	ldr	r3, [pc, #652]	; (800a22c <_strtod_l+0x964>)
 8009f9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009fa2:	4598      	cmp	r8, r3
 8009fa4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009fa8:	f280 80cc 	bge.w	800a144 <_strtod_l+0x87c>
 8009fac:	eba3 0308 	sub.w	r3, r3, r8
 8009fb0:	2b1f      	cmp	r3, #31
 8009fb2:	eba2 0203 	sub.w	r2, r2, r3
 8009fb6:	f04f 0101 	mov.w	r1, #1
 8009fba:	f300 80b6 	bgt.w	800a12a <_strtod_l+0x862>
 8009fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc2:	9311      	str	r3, [sp, #68]	; 0x44
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	930c      	str	r3, [sp, #48]	; 0x30
 8009fc8:	eb09 0802 	add.w	r8, r9, r2
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	45c1      	cmp	r9, r8
 8009fd0:	4417      	add	r7, r2
 8009fd2:	441f      	add	r7, r3
 8009fd4:	464b      	mov	r3, r9
 8009fd6:	bfa8      	it	ge
 8009fd8:	4643      	movge	r3, r8
 8009fda:	42bb      	cmp	r3, r7
 8009fdc:	bfa8      	it	ge
 8009fde:	463b      	movge	r3, r7
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bfc2      	ittt	gt
 8009fe4:	eba8 0803 	subgt.w	r8, r8, r3
 8009fe8:	1aff      	subgt	r7, r7, r3
 8009fea:	eba9 0903 	subgt.w	r9, r9, r3
 8009fee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	dd17      	ble.n	800a024 <_strtod_l+0x75c>
 8009ff4:	4631      	mov	r1, r6
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	4620      	mov	r0, r4
 8009ffa:	f001 ff05 	bl	800be08 <__pow5mult>
 8009ffe:	4606      	mov	r6, r0
 800a000:	2800      	cmp	r0, #0
 800a002:	f43f aead 	beq.w	8009d60 <_strtod_l+0x498>
 800a006:	4601      	mov	r1, r0
 800a008:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a00a:	4620      	mov	r0, r4
 800a00c:	f001 fe56 	bl	800bcbc <__multiply>
 800a010:	900f      	str	r0, [sp, #60]	; 0x3c
 800a012:	2800      	cmp	r0, #0
 800a014:	f43f aea4 	beq.w	8009d60 <_strtod_l+0x498>
 800a018:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a01a:	4620      	mov	r0, r4
 800a01c:	f001 fd32 	bl	800ba84 <_Bfree>
 800a020:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a022:	931e      	str	r3, [sp, #120]	; 0x78
 800a024:	f1b8 0f00 	cmp.w	r8, #0
 800a028:	f300 8091 	bgt.w	800a14e <_strtod_l+0x886>
 800a02c:	9b08      	ldr	r3, [sp, #32]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	dd08      	ble.n	800a044 <_strtod_l+0x77c>
 800a032:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a034:	9907      	ldr	r1, [sp, #28]
 800a036:	4620      	mov	r0, r4
 800a038:	f001 fee6 	bl	800be08 <__pow5mult>
 800a03c:	9007      	str	r0, [sp, #28]
 800a03e:	2800      	cmp	r0, #0
 800a040:	f43f ae8e 	beq.w	8009d60 <_strtod_l+0x498>
 800a044:	2f00      	cmp	r7, #0
 800a046:	dd08      	ble.n	800a05a <_strtod_l+0x792>
 800a048:	9907      	ldr	r1, [sp, #28]
 800a04a:	463a      	mov	r2, r7
 800a04c:	4620      	mov	r0, r4
 800a04e:	f001 ff35 	bl	800bebc <__lshift>
 800a052:	9007      	str	r0, [sp, #28]
 800a054:	2800      	cmp	r0, #0
 800a056:	f43f ae83 	beq.w	8009d60 <_strtod_l+0x498>
 800a05a:	f1b9 0f00 	cmp.w	r9, #0
 800a05e:	dd08      	ble.n	800a072 <_strtod_l+0x7aa>
 800a060:	4631      	mov	r1, r6
 800a062:	464a      	mov	r2, r9
 800a064:	4620      	mov	r0, r4
 800a066:	f001 ff29 	bl	800bebc <__lshift>
 800a06a:	4606      	mov	r6, r0
 800a06c:	2800      	cmp	r0, #0
 800a06e:	f43f ae77 	beq.w	8009d60 <_strtod_l+0x498>
 800a072:	9a07      	ldr	r2, [sp, #28]
 800a074:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a076:	4620      	mov	r0, r4
 800a078:	f001 ffa8 	bl	800bfcc <__mdiff>
 800a07c:	4605      	mov	r5, r0
 800a07e:	2800      	cmp	r0, #0
 800a080:	f43f ae6e 	beq.w	8009d60 <_strtod_l+0x498>
 800a084:	68c3      	ldr	r3, [r0, #12]
 800a086:	930f      	str	r3, [sp, #60]	; 0x3c
 800a088:	2300      	movs	r3, #0
 800a08a:	60c3      	str	r3, [r0, #12]
 800a08c:	4631      	mov	r1, r6
 800a08e:	f001 ff81 	bl	800bf94 <__mcmp>
 800a092:	2800      	cmp	r0, #0
 800a094:	da65      	bge.n	800a162 <_strtod_l+0x89a>
 800a096:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a098:	ea53 030a 	orrs.w	r3, r3, sl
 800a09c:	f040 8087 	bne.w	800a1ae <_strtod_l+0x8e6>
 800a0a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f040 8082 	bne.w	800a1ae <_strtod_l+0x8e6>
 800a0aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a0ae:	0d1b      	lsrs	r3, r3, #20
 800a0b0:	051b      	lsls	r3, r3, #20
 800a0b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a0b6:	d97a      	bls.n	800a1ae <_strtod_l+0x8e6>
 800a0b8:	696b      	ldr	r3, [r5, #20]
 800a0ba:	b913      	cbnz	r3, 800a0c2 <_strtod_l+0x7fa>
 800a0bc:	692b      	ldr	r3, [r5, #16]
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	dd75      	ble.n	800a1ae <_strtod_l+0x8e6>
 800a0c2:	4629      	mov	r1, r5
 800a0c4:	2201      	movs	r2, #1
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f001 fef8 	bl	800bebc <__lshift>
 800a0cc:	4631      	mov	r1, r6
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	f001 ff60 	bl	800bf94 <__mcmp>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	dd6a      	ble.n	800a1ae <_strtod_l+0x8e6>
 800a0d8:	9904      	ldr	r1, [sp, #16]
 800a0da:	4a55      	ldr	r2, [pc, #340]	; (800a230 <_strtod_l+0x968>)
 800a0dc:	465b      	mov	r3, fp
 800a0de:	2900      	cmp	r1, #0
 800a0e0:	f000 8085 	beq.w	800a1ee <_strtod_l+0x926>
 800a0e4:	ea02 010b 	and.w	r1, r2, fp
 800a0e8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a0ec:	dc7f      	bgt.n	800a1ee <_strtod_l+0x926>
 800a0ee:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a0f2:	f77f aeaa 	ble.w	8009e4a <_strtod_l+0x582>
 800a0f6:	4a4f      	ldr	r2, [pc, #316]	; (800a234 <_strtod_l+0x96c>)
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800a0fe:	4650      	mov	r0, sl
 800a100:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a104:	4659      	mov	r1, fp
 800a106:	f7f6 fa77 	bl	80005f8 <__aeabi_dmul>
 800a10a:	460b      	mov	r3, r1
 800a10c:	4303      	orrs	r3, r0
 800a10e:	bf08      	it	eq
 800a110:	2322      	moveq	r3, #34	; 0x22
 800a112:	4682      	mov	sl, r0
 800a114:	468b      	mov	fp, r1
 800a116:	bf08      	it	eq
 800a118:	6023      	streq	r3, [r4, #0]
 800a11a:	e62b      	b.n	8009d74 <_strtod_l+0x4ac>
 800a11c:	f04f 32ff 	mov.w	r2, #4294967295
 800a120:	fa02 f303 	lsl.w	r3, r2, r3
 800a124:	ea03 0a0a 	and.w	sl, r3, sl
 800a128:	e6de      	b.n	8009ee8 <_strtod_l+0x620>
 800a12a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a12e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a132:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a136:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a13a:	fa01 f308 	lsl.w	r3, r1, r8
 800a13e:	930c      	str	r3, [sp, #48]	; 0x30
 800a140:	9111      	str	r1, [sp, #68]	; 0x44
 800a142:	e741      	b.n	8009fc8 <_strtod_l+0x700>
 800a144:	2300      	movs	r3, #0
 800a146:	930c      	str	r3, [sp, #48]	; 0x30
 800a148:	2301      	movs	r3, #1
 800a14a:	9311      	str	r3, [sp, #68]	; 0x44
 800a14c:	e73c      	b.n	8009fc8 <_strtod_l+0x700>
 800a14e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a150:	4642      	mov	r2, r8
 800a152:	4620      	mov	r0, r4
 800a154:	f001 feb2 	bl	800bebc <__lshift>
 800a158:	901e      	str	r0, [sp, #120]	; 0x78
 800a15a:	2800      	cmp	r0, #0
 800a15c:	f47f af66 	bne.w	800a02c <_strtod_l+0x764>
 800a160:	e5fe      	b.n	8009d60 <_strtod_l+0x498>
 800a162:	465f      	mov	r7, fp
 800a164:	d16e      	bne.n	800a244 <_strtod_l+0x97c>
 800a166:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a168:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a16c:	b342      	cbz	r2, 800a1c0 <_strtod_l+0x8f8>
 800a16e:	4a32      	ldr	r2, [pc, #200]	; (800a238 <_strtod_l+0x970>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d128      	bne.n	800a1c6 <_strtod_l+0x8fe>
 800a174:	9b04      	ldr	r3, [sp, #16]
 800a176:	4650      	mov	r0, sl
 800a178:	b1eb      	cbz	r3, 800a1b6 <_strtod_l+0x8ee>
 800a17a:	4a2d      	ldr	r2, [pc, #180]	; (800a230 <_strtod_l+0x968>)
 800a17c:	403a      	ands	r2, r7
 800a17e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800a182:	f04f 31ff 	mov.w	r1, #4294967295
 800a186:	d819      	bhi.n	800a1bc <_strtod_l+0x8f4>
 800a188:	0d12      	lsrs	r2, r2, #20
 800a18a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a18e:	fa01 f303 	lsl.w	r3, r1, r3
 800a192:	4298      	cmp	r0, r3
 800a194:	d117      	bne.n	800a1c6 <_strtod_l+0x8fe>
 800a196:	4b29      	ldr	r3, [pc, #164]	; (800a23c <_strtod_l+0x974>)
 800a198:	429f      	cmp	r7, r3
 800a19a:	d102      	bne.n	800a1a2 <_strtod_l+0x8da>
 800a19c:	3001      	adds	r0, #1
 800a19e:	f43f addf 	beq.w	8009d60 <_strtod_l+0x498>
 800a1a2:	4b23      	ldr	r3, [pc, #140]	; (800a230 <_strtod_l+0x968>)
 800a1a4:	403b      	ands	r3, r7
 800a1a6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a1aa:	f04f 0a00 	mov.w	sl, #0
 800a1ae:	9b04      	ldr	r3, [sp, #16]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1a0      	bne.n	800a0f6 <_strtod_l+0x82e>
 800a1b4:	e5de      	b.n	8009d74 <_strtod_l+0x4ac>
 800a1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ba:	e7ea      	b.n	800a192 <_strtod_l+0x8ca>
 800a1bc:	460b      	mov	r3, r1
 800a1be:	e7e8      	b.n	800a192 <_strtod_l+0x8ca>
 800a1c0:	ea53 030a 	orrs.w	r3, r3, sl
 800a1c4:	d088      	beq.n	800a0d8 <_strtod_l+0x810>
 800a1c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1c8:	b1db      	cbz	r3, 800a202 <_strtod_l+0x93a>
 800a1ca:	423b      	tst	r3, r7
 800a1cc:	d0ef      	beq.n	800a1ae <_strtod_l+0x8e6>
 800a1ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a1d0:	9a04      	ldr	r2, [sp, #16]
 800a1d2:	4650      	mov	r0, sl
 800a1d4:	4659      	mov	r1, fp
 800a1d6:	b1c3      	cbz	r3, 800a20a <_strtod_l+0x942>
 800a1d8:	f7ff fb58 	bl	800988c <sulp>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1e4:	f7f6 f852 	bl	800028c <__adddf3>
 800a1e8:	4682      	mov	sl, r0
 800a1ea:	468b      	mov	fp, r1
 800a1ec:	e7df      	b.n	800a1ae <_strtod_l+0x8e6>
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a1f4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a1f8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a1fc:	f04f 3aff 	mov.w	sl, #4294967295
 800a200:	e7d5      	b.n	800a1ae <_strtod_l+0x8e6>
 800a202:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a204:	ea13 0f0a 	tst.w	r3, sl
 800a208:	e7e0      	b.n	800a1cc <_strtod_l+0x904>
 800a20a:	f7ff fb3f 	bl	800988c <sulp>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a216:	f7f6 f837 	bl	8000288 <__aeabi_dsub>
 800a21a:	2200      	movs	r2, #0
 800a21c:	2300      	movs	r3, #0
 800a21e:	4682      	mov	sl, r0
 800a220:	468b      	mov	fp, r1
 800a222:	f7f6 fc51 	bl	8000ac8 <__aeabi_dcmpeq>
 800a226:	2800      	cmp	r0, #0
 800a228:	d0c1      	beq.n	800a1ae <_strtod_l+0x8e6>
 800a22a:	e60e      	b.n	8009e4a <_strtod_l+0x582>
 800a22c:	fffffc02 	.word	0xfffffc02
 800a230:	7ff00000 	.word	0x7ff00000
 800a234:	39500000 	.word	0x39500000
 800a238:	000fffff 	.word	0x000fffff
 800a23c:	7fefffff 	.word	0x7fefffff
 800a240:	0800d568 	.word	0x0800d568
 800a244:	4631      	mov	r1, r6
 800a246:	4628      	mov	r0, r5
 800a248:	f002 f820 	bl	800c28c <__ratio>
 800a24c:	ec59 8b10 	vmov	r8, r9, d0
 800a250:	ee10 0a10 	vmov	r0, s0
 800a254:	2200      	movs	r2, #0
 800a256:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a25a:	4649      	mov	r1, r9
 800a25c:	f7f6 fc48 	bl	8000af0 <__aeabi_dcmple>
 800a260:	2800      	cmp	r0, #0
 800a262:	d07c      	beq.n	800a35e <_strtod_l+0xa96>
 800a264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a266:	2b00      	cmp	r3, #0
 800a268:	d04c      	beq.n	800a304 <_strtod_l+0xa3c>
 800a26a:	4b95      	ldr	r3, [pc, #596]	; (800a4c0 <_strtod_l+0xbf8>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a272:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a4c0 <_strtod_l+0xbf8>
 800a276:	f04f 0800 	mov.w	r8, #0
 800a27a:	4b92      	ldr	r3, [pc, #584]	; (800a4c4 <_strtod_l+0xbfc>)
 800a27c:	403b      	ands	r3, r7
 800a27e:	9311      	str	r3, [sp, #68]	; 0x44
 800a280:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a282:	4b91      	ldr	r3, [pc, #580]	; (800a4c8 <_strtod_l+0xc00>)
 800a284:	429a      	cmp	r2, r3
 800a286:	f040 80b2 	bne.w	800a3ee <_strtod_l+0xb26>
 800a28a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a28e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a292:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a296:	ec4b ab10 	vmov	d0, sl, fp
 800a29a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800a29e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a2a2:	f001 ff1b 	bl	800c0dc <__ulp>
 800a2a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a2aa:	ec53 2b10 	vmov	r2, r3, d0
 800a2ae:	f7f6 f9a3 	bl	80005f8 <__aeabi_dmul>
 800a2b2:	4652      	mov	r2, sl
 800a2b4:	465b      	mov	r3, fp
 800a2b6:	f7f5 ffe9 	bl	800028c <__adddf3>
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4981      	ldr	r1, [pc, #516]	; (800a4c4 <_strtod_l+0xbfc>)
 800a2be:	4a83      	ldr	r2, [pc, #524]	; (800a4cc <_strtod_l+0xc04>)
 800a2c0:	4019      	ands	r1, r3
 800a2c2:	4291      	cmp	r1, r2
 800a2c4:	4682      	mov	sl, r0
 800a2c6:	d95e      	bls.n	800a386 <_strtod_l+0xabe>
 800a2c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a2ca:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d103      	bne.n	800a2da <_strtod_l+0xa12>
 800a2d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	f43f ad43 	beq.w	8009d60 <_strtod_l+0x498>
 800a2da:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a4d8 <_strtod_l+0xc10>
 800a2de:	f04f 3aff 	mov.w	sl, #4294967295
 800a2e2:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a2e4:	4620      	mov	r0, r4
 800a2e6:	f001 fbcd 	bl	800ba84 <_Bfree>
 800a2ea:	9907      	ldr	r1, [sp, #28]
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f001 fbc9 	bl	800ba84 <_Bfree>
 800a2f2:	4631      	mov	r1, r6
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f001 fbc5 	bl	800ba84 <_Bfree>
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	f001 fbc1 	bl	800ba84 <_Bfree>
 800a302:	e613      	b.n	8009f2c <_strtod_l+0x664>
 800a304:	f1ba 0f00 	cmp.w	sl, #0
 800a308:	d11b      	bne.n	800a342 <_strtod_l+0xa7a>
 800a30a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a30e:	b9f3      	cbnz	r3, 800a34e <_strtod_l+0xa86>
 800a310:	4b6b      	ldr	r3, [pc, #428]	; (800a4c0 <_strtod_l+0xbf8>)
 800a312:	2200      	movs	r2, #0
 800a314:	4640      	mov	r0, r8
 800a316:	4649      	mov	r1, r9
 800a318:	f7f6 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800a31c:	b9d0      	cbnz	r0, 800a354 <_strtod_l+0xa8c>
 800a31e:	4640      	mov	r0, r8
 800a320:	4649      	mov	r1, r9
 800a322:	4b6b      	ldr	r3, [pc, #428]	; (800a4d0 <_strtod_l+0xc08>)
 800a324:	2200      	movs	r2, #0
 800a326:	f7f6 f967 	bl	80005f8 <__aeabi_dmul>
 800a32a:	4680      	mov	r8, r0
 800a32c:	4689      	mov	r9, r1
 800a32e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a332:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800a336:	931b      	str	r3, [sp, #108]	; 0x6c
 800a338:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a33c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a340:	e79b      	b.n	800a27a <_strtod_l+0x9b2>
 800a342:	f1ba 0f01 	cmp.w	sl, #1
 800a346:	d102      	bne.n	800a34e <_strtod_l+0xa86>
 800a348:	2f00      	cmp	r7, #0
 800a34a:	f43f ad7e 	beq.w	8009e4a <_strtod_l+0x582>
 800a34e:	4b61      	ldr	r3, [pc, #388]	; (800a4d4 <_strtod_l+0xc0c>)
 800a350:	2200      	movs	r2, #0
 800a352:	e78c      	b.n	800a26e <_strtod_l+0x9a6>
 800a354:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a4d0 <_strtod_l+0xc08>
 800a358:	f04f 0800 	mov.w	r8, #0
 800a35c:	e7e7      	b.n	800a32e <_strtod_l+0xa66>
 800a35e:	4b5c      	ldr	r3, [pc, #368]	; (800a4d0 <_strtod_l+0xc08>)
 800a360:	4640      	mov	r0, r8
 800a362:	4649      	mov	r1, r9
 800a364:	2200      	movs	r2, #0
 800a366:	f7f6 f947 	bl	80005f8 <__aeabi_dmul>
 800a36a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a36c:	4680      	mov	r8, r0
 800a36e:	4689      	mov	r9, r1
 800a370:	b933      	cbnz	r3, 800a380 <_strtod_l+0xab8>
 800a372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a376:	9012      	str	r0, [sp, #72]	; 0x48
 800a378:	9313      	str	r3, [sp, #76]	; 0x4c
 800a37a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a37e:	e7dd      	b.n	800a33c <_strtod_l+0xa74>
 800a380:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800a384:	e7f9      	b.n	800a37a <_strtod_l+0xab2>
 800a386:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a38a:	9b04      	ldr	r3, [sp, #16]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d1a8      	bne.n	800a2e2 <_strtod_l+0xa1a>
 800a390:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a394:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a396:	0d1b      	lsrs	r3, r3, #20
 800a398:	051b      	lsls	r3, r3, #20
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d1a1      	bne.n	800a2e2 <_strtod_l+0xa1a>
 800a39e:	4640      	mov	r0, r8
 800a3a0:	4649      	mov	r1, r9
 800a3a2:	f7f6 fc89 	bl	8000cb8 <__aeabi_d2lz>
 800a3a6:	f7f6 f8f9 	bl	800059c <__aeabi_l2d>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4640      	mov	r0, r8
 800a3b0:	4649      	mov	r1, r9
 800a3b2:	f7f5 ff69 	bl	8000288 <__aeabi_dsub>
 800a3b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a3b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3bc:	ea43 030a 	orr.w	r3, r3, sl
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	4680      	mov	r8, r0
 800a3c4:	4689      	mov	r9, r1
 800a3c6:	d053      	beq.n	800a470 <_strtod_l+0xba8>
 800a3c8:	a335      	add	r3, pc, #212	; (adr r3, 800a4a0 <_strtod_l+0xbd8>)
 800a3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ce:	f7f6 fb85 	bl	8000adc <__aeabi_dcmplt>
 800a3d2:	2800      	cmp	r0, #0
 800a3d4:	f47f acce 	bne.w	8009d74 <_strtod_l+0x4ac>
 800a3d8:	a333      	add	r3, pc, #204	; (adr r3, 800a4a8 <_strtod_l+0xbe0>)
 800a3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3de:	4640      	mov	r0, r8
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	f7f6 fb99 	bl	8000b18 <__aeabi_dcmpgt>
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	f43f af7b 	beq.w	800a2e2 <_strtod_l+0xa1a>
 800a3ec:	e4c2      	b.n	8009d74 <_strtod_l+0x4ac>
 800a3ee:	9b04      	ldr	r3, [sp, #16]
 800a3f0:	b333      	cbz	r3, 800a440 <_strtod_l+0xb78>
 800a3f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a3f8:	d822      	bhi.n	800a440 <_strtod_l+0xb78>
 800a3fa:	a32d      	add	r3, pc, #180	; (adr r3, 800a4b0 <_strtod_l+0xbe8>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	4640      	mov	r0, r8
 800a402:	4649      	mov	r1, r9
 800a404:	f7f6 fb74 	bl	8000af0 <__aeabi_dcmple>
 800a408:	b1a0      	cbz	r0, 800a434 <_strtod_l+0xb6c>
 800a40a:	4649      	mov	r1, r9
 800a40c:	4640      	mov	r0, r8
 800a40e:	f7f6 fbcb 	bl	8000ba8 <__aeabi_d2uiz>
 800a412:	2801      	cmp	r0, #1
 800a414:	bf38      	it	cc
 800a416:	2001      	movcc	r0, #1
 800a418:	f7f6 f874 	bl	8000504 <__aeabi_ui2d>
 800a41c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a41e:	4680      	mov	r8, r0
 800a420:	4689      	mov	r9, r1
 800a422:	bb13      	cbnz	r3, 800a46a <_strtod_l+0xba2>
 800a424:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a428:	9014      	str	r0, [sp, #80]	; 0x50
 800a42a:	9315      	str	r3, [sp, #84]	; 0x54
 800a42c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a430:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800a434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a436:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a438:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a43c:	1a9b      	subs	r3, r3, r2
 800a43e:	930d      	str	r3, [sp, #52]	; 0x34
 800a440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a444:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a448:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a44c:	f001 fe46 	bl	800c0dc <__ulp>
 800a450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a454:	ec53 2b10 	vmov	r2, r3, d0
 800a458:	f7f6 f8ce 	bl	80005f8 <__aeabi_dmul>
 800a45c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a460:	f7f5 ff14 	bl	800028c <__adddf3>
 800a464:	4682      	mov	sl, r0
 800a466:	468b      	mov	fp, r1
 800a468:	e78f      	b.n	800a38a <_strtod_l+0xac2>
 800a46a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800a46e:	e7dd      	b.n	800a42c <_strtod_l+0xb64>
 800a470:	a311      	add	r3, pc, #68	; (adr r3, 800a4b8 <_strtod_l+0xbf0>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	f7f6 fb31 	bl	8000adc <__aeabi_dcmplt>
 800a47a:	e7b4      	b.n	800a3e6 <_strtod_l+0xb1e>
 800a47c:	2300      	movs	r3, #0
 800a47e:	930e      	str	r3, [sp, #56]	; 0x38
 800a480:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a482:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a484:	6013      	str	r3, [r2, #0]
 800a486:	f7ff ba65 	b.w	8009954 <_strtod_l+0x8c>
 800a48a:	2b65      	cmp	r3, #101	; 0x65
 800a48c:	f43f ab5d 	beq.w	8009b4a <_strtod_l+0x282>
 800a490:	2b45      	cmp	r3, #69	; 0x45
 800a492:	f43f ab5a 	beq.w	8009b4a <_strtod_l+0x282>
 800a496:	2201      	movs	r2, #1
 800a498:	f7ff bb92 	b.w	8009bc0 <_strtod_l+0x2f8>
 800a49c:	f3af 8000 	nop.w
 800a4a0:	94a03595 	.word	0x94a03595
 800a4a4:	3fdfffff 	.word	0x3fdfffff
 800a4a8:	35afe535 	.word	0x35afe535
 800a4ac:	3fe00000 	.word	0x3fe00000
 800a4b0:	ffc00000 	.word	0xffc00000
 800a4b4:	41dfffff 	.word	0x41dfffff
 800a4b8:	94a03595 	.word	0x94a03595
 800a4bc:	3fcfffff 	.word	0x3fcfffff
 800a4c0:	3ff00000 	.word	0x3ff00000
 800a4c4:	7ff00000 	.word	0x7ff00000
 800a4c8:	7fe00000 	.word	0x7fe00000
 800a4cc:	7c9fffff 	.word	0x7c9fffff
 800a4d0:	3fe00000 	.word	0x3fe00000
 800a4d4:	bff00000 	.word	0xbff00000
 800a4d8:	7fefffff 	.word	0x7fefffff

0800a4dc <_strtod_r>:
 800a4dc:	4b01      	ldr	r3, [pc, #4]	; (800a4e4 <_strtod_r+0x8>)
 800a4de:	f7ff b9f3 	b.w	80098c8 <_strtod_l>
 800a4e2:	bf00      	nop
 800a4e4:	20000078 	.word	0x20000078

0800a4e8 <_strtol_l.isra.0>:
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4ee:	d001      	beq.n	800a4f4 <_strtol_l.isra.0+0xc>
 800a4f0:	2b24      	cmp	r3, #36	; 0x24
 800a4f2:	d906      	bls.n	800a502 <_strtol_l.isra.0+0x1a>
 800a4f4:	f7fe faea 	bl	8008acc <__errno>
 800a4f8:	2316      	movs	r3, #22
 800a4fa:	6003      	str	r3, [r0, #0]
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a502:	4f3a      	ldr	r7, [pc, #232]	; (800a5ec <_strtol_l.isra.0+0x104>)
 800a504:	468e      	mov	lr, r1
 800a506:	4676      	mov	r6, lr
 800a508:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a50c:	5de5      	ldrb	r5, [r4, r7]
 800a50e:	f015 0508 	ands.w	r5, r5, #8
 800a512:	d1f8      	bne.n	800a506 <_strtol_l.isra.0+0x1e>
 800a514:	2c2d      	cmp	r4, #45	; 0x2d
 800a516:	d134      	bne.n	800a582 <_strtol_l.isra.0+0x9a>
 800a518:	f89e 4000 	ldrb.w	r4, [lr]
 800a51c:	f04f 0801 	mov.w	r8, #1
 800a520:	f106 0e02 	add.w	lr, r6, #2
 800a524:	2b00      	cmp	r3, #0
 800a526:	d05c      	beq.n	800a5e2 <_strtol_l.isra.0+0xfa>
 800a528:	2b10      	cmp	r3, #16
 800a52a:	d10c      	bne.n	800a546 <_strtol_l.isra.0+0x5e>
 800a52c:	2c30      	cmp	r4, #48	; 0x30
 800a52e:	d10a      	bne.n	800a546 <_strtol_l.isra.0+0x5e>
 800a530:	f89e 4000 	ldrb.w	r4, [lr]
 800a534:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a538:	2c58      	cmp	r4, #88	; 0x58
 800a53a:	d14d      	bne.n	800a5d8 <_strtol_l.isra.0+0xf0>
 800a53c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800a540:	2310      	movs	r3, #16
 800a542:	f10e 0e02 	add.w	lr, lr, #2
 800a546:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800a54a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a54e:	2600      	movs	r6, #0
 800a550:	fbbc f9f3 	udiv	r9, ip, r3
 800a554:	4635      	mov	r5, r6
 800a556:	fb03 ca19 	mls	sl, r3, r9, ip
 800a55a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a55e:	2f09      	cmp	r7, #9
 800a560:	d818      	bhi.n	800a594 <_strtol_l.isra.0+0xac>
 800a562:	463c      	mov	r4, r7
 800a564:	42a3      	cmp	r3, r4
 800a566:	dd24      	ble.n	800a5b2 <_strtol_l.isra.0+0xca>
 800a568:	2e00      	cmp	r6, #0
 800a56a:	db1f      	blt.n	800a5ac <_strtol_l.isra.0+0xc4>
 800a56c:	45a9      	cmp	r9, r5
 800a56e:	d31d      	bcc.n	800a5ac <_strtol_l.isra.0+0xc4>
 800a570:	d101      	bne.n	800a576 <_strtol_l.isra.0+0x8e>
 800a572:	45a2      	cmp	sl, r4
 800a574:	db1a      	blt.n	800a5ac <_strtol_l.isra.0+0xc4>
 800a576:	fb05 4503 	mla	r5, r5, r3, r4
 800a57a:	2601      	movs	r6, #1
 800a57c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800a580:	e7eb      	b.n	800a55a <_strtol_l.isra.0+0x72>
 800a582:	2c2b      	cmp	r4, #43	; 0x2b
 800a584:	bf08      	it	eq
 800a586:	f89e 4000 	ldrbeq.w	r4, [lr]
 800a58a:	46a8      	mov	r8, r5
 800a58c:	bf08      	it	eq
 800a58e:	f106 0e02 	addeq.w	lr, r6, #2
 800a592:	e7c7      	b.n	800a524 <_strtol_l.isra.0+0x3c>
 800a594:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a598:	2f19      	cmp	r7, #25
 800a59a:	d801      	bhi.n	800a5a0 <_strtol_l.isra.0+0xb8>
 800a59c:	3c37      	subs	r4, #55	; 0x37
 800a59e:	e7e1      	b.n	800a564 <_strtol_l.isra.0+0x7c>
 800a5a0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a5a4:	2f19      	cmp	r7, #25
 800a5a6:	d804      	bhi.n	800a5b2 <_strtol_l.isra.0+0xca>
 800a5a8:	3c57      	subs	r4, #87	; 0x57
 800a5aa:	e7db      	b.n	800a564 <_strtol_l.isra.0+0x7c>
 800a5ac:	f04f 36ff 	mov.w	r6, #4294967295
 800a5b0:	e7e4      	b.n	800a57c <_strtol_l.isra.0+0x94>
 800a5b2:	2e00      	cmp	r6, #0
 800a5b4:	da05      	bge.n	800a5c2 <_strtol_l.isra.0+0xda>
 800a5b6:	2322      	movs	r3, #34	; 0x22
 800a5b8:	6003      	str	r3, [r0, #0]
 800a5ba:	4665      	mov	r5, ip
 800a5bc:	b942      	cbnz	r2, 800a5d0 <_strtol_l.isra.0+0xe8>
 800a5be:	4628      	mov	r0, r5
 800a5c0:	e79d      	b.n	800a4fe <_strtol_l.isra.0+0x16>
 800a5c2:	f1b8 0f00 	cmp.w	r8, #0
 800a5c6:	d000      	beq.n	800a5ca <_strtol_l.isra.0+0xe2>
 800a5c8:	426d      	negs	r5, r5
 800a5ca:	2a00      	cmp	r2, #0
 800a5cc:	d0f7      	beq.n	800a5be <_strtol_l.isra.0+0xd6>
 800a5ce:	b10e      	cbz	r6, 800a5d4 <_strtol_l.isra.0+0xec>
 800a5d0:	f10e 31ff 	add.w	r1, lr, #4294967295
 800a5d4:	6011      	str	r1, [r2, #0]
 800a5d6:	e7f2      	b.n	800a5be <_strtol_l.isra.0+0xd6>
 800a5d8:	2430      	movs	r4, #48	; 0x30
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1b3      	bne.n	800a546 <_strtol_l.isra.0+0x5e>
 800a5de:	2308      	movs	r3, #8
 800a5e0:	e7b1      	b.n	800a546 <_strtol_l.isra.0+0x5e>
 800a5e2:	2c30      	cmp	r4, #48	; 0x30
 800a5e4:	d0a4      	beq.n	800a530 <_strtol_l.isra.0+0x48>
 800a5e6:	230a      	movs	r3, #10
 800a5e8:	e7ad      	b.n	800a546 <_strtol_l.isra.0+0x5e>
 800a5ea:	bf00      	nop
 800a5ec:	0800d591 	.word	0x0800d591

0800a5f0 <_strtol_r>:
 800a5f0:	f7ff bf7a 	b.w	800a4e8 <_strtol_l.isra.0>

0800a5f4 <quorem>:
 800a5f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	6903      	ldr	r3, [r0, #16]
 800a5fa:	690c      	ldr	r4, [r1, #16]
 800a5fc:	42a3      	cmp	r3, r4
 800a5fe:	4607      	mov	r7, r0
 800a600:	f2c0 8081 	blt.w	800a706 <quorem+0x112>
 800a604:	3c01      	subs	r4, #1
 800a606:	f101 0814 	add.w	r8, r1, #20
 800a60a:	f100 0514 	add.w	r5, r0, #20
 800a60e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a612:	9301      	str	r3, [sp, #4]
 800a614:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a618:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a61c:	3301      	adds	r3, #1
 800a61e:	429a      	cmp	r2, r3
 800a620:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a624:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a628:	fbb2 f6f3 	udiv	r6, r2, r3
 800a62c:	d331      	bcc.n	800a692 <quorem+0x9e>
 800a62e:	f04f 0e00 	mov.w	lr, #0
 800a632:	4640      	mov	r0, r8
 800a634:	46ac      	mov	ip, r5
 800a636:	46f2      	mov	sl, lr
 800a638:	f850 2b04 	ldr.w	r2, [r0], #4
 800a63c:	b293      	uxth	r3, r2
 800a63e:	fb06 e303 	mla	r3, r6, r3, lr
 800a642:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a646:	b29b      	uxth	r3, r3
 800a648:	ebaa 0303 	sub.w	r3, sl, r3
 800a64c:	0c12      	lsrs	r2, r2, #16
 800a64e:	f8dc a000 	ldr.w	sl, [ip]
 800a652:	fb06 e202 	mla	r2, r6, r2, lr
 800a656:	fa13 f38a 	uxtah	r3, r3, sl
 800a65a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a65e:	fa1f fa82 	uxth.w	sl, r2
 800a662:	f8dc 2000 	ldr.w	r2, [ip]
 800a666:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a66a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a66e:	b29b      	uxth	r3, r3
 800a670:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a674:	4581      	cmp	r9, r0
 800a676:	f84c 3b04 	str.w	r3, [ip], #4
 800a67a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a67e:	d2db      	bcs.n	800a638 <quorem+0x44>
 800a680:	f855 300b 	ldr.w	r3, [r5, fp]
 800a684:	b92b      	cbnz	r3, 800a692 <quorem+0x9e>
 800a686:	9b01      	ldr	r3, [sp, #4]
 800a688:	3b04      	subs	r3, #4
 800a68a:	429d      	cmp	r5, r3
 800a68c:	461a      	mov	r2, r3
 800a68e:	d32e      	bcc.n	800a6ee <quorem+0xfa>
 800a690:	613c      	str	r4, [r7, #16]
 800a692:	4638      	mov	r0, r7
 800a694:	f001 fc7e 	bl	800bf94 <__mcmp>
 800a698:	2800      	cmp	r0, #0
 800a69a:	db24      	blt.n	800a6e6 <quorem+0xf2>
 800a69c:	3601      	adds	r6, #1
 800a69e:	4628      	mov	r0, r5
 800a6a0:	f04f 0c00 	mov.w	ip, #0
 800a6a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6a8:	f8d0 e000 	ldr.w	lr, [r0]
 800a6ac:	b293      	uxth	r3, r2
 800a6ae:	ebac 0303 	sub.w	r3, ip, r3
 800a6b2:	0c12      	lsrs	r2, r2, #16
 800a6b4:	fa13 f38e 	uxtah	r3, r3, lr
 800a6b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a6bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6c0:	b29b      	uxth	r3, r3
 800a6c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6c6:	45c1      	cmp	r9, r8
 800a6c8:	f840 3b04 	str.w	r3, [r0], #4
 800a6cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a6d0:	d2e8      	bcs.n	800a6a4 <quorem+0xb0>
 800a6d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6da:	b922      	cbnz	r2, 800a6e6 <quorem+0xf2>
 800a6dc:	3b04      	subs	r3, #4
 800a6de:	429d      	cmp	r5, r3
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	d30a      	bcc.n	800a6fa <quorem+0x106>
 800a6e4:	613c      	str	r4, [r7, #16]
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	b003      	add	sp, #12
 800a6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ee:	6812      	ldr	r2, [r2, #0]
 800a6f0:	3b04      	subs	r3, #4
 800a6f2:	2a00      	cmp	r2, #0
 800a6f4:	d1cc      	bne.n	800a690 <quorem+0x9c>
 800a6f6:	3c01      	subs	r4, #1
 800a6f8:	e7c7      	b.n	800a68a <quorem+0x96>
 800a6fa:	6812      	ldr	r2, [r2, #0]
 800a6fc:	3b04      	subs	r3, #4
 800a6fe:	2a00      	cmp	r2, #0
 800a700:	d1f0      	bne.n	800a6e4 <quorem+0xf0>
 800a702:	3c01      	subs	r4, #1
 800a704:	e7eb      	b.n	800a6de <quorem+0xea>
 800a706:	2000      	movs	r0, #0
 800a708:	e7ee      	b.n	800a6e8 <quorem+0xf4>
 800a70a:	0000      	movs	r0, r0
 800a70c:	0000      	movs	r0, r0
	...

0800a710 <_dtoa_r>:
 800a710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a714:	ed2d 8b02 	vpush	{d8}
 800a718:	ec57 6b10 	vmov	r6, r7, d0
 800a71c:	b095      	sub	sp, #84	; 0x54
 800a71e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a720:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a724:	9105      	str	r1, [sp, #20]
 800a726:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a72a:	4604      	mov	r4, r0
 800a72c:	9209      	str	r2, [sp, #36]	; 0x24
 800a72e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a730:	b975      	cbnz	r5, 800a750 <_dtoa_r+0x40>
 800a732:	2010      	movs	r0, #16
 800a734:	f001 f94c 	bl	800b9d0 <malloc>
 800a738:	4602      	mov	r2, r0
 800a73a:	6260      	str	r0, [r4, #36]	; 0x24
 800a73c:	b920      	cbnz	r0, 800a748 <_dtoa_r+0x38>
 800a73e:	4bb2      	ldr	r3, [pc, #712]	; (800aa08 <_dtoa_r+0x2f8>)
 800a740:	21ea      	movs	r1, #234	; 0xea
 800a742:	48b2      	ldr	r0, [pc, #712]	; (800aa0c <_dtoa_r+0x2fc>)
 800a744:	f002 f868 	bl	800c818 <__assert_func>
 800a748:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a74c:	6005      	str	r5, [r0, #0]
 800a74e:	60c5      	str	r5, [r0, #12]
 800a750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a752:	6819      	ldr	r1, [r3, #0]
 800a754:	b151      	cbz	r1, 800a76c <_dtoa_r+0x5c>
 800a756:	685a      	ldr	r2, [r3, #4]
 800a758:	604a      	str	r2, [r1, #4]
 800a75a:	2301      	movs	r3, #1
 800a75c:	4093      	lsls	r3, r2
 800a75e:	608b      	str	r3, [r1, #8]
 800a760:	4620      	mov	r0, r4
 800a762:	f001 f98f 	bl	800ba84 <_Bfree>
 800a766:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a768:	2200      	movs	r2, #0
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	1e3b      	subs	r3, r7, #0
 800a76e:	bfb9      	ittee	lt
 800a770:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a774:	9303      	strlt	r3, [sp, #12]
 800a776:	2300      	movge	r3, #0
 800a778:	f8c8 3000 	strge.w	r3, [r8]
 800a77c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a780:	4ba3      	ldr	r3, [pc, #652]	; (800aa10 <_dtoa_r+0x300>)
 800a782:	bfbc      	itt	lt
 800a784:	2201      	movlt	r2, #1
 800a786:	f8c8 2000 	strlt.w	r2, [r8]
 800a78a:	ea33 0309 	bics.w	r3, r3, r9
 800a78e:	d11b      	bne.n	800a7c8 <_dtoa_r+0xb8>
 800a790:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a792:	f242 730f 	movw	r3, #9999	; 0x270f
 800a796:	6013      	str	r3, [r2, #0]
 800a798:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a79c:	4333      	orrs	r3, r6
 800a79e:	f000 857a 	beq.w	800b296 <_dtoa_r+0xb86>
 800a7a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7a4:	b963      	cbnz	r3, 800a7c0 <_dtoa_r+0xb0>
 800a7a6:	4b9b      	ldr	r3, [pc, #620]	; (800aa14 <_dtoa_r+0x304>)
 800a7a8:	e024      	b.n	800a7f4 <_dtoa_r+0xe4>
 800a7aa:	4b9b      	ldr	r3, [pc, #620]	; (800aa18 <_dtoa_r+0x308>)
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	3308      	adds	r3, #8
 800a7b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7b2:	6013      	str	r3, [r2, #0]
 800a7b4:	9800      	ldr	r0, [sp, #0]
 800a7b6:	b015      	add	sp, #84	; 0x54
 800a7b8:	ecbd 8b02 	vpop	{d8}
 800a7bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c0:	4b94      	ldr	r3, [pc, #592]	; (800aa14 <_dtoa_r+0x304>)
 800a7c2:	9300      	str	r3, [sp, #0]
 800a7c4:	3303      	adds	r3, #3
 800a7c6:	e7f3      	b.n	800a7b0 <_dtoa_r+0xa0>
 800a7c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	ec51 0b17 	vmov	r0, r1, d7
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a7d8:	f7f6 f976 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7dc:	4680      	mov	r8, r0
 800a7de:	b158      	cbz	r0, 800a7f8 <_dtoa_r+0xe8>
 800a7e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	f000 8551 	beq.w	800b290 <_dtoa_r+0xb80>
 800a7ee:	488b      	ldr	r0, [pc, #556]	; (800aa1c <_dtoa_r+0x30c>)
 800a7f0:	6018      	str	r0, [r3, #0]
 800a7f2:	1e43      	subs	r3, r0, #1
 800a7f4:	9300      	str	r3, [sp, #0]
 800a7f6:	e7dd      	b.n	800a7b4 <_dtoa_r+0xa4>
 800a7f8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a7fc:	aa12      	add	r2, sp, #72	; 0x48
 800a7fe:	a913      	add	r1, sp, #76	; 0x4c
 800a800:	4620      	mov	r0, r4
 800a802:	f001 fce7 	bl	800c1d4 <__d2b>
 800a806:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a80a:	4683      	mov	fp, r0
 800a80c:	2d00      	cmp	r5, #0
 800a80e:	d07c      	beq.n	800a90a <_dtoa_r+0x1fa>
 800a810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a812:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a81a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a81e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a822:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a82a:	4b7d      	ldr	r3, [pc, #500]	; (800aa20 <_dtoa_r+0x310>)
 800a82c:	2200      	movs	r2, #0
 800a82e:	4630      	mov	r0, r6
 800a830:	4639      	mov	r1, r7
 800a832:	f7f5 fd29 	bl	8000288 <__aeabi_dsub>
 800a836:	a36e      	add	r3, pc, #440	; (adr r3, 800a9f0 <_dtoa_r+0x2e0>)
 800a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83c:	f7f5 fedc 	bl	80005f8 <__aeabi_dmul>
 800a840:	a36d      	add	r3, pc, #436	; (adr r3, 800a9f8 <_dtoa_r+0x2e8>)
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	f7f5 fd21 	bl	800028c <__adddf3>
 800a84a:	4606      	mov	r6, r0
 800a84c:	4628      	mov	r0, r5
 800a84e:	460f      	mov	r7, r1
 800a850:	f7f5 fe68 	bl	8000524 <__aeabi_i2d>
 800a854:	a36a      	add	r3, pc, #424	; (adr r3, 800aa00 <_dtoa_r+0x2f0>)
 800a856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85a:	f7f5 fecd 	bl	80005f8 <__aeabi_dmul>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4630      	mov	r0, r6
 800a864:	4639      	mov	r1, r7
 800a866:	f7f5 fd11 	bl	800028c <__adddf3>
 800a86a:	4606      	mov	r6, r0
 800a86c:	460f      	mov	r7, r1
 800a86e:	f7f6 f973 	bl	8000b58 <__aeabi_d2iz>
 800a872:	2200      	movs	r2, #0
 800a874:	4682      	mov	sl, r0
 800a876:	2300      	movs	r3, #0
 800a878:	4630      	mov	r0, r6
 800a87a:	4639      	mov	r1, r7
 800a87c:	f7f6 f92e 	bl	8000adc <__aeabi_dcmplt>
 800a880:	b148      	cbz	r0, 800a896 <_dtoa_r+0x186>
 800a882:	4650      	mov	r0, sl
 800a884:	f7f5 fe4e 	bl	8000524 <__aeabi_i2d>
 800a888:	4632      	mov	r2, r6
 800a88a:	463b      	mov	r3, r7
 800a88c:	f7f6 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a890:	b908      	cbnz	r0, 800a896 <_dtoa_r+0x186>
 800a892:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a896:	f1ba 0f16 	cmp.w	sl, #22
 800a89a:	d854      	bhi.n	800a946 <_dtoa_r+0x236>
 800a89c:	4b61      	ldr	r3, [pc, #388]	; (800aa24 <_dtoa_r+0x314>)
 800a89e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a8aa:	f7f6 f917 	bl	8000adc <__aeabi_dcmplt>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d04b      	beq.n	800a94a <_dtoa_r+0x23a>
 800a8b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	930e      	str	r3, [sp, #56]	; 0x38
 800a8ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a8bc:	1b5d      	subs	r5, r3, r5
 800a8be:	1e6b      	subs	r3, r5, #1
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	bf43      	ittte	mi
 800a8c4:	2300      	movmi	r3, #0
 800a8c6:	f1c5 0801 	rsbmi	r8, r5, #1
 800a8ca:	9304      	strmi	r3, [sp, #16]
 800a8cc:	f04f 0800 	movpl.w	r8, #0
 800a8d0:	f1ba 0f00 	cmp.w	sl, #0
 800a8d4:	db3b      	blt.n	800a94e <_dtoa_r+0x23e>
 800a8d6:	9b04      	ldr	r3, [sp, #16]
 800a8d8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a8dc:	4453      	add	r3, sl
 800a8de:	9304      	str	r3, [sp, #16]
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	9306      	str	r3, [sp, #24]
 800a8e4:	9b05      	ldr	r3, [sp, #20]
 800a8e6:	2b09      	cmp	r3, #9
 800a8e8:	d869      	bhi.n	800a9be <_dtoa_r+0x2ae>
 800a8ea:	2b05      	cmp	r3, #5
 800a8ec:	bfc4      	itt	gt
 800a8ee:	3b04      	subgt	r3, #4
 800a8f0:	9305      	strgt	r3, [sp, #20]
 800a8f2:	9b05      	ldr	r3, [sp, #20]
 800a8f4:	f1a3 0302 	sub.w	r3, r3, #2
 800a8f8:	bfcc      	ite	gt
 800a8fa:	2500      	movgt	r5, #0
 800a8fc:	2501      	movle	r5, #1
 800a8fe:	2b03      	cmp	r3, #3
 800a900:	d869      	bhi.n	800a9d6 <_dtoa_r+0x2c6>
 800a902:	e8df f003 	tbb	[pc, r3]
 800a906:	4e2c      	.short	0x4e2c
 800a908:	5a4c      	.short	0x5a4c
 800a90a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a90e:	441d      	add	r5, r3
 800a910:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a914:	2b20      	cmp	r3, #32
 800a916:	bfc1      	itttt	gt
 800a918:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a91c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a920:	fa09 f303 	lslgt.w	r3, r9, r3
 800a924:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a928:	bfda      	itte	le
 800a92a:	f1c3 0320 	rsble	r3, r3, #32
 800a92e:	fa06 f003 	lslle.w	r0, r6, r3
 800a932:	4318      	orrgt	r0, r3
 800a934:	f7f5 fde6 	bl	8000504 <__aeabi_ui2d>
 800a938:	2301      	movs	r3, #1
 800a93a:	4606      	mov	r6, r0
 800a93c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a940:	3d01      	subs	r5, #1
 800a942:	9310      	str	r3, [sp, #64]	; 0x40
 800a944:	e771      	b.n	800a82a <_dtoa_r+0x11a>
 800a946:	2301      	movs	r3, #1
 800a948:	e7b6      	b.n	800a8b8 <_dtoa_r+0x1a8>
 800a94a:	900e      	str	r0, [sp, #56]	; 0x38
 800a94c:	e7b5      	b.n	800a8ba <_dtoa_r+0x1aa>
 800a94e:	f1ca 0300 	rsb	r3, sl, #0
 800a952:	9306      	str	r3, [sp, #24]
 800a954:	2300      	movs	r3, #0
 800a956:	eba8 080a 	sub.w	r8, r8, sl
 800a95a:	930d      	str	r3, [sp, #52]	; 0x34
 800a95c:	e7c2      	b.n	800a8e4 <_dtoa_r+0x1d4>
 800a95e:	2300      	movs	r3, #0
 800a960:	9308      	str	r3, [sp, #32]
 800a962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a964:	2b00      	cmp	r3, #0
 800a966:	dc39      	bgt.n	800a9dc <_dtoa_r+0x2cc>
 800a968:	f04f 0901 	mov.w	r9, #1
 800a96c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a970:	464b      	mov	r3, r9
 800a972:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a976:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a978:	2200      	movs	r2, #0
 800a97a:	6042      	str	r2, [r0, #4]
 800a97c:	2204      	movs	r2, #4
 800a97e:	f102 0614 	add.w	r6, r2, #20
 800a982:	429e      	cmp	r6, r3
 800a984:	6841      	ldr	r1, [r0, #4]
 800a986:	d92f      	bls.n	800a9e8 <_dtoa_r+0x2d8>
 800a988:	4620      	mov	r0, r4
 800a98a:	f001 f83b 	bl	800ba04 <_Balloc>
 800a98e:	9000      	str	r0, [sp, #0]
 800a990:	2800      	cmp	r0, #0
 800a992:	d14b      	bne.n	800aa2c <_dtoa_r+0x31c>
 800a994:	4b24      	ldr	r3, [pc, #144]	; (800aa28 <_dtoa_r+0x318>)
 800a996:	4602      	mov	r2, r0
 800a998:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a99c:	e6d1      	b.n	800a742 <_dtoa_r+0x32>
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e7de      	b.n	800a960 <_dtoa_r+0x250>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9308      	str	r3, [sp, #32]
 800a9a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a8:	eb0a 0903 	add.w	r9, sl, r3
 800a9ac:	f109 0301 	add.w	r3, r9, #1
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	9301      	str	r3, [sp, #4]
 800a9b4:	bfb8      	it	lt
 800a9b6:	2301      	movlt	r3, #1
 800a9b8:	e7dd      	b.n	800a976 <_dtoa_r+0x266>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e7f2      	b.n	800a9a4 <_dtoa_r+0x294>
 800a9be:	2501      	movs	r5, #1
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	9305      	str	r3, [sp, #20]
 800a9c4:	9508      	str	r5, [sp, #32]
 800a9c6:	f04f 39ff 	mov.w	r9, #4294967295
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9d0:	2312      	movs	r3, #18
 800a9d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a9d4:	e7cf      	b.n	800a976 <_dtoa_r+0x266>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	9308      	str	r3, [sp, #32]
 800a9da:	e7f4      	b.n	800a9c6 <_dtoa_r+0x2b6>
 800a9dc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a9e0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9e4:	464b      	mov	r3, r9
 800a9e6:	e7c6      	b.n	800a976 <_dtoa_r+0x266>
 800a9e8:	3101      	adds	r1, #1
 800a9ea:	6041      	str	r1, [r0, #4]
 800a9ec:	0052      	lsls	r2, r2, #1
 800a9ee:	e7c6      	b.n	800a97e <_dtoa_r+0x26e>
 800a9f0:	636f4361 	.word	0x636f4361
 800a9f4:	3fd287a7 	.word	0x3fd287a7
 800a9f8:	8b60c8b3 	.word	0x8b60c8b3
 800a9fc:	3fc68a28 	.word	0x3fc68a28
 800aa00:	509f79fb 	.word	0x509f79fb
 800aa04:	3fd34413 	.word	0x3fd34413
 800aa08:	0800d69e 	.word	0x0800d69e
 800aa0c:	0800d6b5 	.word	0x0800d6b5
 800aa10:	7ff00000 	.word	0x7ff00000
 800aa14:	0800d69a 	.word	0x0800d69a
 800aa18:	0800d691 	.word	0x0800d691
 800aa1c:	0800d515 	.word	0x0800d515
 800aa20:	3ff80000 	.word	0x3ff80000
 800aa24:	0800d830 	.word	0x0800d830
 800aa28:	0800d714 	.word	0x0800d714
 800aa2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa2e:	9a00      	ldr	r2, [sp, #0]
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	9b01      	ldr	r3, [sp, #4]
 800aa34:	2b0e      	cmp	r3, #14
 800aa36:	f200 80ad 	bhi.w	800ab94 <_dtoa_r+0x484>
 800aa3a:	2d00      	cmp	r5, #0
 800aa3c:	f000 80aa 	beq.w	800ab94 <_dtoa_r+0x484>
 800aa40:	f1ba 0f00 	cmp.w	sl, #0
 800aa44:	dd36      	ble.n	800aab4 <_dtoa_r+0x3a4>
 800aa46:	4ac3      	ldr	r2, [pc, #780]	; (800ad54 <_dtoa_r+0x644>)
 800aa48:	f00a 030f 	and.w	r3, sl, #15
 800aa4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa50:	ed93 7b00 	vldr	d7, [r3]
 800aa54:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800aa58:	ea4f 172a 	mov.w	r7, sl, asr #4
 800aa5c:	eeb0 8a47 	vmov.f32	s16, s14
 800aa60:	eef0 8a67 	vmov.f32	s17, s15
 800aa64:	d016      	beq.n	800aa94 <_dtoa_r+0x384>
 800aa66:	4bbc      	ldr	r3, [pc, #752]	; (800ad58 <_dtoa_r+0x648>)
 800aa68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aa6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa70:	f7f5 feec 	bl	800084c <__aeabi_ddiv>
 800aa74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa78:	f007 070f 	and.w	r7, r7, #15
 800aa7c:	2503      	movs	r5, #3
 800aa7e:	4eb6      	ldr	r6, [pc, #728]	; (800ad58 <_dtoa_r+0x648>)
 800aa80:	b957      	cbnz	r7, 800aa98 <_dtoa_r+0x388>
 800aa82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa86:	ec53 2b18 	vmov	r2, r3, d8
 800aa8a:	f7f5 fedf 	bl	800084c <__aeabi_ddiv>
 800aa8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa92:	e029      	b.n	800aae8 <_dtoa_r+0x3d8>
 800aa94:	2502      	movs	r5, #2
 800aa96:	e7f2      	b.n	800aa7e <_dtoa_r+0x36e>
 800aa98:	07f9      	lsls	r1, r7, #31
 800aa9a:	d508      	bpl.n	800aaae <_dtoa_r+0x39e>
 800aa9c:	ec51 0b18 	vmov	r0, r1, d8
 800aaa0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aaa4:	f7f5 fda8 	bl	80005f8 <__aeabi_dmul>
 800aaa8:	ec41 0b18 	vmov	d8, r0, r1
 800aaac:	3501      	adds	r5, #1
 800aaae:	107f      	asrs	r7, r7, #1
 800aab0:	3608      	adds	r6, #8
 800aab2:	e7e5      	b.n	800aa80 <_dtoa_r+0x370>
 800aab4:	f000 80a6 	beq.w	800ac04 <_dtoa_r+0x4f4>
 800aab8:	f1ca 0600 	rsb	r6, sl, #0
 800aabc:	4ba5      	ldr	r3, [pc, #660]	; (800ad54 <_dtoa_r+0x644>)
 800aabe:	4fa6      	ldr	r7, [pc, #664]	; (800ad58 <_dtoa_r+0x648>)
 800aac0:	f006 020f 	and.w	r2, r6, #15
 800aac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aacc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aad0:	f7f5 fd92 	bl	80005f8 <__aeabi_dmul>
 800aad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aad8:	1136      	asrs	r6, r6, #4
 800aada:	2300      	movs	r3, #0
 800aadc:	2502      	movs	r5, #2
 800aade:	2e00      	cmp	r6, #0
 800aae0:	f040 8085 	bne.w	800abee <_dtoa_r+0x4de>
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d1d2      	bne.n	800aa8e <_dtoa_r+0x37e>
 800aae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f000 808c 	beq.w	800ac08 <_dtoa_r+0x4f8>
 800aaf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aaf4:	4b99      	ldr	r3, [pc, #612]	; (800ad5c <_dtoa_r+0x64c>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	4630      	mov	r0, r6
 800aafa:	4639      	mov	r1, r7
 800aafc:	f7f5 ffee 	bl	8000adc <__aeabi_dcmplt>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	f000 8081 	beq.w	800ac08 <_dtoa_r+0x4f8>
 800ab06:	9b01      	ldr	r3, [sp, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d07d      	beq.n	800ac08 <_dtoa_r+0x4f8>
 800ab0c:	f1b9 0f00 	cmp.w	r9, #0
 800ab10:	dd3c      	ble.n	800ab8c <_dtoa_r+0x47c>
 800ab12:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ab16:	9307      	str	r3, [sp, #28]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	4b91      	ldr	r3, [pc, #580]	; (800ad60 <_dtoa_r+0x650>)
 800ab1c:	4630      	mov	r0, r6
 800ab1e:	4639      	mov	r1, r7
 800ab20:	f7f5 fd6a 	bl	80005f8 <__aeabi_dmul>
 800ab24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab28:	3501      	adds	r5, #1
 800ab2a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ab2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ab32:	4628      	mov	r0, r5
 800ab34:	f7f5 fcf6 	bl	8000524 <__aeabi_i2d>
 800ab38:	4632      	mov	r2, r6
 800ab3a:	463b      	mov	r3, r7
 800ab3c:	f7f5 fd5c 	bl	80005f8 <__aeabi_dmul>
 800ab40:	4b88      	ldr	r3, [pc, #544]	; (800ad64 <_dtoa_r+0x654>)
 800ab42:	2200      	movs	r2, #0
 800ab44:	f7f5 fba2 	bl	800028c <__adddf3>
 800ab48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab50:	9303      	str	r3, [sp, #12]
 800ab52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d15c      	bne.n	800ac12 <_dtoa_r+0x502>
 800ab58:	4b83      	ldr	r3, [pc, #524]	; (800ad68 <_dtoa_r+0x658>)
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	4630      	mov	r0, r6
 800ab5e:	4639      	mov	r1, r7
 800ab60:	f7f5 fb92 	bl	8000288 <__aeabi_dsub>
 800ab64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab68:	4606      	mov	r6, r0
 800ab6a:	460f      	mov	r7, r1
 800ab6c:	f7f5 ffd4 	bl	8000b18 <__aeabi_dcmpgt>
 800ab70:	2800      	cmp	r0, #0
 800ab72:	f040 8296 	bne.w	800b0a2 <_dtoa_r+0x992>
 800ab76:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab80:	4639      	mov	r1, r7
 800ab82:	f7f5 ffab 	bl	8000adc <__aeabi_dcmplt>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f040 8288 	bne.w	800b09c <_dtoa_r+0x98c>
 800ab8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ab90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ab94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	f2c0 8158 	blt.w	800ae4c <_dtoa_r+0x73c>
 800ab9c:	f1ba 0f0e 	cmp.w	sl, #14
 800aba0:	f300 8154 	bgt.w	800ae4c <_dtoa_r+0x73c>
 800aba4:	4b6b      	ldr	r3, [pc, #428]	; (800ad54 <_dtoa_r+0x644>)
 800aba6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800abaa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f280 80e3 	bge.w	800ad7c <_dtoa_r+0x66c>
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f300 80df 	bgt.w	800ad7c <_dtoa_r+0x66c>
 800abbe:	f040 826d 	bne.w	800b09c <_dtoa_r+0x98c>
 800abc2:	4b69      	ldr	r3, [pc, #420]	; (800ad68 <_dtoa_r+0x658>)
 800abc4:	2200      	movs	r2, #0
 800abc6:	4640      	mov	r0, r8
 800abc8:	4649      	mov	r1, r9
 800abca:	f7f5 fd15 	bl	80005f8 <__aeabi_dmul>
 800abce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abd2:	f7f5 ff97 	bl	8000b04 <__aeabi_dcmpge>
 800abd6:	9e01      	ldr	r6, [sp, #4]
 800abd8:	4637      	mov	r7, r6
 800abda:	2800      	cmp	r0, #0
 800abdc:	f040 8243 	bne.w	800b066 <_dtoa_r+0x956>
 800abe0:	9d00      	ldr	r5, [sp, #0]
 800abe2:	2331      	movs	r3, #49	; 0x31
 800abe4:	f805 3b01 	strb.w	r3, [r5], #1
 800abe8:	f10a 0a01 	add.w	sl, sl, #1
 800abec:	e23f      	b.n	800b06e <_dtoa_r+0x95e>
 800abee:	07f2      	lsls	r2, r6, #31
 800abf0:	d505      	bpl.n	800abfe <_dtoa_r+0x4ee>
 800abf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abf6:	f7f5 fcff 	bl	80005f8 <__aeabi_dmul>
 800abfa:	3501      	adds	r5, #1
 800abfc:	2301      	movs	r3, #1
 800abfe:	1076      	asrs	r6, r6, #1
 800ac00:	3708      	adds	r7, #8
 800ac02:	e76c      	b.n	800aade <_dtoa_r+0x3ce>
 800ac04:	2502      	movs	r5, #2
 800ac06:	e76f      	b.n	800aae8 <_dtoa_r+0x3d8>
 800ac08:	9b01      	ldr	r3, [sp, #4]
 800ac0a:	f8cd a01c 	str.w	sl, [sp, #28]
 800ac0e:	930c      	str	r3, [sp, #48]	; 0x30
 800ac10:	e78d      	b.n	800ab2e <_dtoa_r+0x41e>
 800ac12:	9900      	ldr	r1, [sp, #0]
 800ac14:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ac16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac18:	4b4e      	ldr	r3, [pc, #312]	; (800ad54 <_dtoa_r+0x644>)
 800ac1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac1e:	4401      	add	r1, r0
 800ac20:	9102      	str	r1, [sp, #8]
 800ac22:	9908      	ldr	r1, [sp, #32]
 800ac24:	eeb0 8a47 	vmov.f32	s16, s14
 800ac28:	eef0 8a67 	vmov.f32	s17, s15
 800ac2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac34:	2900      	cmp	r1, #0
 800ac36:	d045      	beq.n	800acc4 <_dtoa_r+0x5b4>
 800ac38:	494c      	ldr	r1, [pc, #304]	; (800ad6c <_dtoa_r+0x65c>)
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	f7f5 fe06 	bl	800084c <__aeabi_ddiv>
 800ac40:	ec53 2b18 	vmov	r2, r3, d8
 800ac44:	f7f5 fb20 	bl	8000288 <__aeabi_dsub>
 800ac48:	9d00      	ldr	r5, [sp, #0]
 800ac4a:	ec41 0b18 	vmov	d8, r0, r1
 800ac4e:	4639      	mov	r1, r7
 800ac50:	4630      	mov	r0, r6
 800ac52:	f7f5 ff81 	bl	8000b58 <__aeabi_d2iz>
 800ac56:	900c      	str	r0, [sp, #48]	; 0x30
 800ac58:	f7f5 fc64 	bl	8000524 <__aeabi_i2d>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	460b      	mov	r3, r1
 800ac60:	4630      	mov	r0, r6
 800ac62:	4639      	mov	r1, r7
 800ac64:	f7f5 fb10 	bl	8000288 <__aeabi_dsub>
 800ac68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac6a:	3330      	adds	r3, #48	; 0x30
 800ac6c:	f805 3b01 	strb.w	r3, [r5], #1
 800ac70:	ec53 2b18 	vmov	r2, r3, d8
 800ac74:	4606      	mov	r6, r0
 800ac76:	460f      	mov	r7, r1
 800ac78:	f7f5 ff30 	bl	8000adc <__aeabi_dcmplt>
 800ac7c:	2800      	cmp	r0, #0
 800ac7e:	d165      	bne.n	800ad4c <_dtoa_r+0x63c>
 800ac80:	4632      	mov	r2, r6
 800ac82:	463b      	mov	r3, r7
 800ac84:	4935      	ldr	r1, [pc, #212]	; (800ad5c <_dtoa_r+0x64c>)
 800ac86:	2000      	movs	r0, #0
 800ac88:	f7f5 fafe 	bl	8000288 <__aeabi_dsub>
 800ac8c:	ec53 2b18 	vmov	r2, r3, d8
 800ac90:	f7f5 ff24 	bl	8000adc <__aeabi_dcmplt>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	f040 80b9 	bne.w	800ae0c <_dtoa_r+0x6fc>
 800ac9a:	9b02      	ldr	r3, [sp, #8]
 800ac9c:	429d      	cmp	r5, r3
 800ac9e:	f43f af75 	beq.w	800ab8c <_dtoa_r+0x47c>
 800aca2:	4b2f      	ldr	r3, [pc, #188]	; (800ad60 <_dtoa_r+0x650>)
 800aca4:	ec51 0b18 	vmov	r0, r1, d8
 800aca8:	2200      	movs	r2, #0
 800acaa:	f7f5 fca5 	bl	80005f8 <__aeabi_dmul>
 800acae:	4b2c      	ldr	r3, [pc, #176]	; (800ad60 <_dtoa_r+0x650>)
 800acb0:	ec41 0b18 	vmov	d8, r0, r1
 800acb4:	2200      	movs	r2, #0
 800acb6:	4630      	mov	r0, r6
 800acb8:	4639      	mov	r1, r7
 800acba:	f7f5 fc9d 	bl	80005f8 <__aeabi_dmul>
 800acbe:	4606      	mov	r6, r0
 800acc0:	460f      	mov	r7, r1
 800acc2:	e7c4      	b.n	800ac4e <_dtoa_r+0x53e>
 800acc4:	ec51 0b17 	vmov	r0, r1, d7
 800acc8:	f7f5 fc96 	bl	80005f8 <__aeabi_dmul>
 800accc:	9b02      	ldr	r3, [sp, #8]
 800acce:	9d00      	ldr	r5, [sp, #0]
 800acd0:	930c      	str	r3, [sp, #48]	; 0x30
 800acd2:	ec41 0b18 	vmov	d8, r0, r1
 800acd6:	4639      	mov	r1, r7
 800acd8:	4630      	mov	r0, r6
 800acda:	f7f5 ff3d 	bl	8000b58 <__aeabi_d2iz>
 800acde:	9011      	str	r0, [sp, #68]	; 0x44
 800ace0:	f7f5 fc20 	bl	8000524 <__aeabi_i2d>
 800ace4:	4602      	mov	r2, r0
 800ace6:	460b      	mov	r3, r1
 800ace8:	4630      	mov	r0, r6
 800acea:	4639      	mov	r1, r7
 800acec:	f7f5 facc 	bl	8000288 <__aeabi_dsub>
 800acf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800acf2:	3330      	adds	r3, #48	; 0x30
 800acf4:	f805 3b01 	strb.w	r3, [r5], #1
 800acf8:	9b02      	ldr	r3, [sp, #8]
 800acfa:	429d      	cmp	r5, r3
 800acfc:	4606      	mov	r6, r0
 800acfe:	460f      	mov	r7, r1
 800ad00:	f04f 0200 	mov.w	r2, #0
 800ad04:	d134      	bne.n	800ad70 <_dtoa_r+0x660>
 800ad06:	4b19      	ldr	r3, [pc, #100]	; (800ad6c <_dtoa_r+0x65c>)
 800ad08:	ec51 0b18 	vmov	r0, r1, d8
 800ad0c:	f7f5 fabe 	bl	800028c <__adddf3>
 800ad10:	4602      	mov	r2, r0
 800ad12:	460b      	mov	r3, r1
 800ad14:	4630      	mov	r0, r6
 800ad16:	4639      	mov	r1, r7
 800ad18:	f7f5 fefe 	bl	8000b18 <__aeabi_dcmpgt>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	d175      	bne.n	800ae0c <_dtoa_r+0x6fc>
 800ad20:	ec53 2b18 	vmov	r2, r3, d8
 800ad24:	4911      	ldr	r1, [pc, #68]	; (800ad6c <_dtoa_r+0x65c>)
 800ad26:	2000      	movs	r0, #0
 800ad28:	f7f5 faae 	bl	8000288 <__aeabi_dsub>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4630      	mov	r0, r6
 800ad32:	4639      	mov	r1, r7
 800ad34:	f7f5 fed2 	bl	8000adc <__aeabi_dcmplt>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	f43f af27 	beq.w	800ab8c <_dtoa_r+0x47c>
 800ad3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad40:	1e6b      	subs	r3, r5, #1
 800ad42:	930c      	str	r3, [sp, #48]	; 0x30
 800ad44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad48:	2b30      	cmp	r3, #48	; 0x30
 800ad4a:	d0f8      	beq.n	800ad3e <_dtoa_r+0x62e>
 800ad4c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ad50:	e04a      	b.n	800ade8 <_dtoa_r+0x6d8>
 800ad52:	bf00      	nop
 800ad54:	0800d830 	.word	0x0800d830
 800ad58:	0800d808 	.word	0x0800d808
 800ad5c:	3ff00000 	.word	0x3ff00000
 800ad60:	40240000 	.word	0x40240000
 800ad64:	401c0000 	.word	0x401c0000
 800ad68:	40140000 	.word	0x40140000
 800ad6c:	3fe00000 	.word	0x3fe00000
 800ad70:	4baf      	ldr	r3, [pc, #700]	; (800b030 <_dtoa_r+0x920>)
 800ad72:	f7f5 fc41 	bl	80005f8 <__aeabi_dmul>
 800ad76:	4606      	mov	r6, r0
 800ad78:	460f      	mov	r7, r1
 800ad7a:	e7ac      	b.n	800acd6 <_dtoa_r+0x5c6>
 800ad7c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad80:	9d00      	ldr	r5, [sp, #0]
 800ad82:	4642      	mov	r2, r8
 800ad84:	464b      	mov	r3, r9
 800ad86:	4630      	mov	r0, r6
 800ad88:	4639      	mov	r1, r7
 800ad8a:	f7f5 fd5f 	bl	800084c <__aeabi_ddiv>
 800ad8e:	f7f5 fee3 	bl	8000b58 <__aeabi_d2iz>
 800ad92:	9002      	str	r0, [sp, #8]
 800ad94:	f7f5 fbc6 	bl	8000524 <__aeabi_i2d>
 800ad98:	4642      	mov	r2, r8
 800ad9a:	464b      	mov	r3, r9
 800ad9c:	f7f5 fc2c 	bl	80005f8 <__aeabi_dmul>
 800ada0:	4602      	mov	r2, r0
 800ada2:	460b      	mov	r3, r1
 800ada4:	4630      	mov	r0, r6
 800ada6:	4639      	mov	r1, r7
 800ada8:	f7f5 fa6e 	bl	8000288 <__aeabi_dsub>
 800adac:	9e02      	ldr	r6, [sp, #8]
 800adae:	9f01      	ldr	r7, [sp, #4]
 800adb0:	3630      	adds	r6, #48	; 0x30
 800adb2:	f805 6b01 	strb.w	r6, [r5], #1
 800adb6:	9e00      	ldr	r6, [sp, #0]
 800adb8:	1bae      	subs	r6, r5, r6
 800adba:	42b7      	cmp	r7, r6
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	d137      	bne.n	800ae32 <_dtoa_r+0x722>
 800adc2:	f7f5 fa63 	bl	800028c <__adddf3>
 800adc6:	4642      	mov	r2, r8
 800adc8:	464b      	mov	r3, r9
 800adca:	4606      	mov	r6, r0
 800adcc:	460f      	mov	r7, r1
 800adce:	f7f5 fea3 	bl	8000b18 <__aeabi_dcmpgt>
 800add2:	b9c8      	cbnz	r0, 800ae08 <_dtoa_r+0x6f8>
 800add4:	4642      	mov	r2, r8
 800add6:	464b      	mov	r3, r9
 800add8:	4630      	mov	r0, r6
 800adda:	4639      	mov	r1, r7
 800addc:	f7f5 fe74 	bl	8000ac8 <__aeabi_dcmpeq>
 800ade0:	b110      	cbz	r0, 800ade8 <_dtoa_r+0x6d8>
 800ade2:	9b02      	ldr	r3, [sp, #8]
 800ade4:	07d9      	lsls	r1, r3, #31
 800ade6:	d40f      	bmi.n	800ae08 <_dtoa_r+0x6f8>
 800ade8:	4620      	mov	r0, r4
 800adea:	4659      	mov	r1, fp
 800adec:	f000 fe4a 	bl	800ba84 <_Bfree>
 800adf0:	2300      	movs	r3, #0
 800adf2:	702b      	strb	r3, [r5, #0]
 800adf4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adf6:	f10a 0001 	add.w	r0, sl, #1
 800adfa:	6018      	str	r0, [r3, #0]
 800adfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f43f acd8 	beq.w	800a7b4 <_dtoa_r+0xa4>
 800ae04:	601d      	str	r5, [r3, #0]
 800ae06:	e4d5      	b.n	800a7b4 <_dtoa_r+0xa4>
 800ae08:	f8cd a01c 	str.w	sl, [sp, #28]
 800ae0c:	462b      	mov	r3, r5
 800ae0e:	461d      	mov	r5, r3
 800ae10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae14:	2a39      	cmp	r2, #57	; 0x39
 800ae16:	d108      	bne.n	800ae2a <_dtoa_r+0x71a>
 800ae18:	9a00      	ldr	r2, [sp, #0]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d1f7      	bne.n	800ae0e <_dtoa_r+0x6fe>
 800ae1e:	9a07      	ldr	r2, [sp, #28]
 800ae20:	9900      	ldr	r1, [sp, #0]
 800ae22:	3201      	adds	r2, #1
 800ae24:	9207      	str	r2, [sp, #28]
 800ae26:	2230      	movs	r2, #48	; 0x30
 800ae28:	700a      	strb	r2, [r1, #0]
 800ae2a:	781a      	ldrb	r2, [r3, #0]
 800ae2c:	3201      	adds	r2, #1
 800ae2e:	701a      	strb	r2, [r3, #0]
 800ae30:	e78c      	b.n	800ad4c <_dtoa_r+0x63c>
 800ae32:	4b7f      	ldr	r3, [pc, #508]	; (800b030 <_dtoa_r+0x920>)
 800ae34:	2200      	movs	r2, #0
 800ae36:	f7f5 fbdf 	bl	80005f8 <__aeabi_dmul>
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	4606      	mov	r6, r0
 800ae40:	460f      	mov	r7, r1
 800ae42:	f7f5 fe41 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d09b      	beq.n	800ad82 <_dtoa_r+0x672>
 800ae4a:	e7cd      	b.n	800ade8 <_dtoa_r+0x6d8>
 800ae4c:	9a08      	ldr	r2, [sp, #32]
 800ae4e:	2a00      	cmp	r2, #0
 800ae50:	f000 80c4 	beq.w	800afdc <_dtoa_r+0x8cc>
 800ae54:	9a05      	ldr	r2, [sp, #20]
 800ae56:	2a01      	cmp	r2, #1
 800ae58:	f300 80a8 	bgt.w	800afac <_dtoa_r+0x89c>
 800ae5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ae5e:	2a00      	cmp	r2, #0
 800ae60:	f000 80a0 	beq.w	800afa4 <_dtoa_r+0x894>
 800ae64:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae68:	9e06      	ldr	r6, [sp, #24]
 800ae6a:	4645      	mov	r5, r8
 800ae6c:	9a04      	ldr	r2, [sp, #16]
 800ae6e:	2101      	movs	r1, #1
 800ae70:	441a      	add	r2, r3
 800ae72:	4620      	mov	r0, r4
 800ae74:	4498      	add	r8, r3
 800ae76:	9204      	str	r2, [sp, #16]
 800ae78:	f000 ff0a 	bl	800bc90 <__i2b>
 800ae7c:	4607      	mov	r7, r0
 800ae7e:	2d00      	cmp	r5, #0
 800ae80:	dd0b      	ble.n	800ae9a <_dtoa_r+0x78a>
 800ae82:	9b04      	ldr	r3, [sp, #16]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	dd08      	ble.n	800ae9a <_dtoa_r+0x78a>
 800ae88:	42ab      	cmp	r3, r5
 800ae8a:	9a04      	ldr	r2, [sp, #16]
 800ae8c:	bfa8      	it	ge
 800ae8e:	462b      	movge	r3, r5
 800ae90:	eba8 0803 	sub.w	r8, r8, r3
 800ae94:	1aed      	subs	r5, r5, r3
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	9304      	str	r3, [sp, #16]
 800ae9a:	9b06      	ldr	r3, [sp, #24]
 800ae9c:	b1fb      	cbz	r3, 800aede <_dtoa_r+0x7ce>
 800ae9e:	9b08      	ldr	r3, [sp, #32]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 809f 	beq.w	800afe4 <_dtoa_r+0x8d4>
 800aea6:	2e00      	cmp	r6, #0
 800aea8:	dd11      	ble.n	800aece <_dtoa_r+0x7be>
 800aeaa:	4639      	mov	r1, r7
 800aeac:	4632      	mov	r2, r6
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 ffaa 	bl	800be08 <__pow5mult>
 800aeb4:	465a      	mov	r2, fp
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	4607      	mov	r7, r0
 800aeba:	4620      	mov	r0, r4
 800aebc:	f000 fefe 	bl	800bcbc <__multiply>
 800aec0:	4659      	mov	r1, fp
 800aec2:	9007      	str	r0, [sp, #28]
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 fddd 	bl	800ba84 <_Bfree>
 800aeca:	9b07      	ldr	r3, [sp, #28]
 800aecc:	469b      	mov	fp, r3
 800aece:	9b06      	ldr	r3, [sp, #24]
 800aed0:	1b9a      	subs	r2, r3, r6
 800aed2:	d004      	beq.n	800aede <_dtoa_r+0x7ce>
 800aed4:	4659      	mov	r1, fp
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 ff96 	bl	800be08 <__pow5mult>
 800aedc:	4683      	mov	fp, r0
 800aede:	2101      	movs	r1, #1
 800aee0:	4620      	mov	r0, r4
 800aee2:	f000 fed5 	bl	800bc90 <__i2b>
 800aee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	4606      	mov	r6, r0
 800aeec:	dd7c      	ble.n	800afe8 <_dtoa_r+0x8d8>
 800aeee:	461a      	mov	r2, r3
 800aef0:	4601      	mov	r1, r0
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 ff88 	bl	800be08 <__pow5mult>
 800aef8:	9b05      	ldr	r3, [sp, #20]
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	4606      	mov	r6, r0
 800aefe:	dd76      	ble.n	800afee <_dtoa_r+0x8de>
 800af00:	2300      	movs	r3, #0
 800af02:	9306      	str	r3, [sp, #24]
 800af04:	6933      	ldr	r3, [r6, #16]
 800af06:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af0a:	6918      	ldr	r0, [r3, #16]
 800af0c:	f000 fe70 	bl	800bbf0 <__hi0bits>
 800af10:	f1c0 0020 	rsb	r0, r0, #32
 800af14:	9b04      	ldr	r3, [sp, #16]
 800af16:	4418      	add	r0, r3
 800af18:	f010 001f 	ands.w	r0, r0, #31
 800af1c:	f000 8086 	beq.w	800b02c <_dtoa_r+0x91c>
 800af20:	f1c0 0320 	rsb	r3, r0, #32
 800af24:	2b04      	cmp	r3, #4
 800af26:	dd7f      	ble.n	800b028 <_dtoa_r+0x918>
 800af28:	f1c0 001c 	rsb	r0, r0, #28
 800af2c:	9b04      	ldr	r3, [sp, #16]
 800af2e:	4403      	add	r3, r0
 800af30:	4480      	add	r8, r0
 800af32:	4405      	add	r5, r0
 800af34:	9304      	str	r3, [sp, #16]
 800af36:	f1b8 0f00 	cmp.w	r8, #0
 800af3a:	dd05      	ble.n	800af48 <_dtoa_r+0x838>
 800af3c:	4659      	mov	r1, fp
 800af3e:	4642      	mov	r2, r8
 800af40:	4620      	mov	r0, r4
 800af42:	f000 ffbb 	bl	800bebc <__lshift>
 800af46:	4683      	mov	fp, r0
 800af48:	9b04      	ldr	r3, [sp, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	dd05      	ble.n	800af5a <_dtoa_r+0x84a>
 800af4e:	4631      	mov	r1, r6
 800af50:	461a      	mov	r2, r3
 800af52:	4620      	mov	r0, r4
 800af54:	f000 ffb2 	bl	800bebc <__lshift>
 800af58:	4606      	mov	r6, r0
 800af5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d069      	beq.n	800b034 <_dtoa_r+0x924>
 800af60:	4631      	mov	r1, r6
 800af62:	4658      	mov	r0, fp
 800af64:	f001 f816 	bl	800bf94 <__mcmp>
 800af68:	2800      	cmp	r0, #0
 800af6a:	da63      	bge.n	800b034 <_dtoa_r+0x924>
 800af6c:	2300      	movs	r3, #0
 800af6e:	4659      	mov	r1, fp
 800af70:	220a      	movs	r2, #10
 800af72:	4620      	mov	r0, r4
 800af74:	f000 fda8 	bl	800bac8 <__multadd>
 800af78:	9b08      	ldr	r3, [sp, #32]
 800af7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af7e:	4683      	mov	fp, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	f000 818f 	beq.w	800b2a4 <_dtoa_r+0xb94>
 800af86:	4639      	mov	r1, r7
 800af88:	2300      	movs	r3, #0
 800af8a:	220a      	movs	r2, #10
 800af8c:	4620      	mov	r0, r4
 800af8e:	f000 fd9b 	bl	800bac8 <__multadd>
 800af92:	f1b9 0f00 	cmp.w	r9, #0
 800af96:	4607      	mov	r7, r0
 800af98:	f300 808e 	bgt.w	800b0b8 <_dtoa_r+0x9a8>
 800af9c:	9b05      	ldr	r3, [sp, #20]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	dc50      	bgt.n	800b044 <_dtoa_r+0x934>
 800afa2:	e089      	b.n	800b0b8 <_dtoa_r+0x9a8>
 800afa4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800afa6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afaa:	e75d      	b.n	800ae68 <_dtoa_r+0x758>
 800afac:	9b01      	ldr	r3, [sp, #4]
 800afae:	1e5e      	subs	r6, r3, #1
 800afb0:	9b06      	ldr	r3, [sp, #24]
 800afb2:	42b3      	cmp	r3, r6
 800afb4:	bfbf      	itttt	lt
 800afb6:	9b06      	ldrlt	r3, [sp, #24]
 800afb8:	9606      	strlt	r6, [sp, #24]
 800afba:	1af2      	sublt	r2, r6, r3
 800afbc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800afbe:	bfb6      	itet	lt
 800afc0:	189b      	addlt	r3, r3, r2
 800afc2:	1b9e      	subge	r6, r3, r6
 800afc4:	930d      	strlt	r3, [sp, #52]	; 0x34
 800afc6:	9b01      	ldr	r3, [sp, #4]
 800afc8:	bfb8      	it	lt
 800afca:	2600      	movlt	r6, #0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	bfb5      	itete	lt
 800afd0:	eba8 0503 	sublt.w	r5, r8, r3
 800afd4:	9b01      	ldrge	r3, [sp, #4]
 800afd6:	2300      	movlt	r3, #0
 800afd8:	4645      	movge	r5, r8
 800afda:	e747      	b.n	800ae6c <_dtoa_r+0x75c>
 800afdc:	9e06      	ldr	r6, [sp, #24]
 800afde:	9f08      	ldr	r7, [sp, #32]
 800afe0:	4645      	mov	r5, r8
 800afe2:	e74c      	b.n	800ae7e <_dtoa_r+0x76e>
 800afe4:	9a06      	ldr	r2, [sp, #24]
 800afe6:	e775      	b.n	800aed4 <_dtoa_r+0x7c4>
 800afe8:	9b05      	ldr	r3, [sp, #20]
 800afea:	2b01      	cmp	r3, #1
 800afec:	dc18      	bgt.n	800b020 <_dtoa_r+0x910>
 800afee:	9b02      	ldr	r3, [sp, #8]
 800aff0:	b9b3      	cbnz	r3, 800b020 <_dtoa_r+0x910>
 800aff2:	9b03      	ldr	r3, [sp, #12]
 800aff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aff8:	b9a3      	cbnz	r3, 800b024 <_dtoa_r+0x914>
 800affa:	9b03      	ldr	r3, [sp, #12]
 800affc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b000:	0d1b      	lsrs	r3, r3, #20
 800b002:	051b      	lsls	r3, r3, #20
 800b004:	b12b      	cbz	r3, 800b012 <_dtoa_r+0x902>
 800b006:	9b04      	ldr	r3, [sp, #16]
 800b008:	3301      	adds	r3, #1
 800b00a:	9304      	str	r3, [sp, #16]
 800b00c:	f108 0801 	add.w	r8, r8, #1
 800b010:	2301      	movs	r3, #1
 800b012:	9306      	str	r3, [sp, #24]
 800b014:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b016:	2b00      	cmp	r3, #0
 800b018:	f47f af74 	bne.w	800af04 <_dtoa_r+0x7f4>
 800b01c:	2001      	movs	r0, #1
 800b01e:	e779      	b.n	800af14 <_dtoa_r+0x804>
 800b020:	2300      	movs	r3, #0
 800b022:	e7f6      	b.n	800b012 <_dtoa_r+0x902>
 800b024:	9b02      	ldr	r3, [sp, #8]
 800b026:	e7f4      	b.n	800b012 <_dtoa_r+0x902>
 800b028:	d085      	beq.n	800af36 <_dtoa_r+0x826>
 800b02a:	4618      	mov	r0, r3
 800b02c:	301c      	adds	r0, #28
 800b02e:	e77d      	b.n	800af2c <_dtoa_r+0x81c>
 800b030:	40240000 	.word	0x40240000
 800b034:	9b01      	ldr	r3, [sp, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	dc38      	bgt.n	800b0ac <_dtoa_r+0x99c>
 800b03a:	9b05      	ldr	r3, [sp, #20]
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	dd35      	ble.n	800b0ac <_dtoa_r+0x99c>
 800b040:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b044:	f1b9 0f00 	cmp.w	r9, #0
 800b048:	d10d      	bne.n	800b066 <_dtoa_r+0x956>
 800b04a:	4631      	mov	r1, r6
 800b04c:	464b      	mov	r3, r9
 800b04e:	2205      	movs	r2, #5
 800b050:	4620      	mov	r0, r4
 800b052:	f000 fd39 	bl	800bac8 <__multadd>
 800b056:	4601      	mov	r1, r0
 800b058:	4606      	mov	r6, r0
 800b05a:	4658      	mov	r0, fp
 800b05c:	f000 ff9a 	bl	800bf94 <__mcmp>
 800b060:	2800      	cmp	r0, #0
 800b062:	f73f adbd 	bgt.w	800abe0 <_dtoa_r+0x4d0>
 800b066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b068:	9d00      	ldr	r5, [sp, #0]
 800b06a:	ea6f 0a03 	mvn.w	sl, r3
 800b06e:	f04f 0800 	mov.w	r8, #0
 800b072:	4631      	mov	r1, r6
 800b074:	4620      	mov	r0, r4
 800b076:	f000 fd05 	bl	800ba84 <_Bfree>
 800b07a:	2f00      	cmp	r7, #0
 800b07c:	f43f aeb4 	beq.w	800ade8 <_dtoa_r+0x6d8>
 800b080:	f1b8 0f00 	cmp.w	r8, #0
 800b084:	d005      	beq.n	800b092 <_dtoa_r+0x982>
 800b086:	45b8      	cmp	r8, r7
 800b088:	d003      	beq.n	800b092 <_dtoa_r+0x982>
 800b08a:	4641      	mov	r1, r8
 800b08c:	4620      	mov	r0, r4
 800b08e:	f000 fcf9 	bl	800ba84 <_Bfree>
 800b092:	4639      	mov	r1, r7
 800b094:	4620      	mov	r0, r4
 800b096:	f000 fcf5 	bl	800ba84 <_Bfree>
 800b09a:	e6a5      	b.n	800ade8 <_dtoa_r+0x6d8>
 800b09c:	2600      	movs	r6, #0
 800b09e:	4637      	mov	r7, r6
 800b0a0:	e7e1      	b.n	800b066 <_dtoa_r+0x956>
 800b0a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b0a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b0a8:	4637      	mov	r7, r6
 800b0aa:	e599      	b.n	800abe0 <_dtoa_r+0x4d0>
 800b0ac:	9b08      	ldr	r3, [sp, #32]
 800b0ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	f000 80fd 	beq.w	800b2b2 <_dtoa_r+0xba2>
 800b0b8:	2d00      	cmp	r5, #0
 800b0ba:	dd05      	ble.n	800b0c8 <_dtoa_r+0x9b8>
 800b0bc:	4639      	mov	r1, r7
 800b0be:	462a      	mov	r2, r5
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	f000 fefb 	bl	800bebc <__lshift>
 800b0c6:	4607      	mov	r7, r0
 800b0c8:	9b06      	ldr	r3, [sp, #24]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d05c      	beq.n	800b188 <_dtoa_r+0xa78>
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	f000 fc97 	bl	800ba04 <_Balloc>
 800b0d6:	4605      	mov	r5, r0
 800b0d8:	b928      	cbnz	r0, 800b0e6 <_dtoa_r+0x9d6>
 800b0da:	4b80      	ldr	r3, [pc, #512]	; (800b2dc <_dtoa_r+0xbcc>)
 800b0dc:	4602      	mov	r2, r0
 800b0de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b0e2:	f7ff bb2e 	b.w	800a742 <_dtoa_r+0x32>
 800b0e6:	693a      	ldr	r2, [r7, #16]
 800b0e8:	3202      	adds	r2, #2
 800b0ea:	0092      	lsls	r2, r2, #2
 800b0ec:	f107 010c 	add.w	r1, r7, #12
 800b0f0:	300c      	adds	r0, #12
 800b0f2:	f7fd fd15 	bl	8008b20 <memcpy>
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	4629      	mov	r1, r5
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f000 fede 	bl	800bebc <__lshift>
 800b100:	9b00      	ldr	r3, [sp, #0]
 800b102:	3301      	adds	r3, #1
 800b104:	9301      	str	r3, [sp, #4]
 800b106:	9b00      	ldr	r3, [sp, #0]
 800b108:	444b      	add	r3, r9
 800b10a:	9307      	str	r3, [sp, #28]
 800b10c:	9b02      	ldr	r3, [sp, #8]
 800b10e:	f003 0301 	and.w	r3, r3, #1
 800b112:	46b8      	mov	r8, r7
 800b114:	9306      	str	r3, [sp, #24]
 800b116:	4607      	mov	r7, r0
 800b118:	9b01      	ldr	r3, [sp, #4]
 800b11a:	4631      	mov	r1, r6
 800b11c:	3b01      	subs	r3, #1
 800b11e:	4658      	mov	r0, fp
 800b120:	9302      	str	r3, [sp, #8]
 800b122:	f7ff fa67 	bl	800a5f4 <quorem>
 800b126:	4603      	mov	r3, r0
 800b128:	3330      	adds	r3, #48	; 0x30
 800b12a:	9004      	str	r0, [sp, #16]
 800b12c:	4641      	mov	r1, r8
 800b12e:	4658      	mov	r0, fp
 800b130:	9308      	str	r3, [sp, #32]
 800b132:	f000 ff2f 	bl	800bf94 <__mcmp>
 800b136:	463a      	mov	r2, r7
 800b138:	4681      	mov	r9, r0
 800b13a:	4631      	mov	r1, r6
 800b13c:	4620      	mov	r0, r4
 800b13e:	f000 ff45 	bl	800bfcc <__mdiff>
 800b142:	68c2      	ldr	r2, [r0, #12]
 800b144:	9b08      	ldr	r3, [sp, #32]
 800b146:	4605      	mov	r5, r0
 800b148:	bb02      	cbnz	r2, 800b18c <_dtoa_r+0xa7c>
 800b14a:	4601      	mov	r1, r0
 800b14c:	4658      	mov	r0, fp
 800b14e:	f000 ff21 	bl	800bf94 <__mcmp>
 800b152:	9b08      	ldr	r3, [sp, #32]
 800b154:	4602      	mov	r2, r0
 800b156:	4629      	mov	r1, r5
 800b158:	4620      	mov	r0, r4
 800b15a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b15e:	f000 fc91 	bl	800ba84 <_Bfree>
 800b162:	9b05      	ldr	r3, [sp, #20]
 800b164:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b166:	9d01      	ldr	r5, [sp, #4]
 800b168:	ea43 0102 	orr.w	r1, r3, r2
 800b16c:	9b06      	ldr	r3, [sp, #24]
 800b16e:	430b      	orrs	r3, r1
 800b170:	9b08      	ldr	r3, [sp, #32]
 800b172:	d10d      	bne.n	800b190 <_dtoa_r+0xa80>
 800b174:	2b39      	cmp	r3, #57	; 0x39
 800b176:	d029      	beq.n	800b1cc <_dtoa_r+0xabc>
 800b178:	f1b9 0f00 	cmp.w	r9, #0
 800b17c:	dd01      	ble.n	800b182 <_dtoa_r+0xa72>
 800b17e:	9b04      	ldr	r3, [sp, #16]
 800b180:	3331      	adds	r3, #49	; 0x31
 800b182:	9a02      	ldr	r2, [sp, #8]
 800b184:	7013      	strb	r3, [r2, #0]
 800b186:	e774      	b.n	800b072 <_dtoa_r+0x962>
 800b188:	4638      	mov	r0, r7
 800b18a:	e7b9      	b.n	800b100 <_dtoa_r+0x9f0>
 800b18c:	2201      	movs	r2, #1
 800b18e:	e7e2      	b.n	800b156 <_dtoa_r+0xa46>
 800b190:	f1b9 0f00 	cmp.w	r9, #0
 800b194:	db06      	blt.n	800b1a4 <_dtoa_r+0xa94>
 800b196:	9905      	ldr	r1, [sp, #20]
 800b198:	ea41 0909 	orr.w	r9, r1, r9
 800b19c:	9906      	ldr	r1, [sp, #24]
 800b19e:	ea59 0101 	orrs.w	r1, r9, r1
 800b1a2:	d120      	bne.n	800b1e6 <_dtoa_r+0xad6>
 800b1a4:	2a00      	cmp	r2, #0
 800b1a6:	ddec      	ble.n	800b182 <_dtoa_r+0xa72>
 800b1a8:	4659      	mov	r1, fp
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	9301      	str	r3, [sp, #4]
 800b1b0:	f000 fe84 	bl	800bebc <__lshift>
 800b1b4:	4631      	mov	r1, r6
 800b1b6:	4683      	mov	fp, r0
 800b1b8:	f000 feec 	bl	800bf94 <__mcmp>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	9b01      	ldr	r3, [sp, #4]
 800b1c0:	dc02      	bgt.n	800b1c8 <_dtoa_r+0xab8>
 800b1c2:	d1de      	bne.n	800b182 <_dtoa_r+0xa72>
 800b1c4:	07da      	lsls	r2, r3, #31
 800b1c6:	d5dc      	bpl.n	800b182 <_dtoa_r+0xa72>
 800b1c8:	2b39      	cmp	r3, #57	; 0x39
 800b1ca:	d1d8      	bne.n	800b17e <_dtoa_r+0xa6e>
 800b1cc:	9a02      	ldr	r2, [sp, #8]
 800b1ce:	2339      	movs	r3, #57	; 0x39
 800b1d0:	7013      	strb	r3, [r2, #0]
 800b1d2:	462b      	mov	r3, r5
 800b1d4:	461d      	mov	r5, r3
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b1dc:	2a39      	cmp	r2, #57	; 0x39
 800b1de:	d050      	beq.n	800b282 <_dtoa_r+0xb72>
 800b1e0:	3201      	adds	r2, #1
 800b1e2:	701a      	strb	r2, [r3, #0]
 800b1e4:	e745      	b.n	800b072 <_dtoa_r+0x962>
 800b1e6:	2a00      	cmp	r2, #0
 800b1e8:	dd03      	ble.n	800b1f2 <_dtoa_r+0xae2>
 800b1ea:	2b39      	cmp	r3, #57	; 0x39
 800b1ec:	d0ee      	beq.n	800b1cc <_dtoa_r+0xabc>
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	e7c7      	b.n	800b182 <_dtoa_r+0xa72>
 800b1f2:	9a01      	ldr	r2, [sp, #4]
 800b1f4:	9907      	ldr	r1, [sp, #28]
 800b1f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1fa:	428a      	cmp	r2, r1
 800b1fc:	d02a      	beq.n	800b254 <_dtoa_r+0xb44>
 800b1fe:	4659      	mov	r1, fp
 800b200:	2300      	movs	r3, #0
 800b202:	220a      	movs	r2, #10
 800b204:	4620      	mov	r0, r4
 800b206:	f000 fc5f 	bl	800bac8 <__multadd>
 800b20a:	45b8      	cmp	r8, r7
 800b20c:	4683      	mov	fp, r0
 800b20e:	f04f 0300 	mov.w	r3, #0
 800b212:	f04f 020a 	mov.w	r2, #10
 800b216:	4641      	mov	r1, r8
 800b218:	4620      	mov	r0, r4
 800b21a:	d107      	bne.n	800b22c <_dtoa_r+0xb1c>
 800b21c:	f000 fc54 	bl	800bac8 <__multadd>
 800b220:	4680      	mov	r8, r0
 800b222:	4607      	mov	r7, r0
 800b224:	9b01      	ldr	r3, [sp, #4]
 800b226:	3301      	adds	r3, #1
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	e775      	b.n	800b118 <_dtoa_r+0xa08>
 800b22c:	f000 fc4c 	bl	800bac8 <__multadd>
 800b230:	4639      	mov	r1, r7
 800b232:	4680      	mov	r8, r0
 800b234:	2300      	movs	r3, #0
 800b236:	220a      	movs	r2, #10
 800b238:	4620      	mov	r0, r4
 800b23a:	f000 fc45 	bl	800bac8 <__multadd>
 800b23e:	4607      	mov	r7, r0
 800b240:	e7f0      	b.n	800b224 <_dtoa_r+0xb14>
 800b242:	f1b9 0f00 	cmp.w	r9, #0
 800b246:	9a00      	ldr	r2, [sp, #0]
 800b248:	bfcc      	ite	gt
 800b24a:	464d      	movgt	r5, r9
 800b24c:	2501      	movle	r5, #1
 800b24e:	4415      	add	r5, r2
 800b250:	f04f 0800 	mov.w	r8, #0
 800b254:	4659      	mov	r1, fp
 800b256:	2201      	movs	r2, #1
 800b258:	4620      	mov	r0, r4
 800b25a:	9301      	str	r3, [sp, #4]
 800b25c:	f000 fe2e 	bl	800bebc <__lshift>
 800b260:	4631      	mov	r1, r6
 800b262:	4683      	mov	fp, r0
 800b264:	f000 fe96 	bl	800bf94 <__mcmp>
 800b268:	2800      	cmp	r0, #0
 800b26a:	dcb2      	bgt.n	800b1d2 <_dtoa_r+0xac2>
 800b26c:	d102      	bne.n	800b274 <_dtoa_r+0xb64>
 800b26e:	9b01      	ldr	r3, [sp, #4]
 800b270:	07db      	lsls	r3, r3, #31
 800b272:	d4ae      	bmi.n	800b1d2 <_dtoa_r+0xac2>
 800b274:	462b      	mov	r3, r5
 800b276:	461d      	mov	r5, r3
 800b278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b27c:	2a30      	cmp	r2, #48	; 0x30
 800b27e:	d0fa      	beq.n	800b276 <_dtoa_r+0xb66>
 800b280:	e6f7      	b.n	800b072 <_dtoa_r+0x962>
 800b282:	9a00      	ldr	r2, [sp, #0]
 800b284:	429a      	cmp	r2, r3
 800b286:	d1a5      	bne.n	800b1d4 <_dtoa_r+0xac4>
 800b288:	f10a 0a01 	add.w	sl, sl, #1
 800b28c:	2331      	movs	r3, #49	; 0x31
 800b28e:	e779      	b.n	800b184 <_dtoa_r+0xa74>
 800b290:	4b13      	ldr	r3, [pc, #76]	; (800b2e0 <_dtoa_r+0xbd0>)
 800b292:	f7ff baaf 	b.w	800a7f4 <_dtoa_r+0xe4>
 800b296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b298:	2b00      	cmp	r3, #0
 800b29a:	f47f aa86 	bne.w	800a7aa <_dtoa_r+0x9a>
 800b29e:	4b11      	ldr	r3, [pc, #68]	; (800b2e4 <_dtoa_r+0xbd4>)
 800b2a0:	f7ff baa8 	b.w	800a7f4 <_dtoa_r+0xe4>
 800b2a4:	f1b9 0f00 	cmp.w	r9, #0
 800b2a8:	dc03      	bgt.n	800b2b2 <_dtoa_r+0xba2>
 800b2aa:	9b05      	ldr	r3, [sp, #20]
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	f73f aec9 	bgt.w	800b044 <_dtoa_r+0x934>
 800b2b2:	9d00      	ldr	r5, [sp, #0]
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	4658      	mov	r0, fp
 800b2b8:	f7ff f99c 	bl	800a5f4 <quorem>
 800b2bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b2c0:	f805 3b01 	strb.w	r3, [r5], #1
 800b2c4:	9a00      	ldr	r2, [sp, #0]
 800b2c6:	1aaa      	subs	r2, r5, r2
 800b2c8:	4591      	cmp	r9, r2
 800b2ca:	ddba      	ble.n	800b242 <_dtoa_r+0xb32>
 800b2cc:	4659      	mov	r1, fp
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	220a      	movs	r2, #10
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f000 fbf8 	bl	800bac8 <__multadd>
 800b2d8:	4683      	mov	fp, r0
 800b2da:	e7eb      	b.n	800b2b4 <_dtoa_r+0xba4>
 800b2dc:	0800d714 	.word	0x0800d714
 800b2e0:	0800d514 	.word	0x0800d514
 800b2e4:	0800d691 	.word	0x0800d691

0800b2e8 <rshift>:
 800b2e8:	6903      	ldr	r3, [r0, #16]
 800b2ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b2f6:	f100 0414 	add.w	r4, r0, #20
 800b2fa:	dd45      	ble.n	800b388 <rshift+0xa0>
 800b2fc:	f011 011f 	ands.w	r1, r1, #31
 800b300:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b304:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b308:	d10c      	bne.n	800b324 <rshift+0x3c>
 800b30a:	f100 0710 	add.w	r7, r0, #16
 800b30e:	4629      	mov	r1, r5
 800b310:	42b1      	cmp	r1, r6
 800b312:	d334      	bcc.n	800b37e <rshift+0x96>
 800b314:	1a9b      	subs	r3, r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	1eea      	subs	r2, r5, #3
 800b31a:	4296      	cmp	r6, r2
 800b31c:	bf38      	it	cc
 800b31e:	2300      	movcc	r3, #0
 800b320:	4423      	add	r3, r4
 800b322:	e015      	b.n	800b350 <rshift+0x68>
 800b324:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b328:	f1c1 0820 	rsb	r8, r1, #32
 800b32c:	40cf      	lsrs	r7, r1
 800b32e:	f105 0e04 	add.w	lr, r5, #4
 800b332:	46a1      	mov	r9, r4
 800b334:	4576      	cmp	r6, lr
 800b336:	46f4      	mov	ip, lr
 800b338:	d815      	bhi.n	800b366 <rshift+0x7e>
 800b33a:	1a9b      	subs	r3, r3, r2
 800b33c:	009a      	lsls	r2, r3, #2
 800b33e:	3a04      	subs	r2, #4
 800b340:	3501      	adds	r5, #1
 800b342:	42ae      	cmp	r6, r5
 800b344:	bf38      	it	cc
 800b346:	2200      	movcc	r2, #0
 800b348:	18a3      	adds	r3, r4, r2
 800b34a:	50a7      	str	r7, [r4, r2]
 800b34c:	b107      	cbz	r7, 800b350 <rshift+0x68>
 800b34e:	3304      	adds	r3, #4
 800b350:	1b1a      	subs	r2, r3, r4
 800b352:	42a3      	cmp	r3, r4
 800b354:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b358:	bf08      	it	eq
 800b35a:	2300      	moveq	r3, #0
 800b35c:	6102      	str	r2, [r0, #16]
 800b35e:	bf08      	it	eq
 800b360:	6143      	streq	r3, [r0, #20]
 800b362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b366:	f8dc c000 	ldr.w	ip, [ip]
 800b36a:	fa0c fc08 	lsl.w	ip, ip, r8
 800b36e:	ea4c 0707 	orr.w	r7, ip, r7
 800b372:	f849 7b04 	str.w	r7, [r9], #4
 800b376:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b37a:	40cf      	lsrs	r7, r1
 800b37c:	e7da      	b.n	800b334 <rshift+0x4c>
 800b37e:	f851 cb04 	ldr.w	ip, [r1], #4
 800b382:	f847 cf04 	str.w	ip, [r7, #4]!
 800b386:	e7c3      	b.n	800b310 <rshift+0x28>
 800b388:	4623      	mov	r3, r4
 800b38a:	e7e1      	b.n	800b350 <rshift+0x68>

0800b38c <__hexdig_fun>:
 800b38c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b390:	2b09      	cmp	r3, #9
 800b392:	d802      	bhi.n	800b39a <__hexdig_fun+0xe>
 800b394:	3820      	subs	r0, #32
 800b396:	b2c0      	uxtb	r0, r0
 800b398:	4770      	bx	lr
 800b39a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b39e:	2b05      	cmp	r3, #5
 800b3a0:	d801      	bhi.n	800b3a6 <__hexdig_fun+0x1a>
 800b3a2:	3847      	subs	r0, #71	; 0x47
 800b3a4:	e7f7      	b.n	800b396 <__hexdig_fun+0xa>
 800b3a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b3aa:	2b05      	cmp	r3, #5
 800b3ac:	d801      	bhi.n	800b3b2 <__hexdig_fun+0x26>
 800b3ae:	3827      	subs	r0, #39	; 0x27
 800b3b0:	e7f1      	b.n	800b396 <__hexdig_fun+0xa>
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	4770      	bx	lr
	...

0800b3b8 <__gethex>:
 800b3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3bc:	ed2d 8b02 	vpush	{d8}
 800b3c0:	b089      	sub	sp, #36	; 0x24
 800b3c2:	ee08 0a10 	vmov	s16, r0
 800b3c6:	9304      	str	r3, [sp, #16]
 800b3c8:	4bbc      	ldr	r3, [pc, #752]	; (800b6bc <__gethex+0x304>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	9301      	str	r3, [sp, #4]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	468b      	mov	fp, r1
 800b3d2:	4690      	mov	r8, r2
 800b3d4:	f7f4 fefc 	bl	80001d0 <strlen>
 800b3d8:	9b01      	ldr	r3, [sp, #4]
 800b3da:	f8db 2000 	ldr.w	r2, [fp]
 800b3de:	4403      	add	r3, r0
 800b3e0:	4682      	mov	sl, r0
 800b3e2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b3e6:	9305      	str	r3, [sp, #20]
 800b3e8:	1c93      	adds	r3, r2, #2
 800b3ea:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b3ee:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3f2:	32fe      	adds	r2, #254	; 0xfe
 800b3f4:	18d1      	adds	r1, r2, r3
 800b3f6:	461f      	mov	r7, r3
 800b3f8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b3fc:	9100      	str	r1, [sp, #0]
 800b3fe:	2830      	cmp	r0, #48	; 0x30
 800b400:	d0f8      	beq.n	800b3f4 <__gethex+0x3c>
 800b402:	f7ff ffc3 	bl	800b38c <__hexdig_fun>
 800b406:	4604      	mov	r4, r0
 800b408:	2800      	cmp	r0, #0
 800b40a:	d13a      	bne.n	800b482 <__gethex+0xca>
 800b40c:	9901      	ldr	r1, [sp, #4]
 800b40e:	4652      	mov	r2, sl
 800b410:	4638      	mov	r0, r7
 800b412:	f001 f9e1 	bl	800c7d8 <strncmp>
 800b416:	4605      	mov	r5, r0
 800b418:	2800      	cmp	r0, #0
 800b41a:	d168      	bne.n	800b4ee <__gethex+0x136>
 800b41c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b420:	eb07 060a 	add.w	r6, r7, sl
 800b424:	f7ff ffb2 	bl	800b38c <__hexdig_fun>
 800b428:	2800      	cmp	r0, #0
 800b42a:	d062      	beq.n	800b4f2 <__gethex+0x13a>
 800b42c:	4633      	mov	r3, r6
 800b42e:	7818      	ldrb	r0, [r3, #0]
 800b430:	2830      	cmp	r0, #48	; 0x30
 800b432:	461f      	mov	r7, r3
 800b434:	f103 0301 	add.w	r3, r3, #1
 800b438:	d0f9      	beq.n	800b42e <__gethex+0x76>
 800b43a:	f7ff ffa7 	bl	800b38c <__hexdig_fun>
 800b43e:	2301      	movs	r3, #1
 800b440:	fab0 f480 	clz	r4, r0
 800b444:	0964      	lsrs	r4, r4, #5
 800b446:	4635      	mov	r5, r6
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	463a      	mov	r2, r7
 800b44c:	4616      	mov	r6, r2
 800b44e:	3201      	adds	r2, #1
 800b450:	7830      	ldrb	r0, [r6, #0]
 800b452:	f7ff ff9b 	bl	800b38c <__hexdig_fun>
 800b456:	2800      	cmp	r0, #0
 800b458:	d1f8      	bne.n	800b44c <__gethex+0x94>
 800b45a:	9901      	ldr	r1, [sp, #4]
 800b45c:	4652      	mov	r2, sl
 800b45e:	4630      	mov	r0, r6
 800b460:	f001 f9ba 	bl	800c7d8 <strncmp>
 800b464:	b980      	cbnz	r0, 800b488 <__gethex+0xd0>
 800b466:	b94d      	cbnz	r5, 800b47c <__gethex+0xc4>
 800b468:	eb06 050a 	add.w	r5, r6, sl
 800b46c:	462a      	mov	r2, r5
 800b46e:	4616      	mov	r6, r2
 800b470:	3201      	adds	r2, #1
 800b472:	7830      	ldrb	r0, [r6, #0]
 800b474:	f7ff ff8a 	bl	800b38c <__hexdig_fun>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d1f8      	bne.n	800b46e <__gethex+0xb6>
 800b47c:	1bad      	subs	r5, r5, r6
 800b47e:	00ad      	lsls	r5, r5, #2
 800b480:	e004      	b.n	800b48c <__gethex+0xd4>
 800b482:	2400      	movs	r4, #0
 800b484:	4625      	mov	r5, r4
 800b486:	e7e0      	b.n	800b44a <__gethex+0x92>
 800b488:	2d00      	cmp	r5, #0
 800b48a:	d1f7      	bne.n	800b47c <__gethex+0xc4>
 800b48c:	7833      	ldrb	r3, [r6, #0]
 800b48e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b492:	2b50      	cmp	r3, #80	; 0x50
 800b494:	d13b      	bne.n	800b50e <__gethex+0x156>
 800b496:	7873      	ldrb	r3, [r6, #1]
 800b498:	2b2b      	cmp	r3, #43	; 0x2b
 800b49a:	d02c      	beq.n	800b4f6 <__gethex+0x13e>
 800b49c:	2b2d      	cmp	r3, #45	; 0x2d
 800b49e:	d02e      	beq.n	800b4fe <__gethex+0x146>
 800b4a0:	1c71      	adds	r1, r6, #1
 800b4a2:	f04f 0900 	mov.w	r9, #0
 800b4a6:	7808      	ldrb	r0, [r1, #0]
 800b4a8:	f7ff ff70 	bl	800b38c <__hexdig_fun>
 800b4ac:	1e43      	subs	r3, r0, #1
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	2b18      	cmp	r3, #24
 800b4b2:	d82c      	bhi.n	800b50e <__gethex+0x156>
 800b4b4:	f1a0 0210 	sub.w	r2, r0, #16
 800b4b8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b4bc:	f7ff ff66 	bl	800b38c <__hexdig_fun>
 800b4c0:	1e43      	subs	r3, r0, #1
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b18      	cmp	r3, #24
 800b4c6:	d91d      	bls.n	800b504 <__gethex+0x14c>
 800b4c8:	f1b9 0f00 	cmp.w	r9, #0
 800b4cc:	d000      	beq.n	800b4d0 <__gethex+0x118>
 800b4ce:	4252      	negs	r2, r2
 800b4d0:	4415      	add	r5, r2
 800b4d2:	f8cb 1000 	str.w	r1, [fp]
 800b4d6:	b1e4      	cbz	r4, 800b512 <__gethex+0x15a>
 800b4d8:	9b00      	ldr	r3, [sp, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	bf14      	ite	ne
 800b4de:	2700      	movne	r7, #0
 800b4e0:	2706      	moveq	r7, #6
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	b009      	add	sp, #36	; 0x24
 800b4e6:	ecbd 8b02 	vpop	{d8}
 800b4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4ee:	463e      	mov	r6, r7
 800b4f0:	4625      	mov	r5, r4
 800b4f2:	2401      	movs	r4, #1
 800b4f4:	e7ca      	b.n	800b48c <__gethex+0xd4>
 800b4f6:	f04f 0900 	mov.w	r9, #0
 800b4fa:	1cb1      	adds	r1, r6, #2
 800b4fc:	e7d3      	b.n	800b4a6 <__gethex+0xee>
 800b4fe:	f04f 0901 	mov.w	r9, #1
 800b502:	e7fa      	b.n	800b4fa <__gethex+0x142>
 800b504:	230a      	movs	r3, #10
 800b506:	fb03 0202 	mla	r2, r3, r2, r0
 800b50a:	3a10      	subs	r2, #16
 800b50c:	e7d4      	b.n	800b4b8 <__gethex+0x100>
 800b50e:	4631      	mov	r1, r6
 800b510:	e7df      	b.n	800b4d2 <__gethex+0x11a>
 800b512:	1bf3      	subs	r3, r6, r7
 800b514:	3b01      	subs	r3, #1
 800b516:	4621      	mov	r1, r4
 800b518:	2b07      	cmp	r3, #7
 800b51a:	dc0b      	bgt.n	800b534 <__gethex+0x17c>
 800b51c:	ee18 0a10 	vmov	r0, s16
 800b520:	f000 fa70 	bl	800ba04 <_Balloc>
 800b524:	4604      	mov	r4, r0
 800b526:	b940      	cbnz	r0, 800b53a <__gethex+0x182>
 800b528:	4b65      	ldr	r3, [pc, #404]	; (800b6c0 <__gethex+0x308>)
 800b52a:	4602      	mov	r2, r0
 800b52c:	21de      	movs	r1, #222	; 0xde
 800b52e:	4865      	ldr	r0, [pc, #404]	; (800b6c4 <__gethex+0x30c>)
 800b530:	f001 f972 	bl	800c818 <__assert_func>
 800b534:	3101      	adds	r1, #1
 800b536:	105b      	asrs	r3, r3, #1
 800b538:	e7ee      	b.n	800b518 <__gethex+0x160>
 800b53a:	f100 0914 	add.w	r9, r0, #20
 800b53e:	f04f 0b00 	mov.w	fp, #0
 800b542:	f1ca 0301 	rsb	r3, sl, #1
 800b546:	f8cd 9008 	str.w	r9, [sp, #8]
 800b54a:	f8cd b000 	str.w	fp, [sp]
 800b54e:	9306      	str	r3, [sp, #24]
 800b550:	42b7      	cmp	r7, r6
 800b552:	d340      	bcc.n	800b5d6 <__gethex+0x21e>
 800b554:	9802      	ldr	r0, [sp, #8]
 800b556:	9b00      	ldr	r3, [sp, #0]
 800b558:	f840 3b04 	str.w	r3, [r0], #4
 800b55c:	eba0 0009 	sub.w	r0, r0, r9
 800b560:	1080      	asrs	r0, r0, #2
 800b562:	0146      	lsls	r6, r0, #5
 800b564:	6120      	str	r0, [r4, #16]
 800b566:	4618      	mov	r0, r3
 800b568:	f000 fb42 	bl	800bbf0 <__hi0bits>
 800b56c:	1a30      	subs	r0, r6, r0
 800b56e:	f8d8 6000 	ldr.w	r6, [r8]
 800b572:	42b0      	cmp	r0, r6
 800b574:	dd63      	ble.n	800b63e <__gethex+0x286>
 800b576:	1b87      	subs	r7, r0, r6
 800b578:	4639      	mov	r1, r7
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 fedc 	bl	800c338 <__any_on>
 800b580:	4682      	mov	sl, r0
 800b582:	b1a8      	cbz	r0, 800b5b0 <__gethex+0x1f8>
 800b584:	1e7b      	subs	r3, r7, #1
 800b586:	1159      	asrs	r1, r3, #5
 800b588:	f003 021f 	and.w	r2, r3, #31
 800b58c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b590:	f04f 0a01 	mov.w	sl, #1
 800b594:	fa0a f202 	lsl.w	r2, sl, r2
 800b598:	420a      	tst	r2, r1
 800b59a:	d009      	beq.n	800b5b0 <__gethex+0x1f8>
 800b59c:	4553      	cmp	r3, sl
 800b59e:	dd05      	ble.n	800b5ac <__gethex+0x1f4>
 800b5a0:	1eb9      	subs	r1, r7, #2
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 fec8 	bl	800c338 <__any_on>
 800b5a8:	2800      	cmp	r0, #0
 800b5aa:	d145      	bne.n	800b638 <__gethex+0x280>
 800b5ac:	f04f 0a02 	mov.w	sl, #2
 800b5b0:	4639      	mov	r1, r7
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	f7ff fe98 	bl	800b2e8 <rshift>
 800b5b8:	443d      	add	r5, r7
 800b5ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5be:	42ab      	cmp	r3, r5
 800b5c0:	da4c      	bge.n	800b65c <__gethex+0x2a4>
 800b5c2:	ee18 0a10 	vmov	r0, s16
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	f000 fa5c 	bl	800ba84 <_Bfree>
 800b5cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	27a3      	movs	r7, #163	; 0xa3
 800b5d4:	e785      	b.n	800b4e2 <__gethex+0x12a>
 800b5d6:	1e73      	subs	r3, r6, #1
 800b5d8:	9a05      	ldr	r2, [sp, #20]
 800b5da:	9303      	str	r3, [sp, #12]
 800b5dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d019      	beq.n	800b618 <__gethex+0x260>
 800b5e4:	f1bb 0f20 	cmp.w	fp, #32
 800b5e8:	d107      	bne.n	800b5fa <__gethex+0x242>
 800b5ea:	9b02      	ldr	r3, [sp, #8]
 800b5ec:	9a00      	ldr	r2, [sp, #0]
 800b5ee:	f843 2b04 	str.w	r2, [r3], #4
 800b5f2:	9302      	str	r3, [sp, #8]
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	469b      	mov	fp, r3
 800b5fa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b5fe:	f7ff fec5 	bl	800b38c <__hexdig_fun>
 800b602:	9b00      	ldr	r3, [sp, #0]
 800b604:	f000 000f 	and.w	r0, r0, #15
 800b608:	fa00 f00b 	lsl.w	r0, r0, fp
 800b60c:	4303      	orrs	r3, r0
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	f10b 0b04 	add.w	fp, fp, #4
 800b614:	9b03      	ldr	r3, [sp, #12]
 800b616:	e00d      	b.n	800b634 <__gethex+0x27c>
 800b618:	9b03      	ldr	r3, [sp, #12]
 800b61a:	9a06      	ldr	r2, [sp, #24]
 800b61c:	4413      	add	r3, r2
 800b61e:	42bb      	cmp	r3, r7
 800b620:	d3e0      	bcc.n	800b5e4 <__gethex+0x22c>
 800b622:	4618      	mov	r0, r3
 800b624:	9901      	ldr	r1, [sp, #4]
 800b626:	9307      	str	r3, [sp, #28]
 800b628:	4652      	mov	r2, sl
 800b62a:	f001 f8d5 	bl	800c7d8 <strncmp>
 800b62e:	9b07      	ldr	r3, [sp, #28]
 800b630:	2800      	cmp	r0, #0
 800b632:	d1d7      	bne.n	800b5e4 <__gethex+0x22c>
 800b634:	461e      	mov	r6, r3
 800b636:	e78b      	b.n	800b550 <__gethex+0x198>
 800b638:	f04f 0a03 	mov.w	sl, #3
 800b63c:	e7b8      	b.n	800b5b0 <__gethex+0x1f8>
 800b63e:	da0a      	bge.n	800b656 <__gethex+0x29e>
 800b640:	1a37      	subs	r7, r6, r0
 800b642:	4621      	mov	r1, r4
 800b644:	ee18 0a10 	vmov	r0, s16
 800b648:	463a      	mov	r2, r7
 800b64a:	f000 fc37 	bl	800bebc <__lshift>
 800b64e:	1bed      	subs	r5, r5, r7
 800b650:	4604      	mov	r4, r0
 800b652:	f100 0914 	add.w	r9, r0, #20
 800b656:	f04f 0a00 	mov.w	sl, #0
 800b65a:	e7ae      	b.n	800b5ba <__gethex+0x202>
 800b65c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b660:	42a8      	cmp	r0, r5
 800b662:	dd72      	ble.n	800b74a <__gethex+0x392>
 800b664:	1b45      	subs	r5, r0, r5
 800b666:	42ae      	cmp	r6, r5
 800b668:	dc36      	bgt.n	800b6d8 <__gethex+0x320>
 800b66a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b66e:	2b02      	cmp	r3, #2
 800b670:	d02a      	beq.n	800b6c8 <__gethex+0x310>
 800b672:	2b03      	cmp	r3, #3
 800b674:	d02c      	beq.n	800b6d0 <__gethex+0x318>
 800b676:	2b01      	cmp	r3, #1
 800b678:	d115      	bne.n	800b6a6 <__gethex+0x2ee>
 800b67a:	42ae      	cmp	r6, r5
 800b67c:	d113      	bne.n	800b6a6 <__gethex+0x2ee>
 800b67e:	2e01      	cmp	r6, #1
 800b680:	d10b      	bne.n	800b69a <__gethex+0x2e2>
 800b682:	9a04      	ldr	r2, [sp, #16]
 800b684:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b688:	6013      	str	r3, [r2, #0]
 800b68a:	2301      	movs	r3, #1
 800b68c:	6123      	str	r3, [r4, #16]
 800b68e:	f8c9 3000 	str.w	r3, [r9]
 800b692:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b694:	2762      	movs	r7, #98	; 0x62
 800b696:	601c      	str	r4, [r3, #0]
 800b698:	e723      	b.n	800b4e2 <__gethex+0x12a>
 800b69a:	1e71      	subs	r1, r6, #1
 800b69c:	4620      	mov	r0, r4
 800b69e:	f000 fe4b 	bl	800c338 <__any_on>
 800b6a2:	2800      	cmp	r0, #0
 800b6a4:	d1ed      	bne.n	800b682 <__gethex+0x2ca>
 800b6a6:	ee18 0a10 	vmov	r0, s16
 800b6aa:	4621      	mov	r1, r4
 800b6ac:	f000 f9ea 	bl	800ba84 <_Bfree>
 800b6b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	6013      	str	r3, [r2, #0]
 800b6b6:	2750      	movs	r7, #80	; 0x50
 800b6b8:	e713      	b.n	800b4e2 <__gethex+0x12a>
 800b6ba:	bf00      	nop
 800b6bc:	0800d790 	.word	0x0800d790
 800b6c0:	0800d714 	.word	0x0800d714
 800b6c4:	0800d725 	.word	0x0800d725
 800b6c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d1eb      	bne.n	800b6a6 <__gethex+0x2ee>
 800b6ce:	e7d8      	b.n	800b682 <__gethex+0x2ca>
 800b6d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d1d5      	bne.n	800b682 <__gethex+0x2ca>
 800b6d6:	e7e6      	b.n	800b6a6 <__gethex+0x2ee>
 800b6d8:	1e6f      	subs	r7, r5, #1
 800b6da:	f1ba 0f00 	cmp.w	sl, #0
 800b6de:	d131      	bne.n	800b744 <__gethex+0x38c>
 800b6e0:	b127      	cbz	r7, 800b6ec <__gethex+0x334>
 800b6e2:	4639      	mov	r1, r7
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f000 fe27 	bl	800c338 <__any_on>
 800b6ea:	4682      	mov	sl, r0
 800b6ec:	117b      	asrs	r3, r7, #5
 800b6ee:	2101      	movs	r1, #1
 800b6f0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b6f4:	f007 071f 	and.w	r7, r7, #31
 800b6f8:	fa01 f707 	lsl.w	r7, r1, r7
 800b6fc:	421f      	tst	r7, r3
 800b6fe:	4629      	mov	r1, r5
 800b700:	4620      	mov	r0, r4
 800b702:	bf18      	it	ne
 800b704:	f04a 0a02 	orrne.w	sl, sl, #2
 800b708:	1b76      	subs	r6, r6, r5
 800b70a:	f7ff fded 	bl	800b2e8 <rshift>
 800b70e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b712:	2702      	movs	r7, #2
 800b714:	f1ba 0f00 	cmp.w	sl, #0
 800b718:	d048      	beq.n	800b7ac <__gethex+0x3f4>
 800b71a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b71e:	2b02      	cmp	r3, #2
 800b720:	d015      	beq.n	800b74e <__gethex+0x396>
 800b722:	2b03      	cmp	r3, #3
 800b724:	d017      	beq.n	800b756 <__gethex+0x39e>
 800b726:	2b01      	cmp	r3, #1
 800b728:	d109      	bne.n	800b73e <__gethex+0x386>
 800b72a:	f01a 0f02 	tst.w	sl, #2
 800b72e:	d006      	beq.n	800b73e <__gethex+0x386>
 800b730:	f8d9 0000 	ldr.w	r0, [r9]
 800b734:	ea4a 0a00 	orr.w	sl, sl, r0
 800b738:	f01a 0f01 	tst.w	sl, #1
 800b73c:	d10e      	bne.n	800b75c <__gethex+0x3a4>
 800b73e:	f047 0710 	orr.w	r7, r7, #16
 800b742:	e033      	b.n	800b7ac <__gethex+0x3f4>
 800b744:	f04f 0a01 	mov.w	sl, #1
 800b748:	e7d0      	b.n	800b6ec <__gethex+0x334>
 800b74a:	2701      	movs	r7, #1
 800b74c:	e7e2      	b.n	800b714 <__gethex+0x35c>
 800b74e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b750:	f1c3 0301 	rsb	r3, r3, #1
 800b754:	9315      	str	r3, [sp, #84]	; 0x54
 800b756:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d0f0      	beq.n	800b73e <__gethex+0x386>
 800b75c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b760:	f104 0314 	add.w	r3, r4, #20
 800b764:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b768:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b76c:	f04f 0c00 	mov.w	ip, #0
 800b770:	4618      	mov	r0, r3
 800b772:	f853 2b04 	ldr.w	r2, [r3], #4
 800b776:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b77a:	d01c      	beq.n	800b7b6 <__gethex+0x3fe>
 800b77c:	3201      	adds	r2, #1
 800b77e:	6002      	str	r2, [r0, #0]
 800b780:	2f02      	cmp	r7, #2
 800b782:	f104 0314 	add.w	r3, r4, #20
 800b786:	d13f      	bne.n	800b808 <__gethex+0x450>
 800b788:	f8d8 2000 	ldr.w	r2, [r8]
 800b78c:	3a01      	subs	r2, #1
 800b78e:	42b2      	cmp	r2, r6
 800b790:	d10a      	bne.n	800b7a8 <__gethex+0x3f0>
 800b792:	1171      	asrs	r1, r6, #5
 800b794:	2201      	movs	r2, #1
 800b796:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b79a:	f006 061f 	and.w	r6, r6, #31
 800b79e:	fa02 f606 	lsl.w	r6, r2, r6
 800b7a2:	421e      	tst	r6, r3
 800b7a4:	bf18      	it	ne
 800b7a6:	4617      	movne	r7, r2
 800b7a8:	f047 0720 	orr.w	r7, r7, #32
 800b7ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b7ae:	601c      	str	r4, [r3, #0]
 800b7b0:	9b04      	ldr	r3, [sp, #16]
 800b7b2:	601d      	str	r5, [r3, #0]
 800b7b4:	e695      	b.n	800b4e2 <__gethex+0x12a>
 800b7b6:	4299      	cmp	r1, r3
 800b7b8:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7bc:	d8d8      	bhi.n	800b770 <__gethex+0x3b8>
 800b7be:	68a3      	ldr	r3, [r4, #8]
 800b7c0:	459b      	cmp	fp, r3
 800b7c2:	db19      	blt.n	800b7f8 <__gethex+0x440>
 800b7c4:	6861      	ldr	r1, [r4, #4]
 800b7c6:	ee18 0a10 	vmov	r0, s16
 800b7ca:	3101      	adds	r1, #1
 800b7cc:	f000 f91a 	bl	800ba04 <_Balloc>
 800b7d0:	4681      	mov	r9, r0
 800b7d2:	b918      	cbnz	r0, 800b7dc <__gethex+0x424>
 800b7d4:	4b1a      	ldr	r3, [pc, #104]	; (800b840 <__gethex+0x488>)
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	2184      	movs	r1, #132	; 0x84
 800b7da:	e6a8      	b.n	800b52e <__gethex+0x176>
 800b7dc:	6922      	ldr	r2, [r4, #16]
 800b7de:	3202      	adds	r2, #2
 800b7e0:	f104 010c 	add.w	r1, r4, #12
 800b7e4:	0092      	lsls	r2, r2, #2
 800b7e6:	300c      	adds	r0, #12
 800b7e8:	f7fd f99a 	bl	8008b20 <memcpy>
 800b7ec:	4621      	mov	r1, r4
 800b7ee:	ee18 0a10 	vmov	r0, s16
 800b7f2:	f000 f947 	bl	800ba84 <_Bfree>
 800b7f6:	464c      	mov	r4, r9
 800b7f8:	6923      	ldr	r3, [r4, #16]
 800b7fa:	1c5a      	adds	r2, r3, #1
 800b7fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b800:	6122      	str	r2, [r4, #16]
 800b802:	2201      	movs	r2, #1
 800b804:	615a      	str	r2, [r3, #20]
 800b806:	e7bb      	b.n	800b780 <__gethex+0x3c8>
 800b808:	6922      	ldr	r2, [r4, #16]
 800b80a:	455a      	cmp	r2, fp
 800b80c:	dd0b      	ble.n	800b826 <__gethex+0x46e>
 800b80e:	2101      	movs	r1, #1
 800b810:	4620      	mov	r0, r4
 800b812:	f7ff fd69 	bl	800b2e8 <rshift>
 800b816:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b81a:	3501      	adds	r5, #1
 800b81c:	42ab      	cmp	r3, r5
 800b81e:	f6ff aed0 	blt.w	800b5c2 <__gethex+0x20a>
 800b822:	2701      	movs	r7, #1
 800b824:	e7c0      	b.n	800b7a8 <__gethex+0x3f0>
 800b826:	f016 061f 	ands.w	r6, r6, #31
 800b82a:	d0fa      	beq.n	800b822 <__gethex+0x46a>
 800b82c:	449a      	add	sl, r3
 800b82e:	f1c6 0620 	rsb	r6, r6, #32
 800b832:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b836:	f000 f9db 	bl	800bbf0 <__hi0bits>
 800b83a:	42b0      	cmp	r0, r6
 800b83c:	dbe7      	blt.n	800b80e <__gethex+0x456>
 800b83e:	e7f0      	b.n	800b822 <__gethex+0x46a>
 800b840:	0800d714 	.word	0x0800d714

0800b844 <L_shift>:
 800b844:	f1c2 0208 	rsb	r2, r2, #8
 800b848:	0092      	lsls	r2, r2, #2
 800b84a:	b570      	push	{r4, r5, r6, lr}
 800b84c:	f1c2 0620 	rsb	r6, r2, #32
 800b850:	6843      	ldr	r3, [r0, #4]
 800b852:	6804      	ldr	r4, [r0, #0]
 800b854:	fa03 f506 	lsl.w	r5, r3, r6
 800b858:	432c      	orrs	r4, r5
 800b85a:	40d3      	lsrs	r3, r2
 800b85c:	6004      	str	r4, [r0, #0]
 800b85e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b862:	4288      	cmp	r0, r1
 800b864:	d3f4      	bcc.n	800b850 <L_shift+0xc>
 800b866:	bd70      	pop	{r4, r5, r6, pc}

0800b868 <__match>:
 800b868:	b530      	push	{r4, r5, lr}
 800b86a:	6803      	ldr	r3, [r0, #0]
 800b86c:	3301      	adds	r3, #1
 800b86e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b872:	b914      	cbnz	r4, 800b87a <__match+0x12>
 800b874:	6003      	str	r3, [r0, #0]
 800b876:	2001      	movs	r0, #1
 800b878:	bd30      	pop	{r4, r5, pc}
 800b87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b87e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b882:	2d19      	cmp	r5, #25
 800b884:	bf98      	it	ls
 800b886:	3220      	addls	r2, #32
 800b888:	42a2      	cmp	r2, r4
 800b88a:	d0f0      	beq.n	800b86e <__match+0x6>
 800b88c:	2000      	movs	r0, #0
 800b88e:	e7f3      	b.n	800b878 <__match+0x10>

0800b890 <__hexnan>:
 800b890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b894:	680b      	ldr	r3, [r1, #0]
 800b896:	6801      	ldr	r1, [r0, #0]
 800b898:	115e      	asrs	r6, r3, #5
 800b89a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b89e:	f013 031f 	ands.w	r3, r3, #31
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	bf18      	it	ne
 800b8a6:	3604      	addne	r6, #4
 800b8a8:	2500      	movs	r5, #0
 800b8aa:	1f37      	subs	r7, r6, #4
 800b8ac:	4682      	mov	sl, r0
 800b8ae:	4690      	mov	r8, r2
 800b8b0:	9301      	str	r3, [sp, #4]
 800b8b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8b6:	46b9      	mov	r9, r7
 800b8b8:	463c      	mov	r4, r7
 800b8ba:	9502      	str	r5, [sp, #8]
 800b8bc:	46ab      	mov	fp, r5
 800b8be:	784a      	ldrb	r2, [r1, #1]
 800b8c0:	1c4b      	adds	r3, r1, #1
 800b8c2:	9303      	str	r3, [sp, #12]
 800b8c4:	b342      	cbz	r2, 800b918 <__hexnan+0x88>
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	9105      	str	r1, [sp, #20]
 800b8ca:	9204      	str	r2, [sp, #16]
 800b8cc:	f7ff fd5e 	bl	800b38c <__hexdig_fun>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d14f      	bne.n	800b974 <__hexnan+0xe4>
 800b8d4:	9a04      	ldr	r2, [sp, #16]
 800b8d6:	9905      	ldr	r1, [sp, #20]
 800b8d8:	2a20      	cmp	r2, #32
 800b8da:	d818      	bhi.n	800b90e <__hexnan+0x7e>
 800b8dc:	9b02      	ldr	r3, [sp, #8]
 800b8de:	459b      	cmp	fp, r3
 800b8e0:	dd13      	ble.n	800b90a <__hexnan+0x7a>
 800b8e2:	454c      	cmp	r4, r9
 800b8e4:	d206      	bcs.n	800b8f4 <__hexnan+0x64>
 800b8e6:	2d07      	cmp	r5, #7
 800b8e8:	dc04      	bgt.n	800b8f4 <__hexnan+0x64>
 800b8ea:	462a      	mov	r2, r5
 800b8ec:	4649      	mov	r1, r9
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f7ff ffa8 	bl	800b844 <L_shift>
 800b8f4:	4544      	cmp	r4, r8
 800b8f6:	d950      	bls.n	800b99a <__hexnan+0x10a>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f1a4 0904 	sub.w	r9, r4, #4
 800b8fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800b902:	f8cd b008 	str.w	fp, [sp, #8]
 800b906:	464c      	mov	r4, r9
 800b908:	461d      	mov	r5, r3
 800b90a:	9903      	ldr	r1, [sp, #12]
 800b90c:	e7d7      	b.n	800b8be <__hexnan+0x2e>
 800b90e:	2a29      	cmp	r2, #41	; 0x29
 800b910:	d156      	bne.n	800b9c0 <__hexnan+0x130>
 800b912:	3102      	adds	r1, #2
 800b914:	f8ca 1000 	str.w	r1, [sl]
 800b918:	f1bb 0f00 	cmp.w	fp, #0
 800b91c:	d050      	beq.n	800b9c0 <__hexnan+0x130>
 800b91e:	454c      	cmp	r4, r9
 800b920:	d206      	bcs.n	800b930 <__hexnan+0xa0>
 800b922:	2d07      	cmp	r5, #7
 800b924:	dc04      	bgt.n	800b930 <__hexnan+0xa0>
 800b926:	462a      	mov	r2, r5
 800b928:	4649      	mov	r1, r9
 800b92a:	4620      	mov	r0, r4
 800b92c:	f7ff ff8a 	bl	800b844 <L_shift>
 800b930:	4544      	cmp	r4, r8
 800b932:	d934      	bls.n	800b99e <__hexnan+0x10e>
 800b934:	f1a8 0204 	sub.w	r2, r8, #4
 800b938:	4623      	mov	r3, r4
 800b93a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b93e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b942:	429f      	cmp	r7, r3
 800b944:	d2f9      	bcs.n	800b93a <__hexnan+0xaa>
 800b946:	1b3b      	subs	r3, r7, r4
 800b948:	f023 0303 	bic.w	r3, r3, #3
 800b94c:	3304      	adds	r3, #4
 800b94e:	3401      	adds	r4, #1
 800b950:	3e03      	subs	r6, #3
 800b952:	42b4      	cmp	r4, r6
 800b954:	bf88      	it	hi
 800b956:	2304      	movhi	r3, #4
 800b958:	4443      	add	r3, r8
 800b95a:	2200      	movs	r2, #0
 800b95c:	f843 2b04 	str.w	r2, [r3], #4
 800b960:	429f      	cmp	r7, r3
 800b962:	d2fb      	bcs.n	800b95c <__hexnan+0xcc>
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	b91b      	cbnz	r3, 800b970 <__hexnan+0xe0>
 800b968:	4547      	cmp	r7, r8
 800b96a:	d127      	bne.n	800b9bc <__hexnan+0x12c>
 800b96c:	2301      	movs	r3, #1
 800b96e:	603b      	str	r3, [r7, #0]
 800b970:	2005      	movs	r0, #5
 800b972:	e026      	b.n	800b9c2 <__hexnan+0x132>
 800b974:	3501      	adds	r5, #1
 800b976:	2d08      	cmp	r5, #8
 800b978:	f10b 0b01 	add.w	fp, fp, #1
 800b97c:	dd06      	ble.n	800b98c <__hexnan+0xfc>
 800b97e:	4544      	cmp	r4, r8
 800b980:	d9c3      	bls.n	800b90a <__hexnan+0x7a>
 800b982:	2300      	movs	r3, #0
 800b984:	f844 3c04 	str.w	r3, [r4, #-4]
 800b988:	2501      	movs	r5, #1
 800b98a:	3c04      	subs	r4, #4
 800b98c:	6822      	ldr	r2, [r4, #0]
 800b98e:	f000 000f 	and.w	r0, r0, #15
 800b992:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b996:	6022      	str	r2, [r4, #0]
 800b998:	e7b7      	b.n	800b90a <__hexnan+0x7a>
 800b99a:	2508      	movs	r5, #8
 800b99c:	e7b5      	b.n	800b90a <__hexnan+0x7a>
 800b99e:	9b01      	ldr	r3, [sp, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d0df      	beq.n	800b964 <__hexnan+0xd4>
 800b9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a8:	f1c3 0320 	rsb	r3, r3, #32
 800b9ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b9b0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b9b4:	401a      	ands	r2, r3
 800b9b6:	f846 2c04 	str.w	r2, [r6, #-4]
 800b9ba:	e7d3      	b.n	800b964 <__hexnan+0xd4>
 800b9bc:	3f04      	subs	r7, #4
 800b9be:	e7d1      	b.n	800b964 <__hexnan+0xd4>
 800b9c0:	2004      	movs	r0, #4
 800b9c2:	b007      	add	sp, #28
 800b9c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b9c8 <_localeconv_r>:
 800b9c8:	4800      	ldr	r0, [pc, #0]	; (800b9cc <_localeconv_r+0x4>)
 800b9ca:	4770      	bx	lr
 800b9cc:	20000168 	.word	0x20000168

0800b9d0 <malloc>:
 800b9d0:	4b02      	ldr	r3, [pc, #8]	; (800b9dc <malloc+0xc>)
 800b9d2:	4601      	mov	r1, r0
 800b9d4:	6818      	ldr	r0, [r3, #0]
 800b9d6:	f000 bd2f 	b.w	800c438 <_malloc_r>
 800b9da:	bf00      	nop
 800b9dc:	20000010 	.word	0x20000010

0800b9e0 <__ascii_mbtowc>:
 800b9e0:	b082      	sub	sp, #8
 800b9e2:	b901      	cbnz	r1, 800b9e6 <__ascii_mbtowc+0x6>
 800b9e4:	a901      	add	r1, sp, #4
 800b9e6:	b142      	cbz	r2, 800b9fa <__ascii_mbtowc+0x1a>
 800b9e8:	b14b      	cbz	r3, 800b9fe <__ascii_mbtowc+0x1e>
 800b9ea:	7813      	ldrb	r3, [r2, #0]
 800b9ec:	600b      	str	r3, [r1, #0]
 800b9ee:	7812      	ldrb	r2, [r2, #0]
 800b9f0:	1e10      	subs	r0, r2, #0
 800b9f2:	bf18      	it	ne
 800b9f4:	2001      	movne	r0, #1
 800b9f6:	b002      	add	sp, #8
 800b9f8:	4770      	bx	lr
 800b9fa:	4610      	mov	r0, r2
 800b9fc:	e7fb      	b.n	800b9f6 <__ascii_mbtowc+0x16>
 800b9fe:	f06f 0001 	mvn.w	r0, #1
 800ba02:	e7f8      	b.n	800b9f6 <__ascii_mbtowc+0x16>

0800ba04 <_Balloc>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba08:	4604      	mov	r4, r0
 800ba0a:	460d      	mov	r5, r1
 800ba0c:	b976      	cbnz	r6, 800ba2c <_Balloc+0x28>
 800ba0e:	2010      	movs	r0, #16
 800ba10:	f7ff ffde 	bl	800b9d0 <malloc>
 800ba14:	4602      	mov	r2, r0
 800ba16:	6260      	str	r0, [r4, #36]	; 0x24
 800ba18:	b920      	cbnz	r0, 800ba24 <_Balloc+0x20>
 800ba1a:	4b18      	ldr	r3, [pc, #96]	; (800ba7c <_Balloc+0x78>)
 800ba1c:	4818      	ldr	r0, [pc, #96]	; (800ba80 <_Balloc+0x7c>)
 800ba1e:	2166      	movs	r1, #102	; 0x66
 800ba20:	f000 fefa 	bl	800c818 <__assert_func>
 800ba24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba28:	6006      	str	r6, [r0, #0]
 800ba2a:	60c6      	str	r6, [r0, #12]
 800ba2c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba2e:	68f3      	ldr	r3, [r6, #12]
 800ba30:	b183      	cbz	r3, 800ba54 <_Balloc+0x50>
 800ba32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba34:	68db      	ldr	r3, [r3, #12]
 800ba36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba3a:	b9b8      	cbnz	r0, 800ba6c <_Balloc+0x68>
 800ba3c:	2101      	movs	r1, #1
 800ba3e:	fa01 f605 	lsl.w	r6, r1, r5
 800ba42:	1d72      	adds	r2, r6, #5
 800ba44:	0092      	lsls	r2, r2, #2
 800ba46:	4620      	mov	r0, r4
 800ba48:	f000 fc97 	bl	800c37a <_calloc_r>
 800ba4c:	b160      	cbz	r0, 800ba68 <_Balloc+0x64>
 800ba4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba52:	e00e      	b.n	800ba72 <_Balloc+0x6e>
 800ba54:	2221      	movs	r2, #33	; 0x21
 800ba56:	2104      	movs	r1, #4
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f000 fc8e 	bl	800c37a <_calloc_r>
 800ba5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba60:	60f0      	str	r0, [r6, #12]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1e4      	bne.n	800ba32 <_Balloc+0x2e>
 800ba68:	2000      	movs	r0, #0
 800ba6a:	bd70      	pop	{r4, r5, r6, pc}
 800ba6c:	6802      	ldr	r2, [r0, #0]
 800ba6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba72:	2300      	movs	r3, #0
 800ba74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba78:	e7f7      	b.n	800ba6a <_Balloc+0x66>
 800ba7a:	bf00      	nop
 800ba7c:	0800d69e 	.word	0x0800d69e
 800ba80:	0800d7a4 	.word	0x0800d7a4

0800ba84 <_Bfree>:
 800ba84:	b570      	push	{r4, r5, r6, lr}
 800ba86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba88:	4605      	mov	r5, r0
 800ba8a:	460c      	mov	r4, r1
 800ba8c:	b976      	cbnz	r6, 800baac <_Bfree+0x28>
 800ba8e:	2010      	movs	r0, #16
 800ba90:	f7ff ff9e 	bl	800b9d0 <malloc>
 800ba94:	4602      	mov	r2, r0
 800ba96:	6268      	str	r0, [r5, #36]	; 0x24
 800ba98:	b920      	cbnz	r0, 800baa4 <_Bfree+0x20>
 800ba9a:	4b09      	ldr	r3, [pc, #36]	; (800bac0 <_Bfree+0x3c>)
 800ba9c:	4809      	ldr	r0, [pc, #36]	; (800bac4 <_Bfree+0x40>)
 800ba9e:	218a      	movs	r1, #138	; 0x8a
 800baa0:	f000 feba 	bl	800c818 <__assert_func>
 800baa4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800baa8:	6006      	str	r6, [r0, #0]
 800baaa:	60c6      	str	r6, [r0, #12]
 800baac:	b13c      	cbz	r4, 800babe <_Bfree+0x3a>
 800baae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bab0:	6862      	ldr	r2, [r4, #4]
 800bab2:	68db      	ldr	r3, [r3, #12]
 800bab4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bab8:	6021      	str	r1, [r4, #0]
 800baba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800babe:	bd70      	pop	{r4, r5, r6, pc}
 800bac0:	0800d69e 	.word	0x0800d69e
 800bac4:	0800d7a4 	.word	0x0800d7a4

0800bac8 <__multadd>:
 800bac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bacc:	690e      	ldr	r6, [r1, #16]
 800bace:	4607      	mov	r7, r0
 800bad0:	4698      	mov	r8, r3
 800bad2:	460c      	mov	r4, r1
 800bad4:	f101 0014 	add.w	r0, r1, #20
 800bad8:	2300      	movs	r3, #0
 800bada:	6805      	ldr	r5, [r0, #0]
 800badc:	b2a9      	uxth	r1, r5
 800bade:	fb02 8101 	mla	r1, r2, r1, r8
 800bae2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bae6:	0c2d      	lsrs	r5, r5, #16
 800bae8:	fb02 c505 	mla	r5, r2, r5, ip
 800baec:	b289      	uxth	r1, r1
 800baee:	3301      	adds	r3, #1
 800baf0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800baf4:	429e      	cmp	r6, r3
 800baf6:	f840 1b04 	str.w	r1, [r0], #4
 800bafa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bafe:	dcec      	bgt.n	800bada <__multadd+0x12>
 800bb00:	f1b8 0f00 	cmp.w	r8, #0
 800bb04:	d022      	beq.n	800bb4c <__multadd+0x84>
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	42b3      	cmp	r3, r6
 800bb0a:	dc19      	bgt.n	800bb40 <__multadd+0x78>
 800bb0c:	6861      	ldr	r1, [r4, #4]
 800bb0e:	4638      	mov	r0, r7
 800bb10:	3101      	adds	r1, #1
 800bb12:	f7ff ff77 	bl	800ba04 <_Balloc>
 800bb16:	4605      	mov	r5, r0
 800bb18:	b928      	cbnz	r0, 800bb26 <__multadd+0x5e>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	4b0d      	ldr	r3, [pc, #52]	; (800bb54 <__multadd+0x8c>)
 800bb1e:	480e      	ldr	r0, [pc, #56]	; (800bb58 <__multadd+0x90>)
 800bb20:	21b5      	movs	r1, #181	; 0xb5
 800bb22:	f000 fe79 	bl	800c818 <__assert_func>
 800bb26:	6922      	ldr	r2, [r4, #16]
 800bb28:	3202      	adds	r2, #2
 800bb2a:	f104 010c 	add.w	r1, r4, #12
 800bb2e:	0092      	lsls	r2, r2, #2
 800bb30:	300c      	adds	r0, #12
 800bb32:	f7fc fff5 	bl	8008b20 <memcpy>
 800bb36:	4621      	mov	r1, r4
 800bb38:	4638      	mov	r0, r7
 800bb3a:	f7ff ffa3 	bl	800ba84 <_Bfree>
 800bb3e:	462c      	mov	r4, r5
 800bb40:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bb44:	3601      	adds	r6, #1
 800bb46:	f8c3 8014 	str.w	r8, [r3, #20]
 800bb4a:	6126      	str	r6, [r4, #16]
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb52:	bf00      	nop
 800bb54:	0800d714 	.word	0x0800d714
 800bb58:	0800d7a4 	.word	0x0800d7a4

0800bb5c <__s2b>:
 800bb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb60:	460c      	mov	r4, r1
 800bb62:	4615      	mov	r5, r2
 800bb64:	461f      	mov	r7, r3
 800bb66:	2209      	movs	r2, #9
 800bb68:	3308      	adds	r3, #8
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb70:	2100      	movs	r1, #0
 800bb72:	2201      	movs	r2, #1
 800bb74:	429a      	cmp	r2, r3
 800bb76:	db09      	blt.n	800bb8c <__s2b+0x30>
 800bb78:	4630      	mov	r0, r6
 800bb7a:	f7ff ff43 	bl	800ba04 <_Balloc>
 800bb7e:	b940      	cbnz	r0, 800bb92 <__s2b+0x36>
 800bb80:	4602      	mov	r2, r0
 800bb82:	4b19      	ldr	r3, [pc, #100]	; (800bbe8 <__s2b+0x8c>)
 800bb84:	4819      	ldr	r0, [pc, #100]	; (800bbec <__s2b+0x90>)
 800bb86:	21ce      	movs	r1, #206	; 0xce
 800bb88:	f000 fe46 	bl	800c818 <__assert_func>
 800bb8c:	0052      	lsls	r2, r2, #1
 800bb8e:	3101      	adds	r1, #1
 800bb90:	e7f0      	b.n	800bb74 <__s2b+0x18>
 800bb92:	9b08      	ldr	r3, [sp, #32]
 800bb94:	6143      	str	r3, [r0, #20]
 800bb96:	2d09      	cmp	r5, #9
 800bb98:	f04f 0301 	mov.w	r3, #1
 800bb9c:	6103      	str	r3, [r0, #16]
 800bb9e:	dd16      	ble.n	800bbce <__s2b+0x72>
 800bba0:	f104 0909 	add.w	r9, r4, #9
 800bba4:	46c8      	mov	r8, r9
 800bba6:	442c      	add	r4, r5
 800bba8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bbac:	4601      	mov	r1, r0
 800bbae:	3b30      	subs	r3, #48	; 0x30
 800bbb0:	220a      	movs	r2, #10
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	f7ff ff88 	bl	800bac8 <__multadd>
 800bbb8:	45a0      	cmp	r8, r4
 800bbba:	d1f5      	bne.n	800bba8 <__s2b+0x4c>
 800bbbc:	f1a5 0408 	sub.w	r4, r5, #8
 800bbc0:	444c      	add	r4, r9
 800bbc2:	1b2d      	subs	r5, r5, r4
 800bbc4:	1963      	adds	r3, r4, r5
 800bbc6:	42bb      	cmp	r3, r7
 800bbc8:	db04      	blt.n	800bbd4 <__s2b+0x78>
 800bbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbce:	340a      	adds	r4, #10
 800bbd0:	2509      	movs	r5, #9
 800bbd2:	e7f6      	b.n	800bbc2 <__s2b+0x66>
 800bbd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbd8:	4601      	mov	r1, r0
 800bbda:	3b30      	subs	r3, #48	; 0x30
 800bbdc:	220a      	movs	r2, #10
 800bbde:	4630      	mov	r0, r6
 800bbe0:	f7ff ff72 	bl	800bac8 <__multadd>
 800bbe4:	e7ee      	b.n	800bbc4 <__s2b+0x68>
 800bbe6:	bf00      	nop
 800bbe8:	0800d714 	.word	0x0800d714
 800bbec:	0800d7a4 	.word	0x0800d7a4

0800bbf0 <__hi0bits>:
 800bbf0:	0c03      	lsrs	r3, r0, #16
 800bbf2:	041b      	lsls	r3, r3, #16
 800bbf4:	b9d3      	cbnz	r3, 800bc2c <__hi0bits+0x3c>
 800bbf6:	0400      	lsls	r0, r0, #16
 800bbf8:	2310      	movs	r3, #16
 800bbfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbfe:	bf04      	itt	eq
 800bc00:	0200      	lsleq	r0, r0, #8
 800bc02:	3308      	addeq	r3, #8
 800bc04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc08:	bf04      	itt	eq
 800bc0a:	0100      	lsleq	r0, r0, #4
 800bc0c:	3304      	addeq	r3, #4
 800bc0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc12:	bf04      	itt	eq
 800bc14:	0080      	lsleq	r0, r0, #2
 800bc16:	3302      	addeq	r3, #2
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	db05      	blt.n	800bc28 <__hi0bits+0x38>
 800bc1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc20:	f103 0301 	add.w	r3, r3, #1
 800bc24:	bf08      	it	eq
 800bc26:	2320      	moveq	r3, #32
 800bc28:	4618      	mov	r0, r3
 800bc2a:	4770      	bx	lr
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	e7e4      	b.n	800bbfa <__hi0bits+0xa>

0800bc30 <__lo0bits>:
 800bc30:	6803      	ldr	r3, [r0, #0]
 800bc32:	f013 0207 	ands.w	r2, r3, #7
 800bc36:	4601      	mov	r1, r0
 800bc38:	d00b      	beq.n	800bc52 <__lo0bits+0x22>
 800bc3a:	07da      	lsls	r2, r3, #31
 800bc3c:	d424      	bmi.n	800bc88 <__lo0bits+0x58>
 800bc3e:	0798      	lsls	r0, r3, #30
 800bc40:	bf49      	itett	mi
 800bc42:	085b      	lsrmi	r3, r3, #1
 800bc44:	089b      	lsrpl	r3, r3, #2
 800bc46:	2001      	movmi	r0, #1
 800bc48:	600b      	strmi	r3, [r1, #0]
 800bc4a:	bf5c      	itt	pl
 800bc4c:	600b      	strpl	r3, [r1, #0]
 800bc4e:	2002      	movpl	r0, #2
 800bc50:	4770      	bx	lr
 800bc52:	b298      	uxth	r0, r3
 800bc54:	b9b0      	cbnz	r0, 800bc84 <__lo0bits+0x54>
 800bc56:	0c1b      	lsrs	r3, r3, #16
 800bc58:	2010      	movs	r0, #16
 800bc5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bc5e:	bf04      	itt	eq
 800bc60:	0a1b      	lsreq	r3, r3, #8
 800bc62:	3008      	addeq	r0, #8
 800bc64:	071a      	lsls	r2, r3, #28
 800bc66:	bf04      	itt	eq
 800bc68:	091b      	lsreq	r3, r3, #4
 800bc6a:	3004      	addeq	r0, #4
 800bc6c:	079a      	lsls	r2, r3, #30
 800bc6e:	bf04      	itt	eq
 800bc70:	089b      	lsreq	r3, r3, #2
 800bc72:	3002      	addeq	r0, #2
 800bc74:	07da      	lsls	r2, r3, #31
 800bc76:	d403      	bmi.n	800bc80 <__lo0bits+0x50>
 800bc78:	085b      	lsrs	r3, r3, #1
 800bc7a:	f100 0001 	add.w	r0, r0, #1
 800bc7e:	d005      	beq.n	800bc8c <__lo0bits+0x5c>
 800bc80:	600b      	str	r3, [r1, #0]
 800bc82:	4770      	bx	lr
 800bc84:	4610      	mov	r0, r2
 800bc86:	e7e8      	b.n	800bc5a <__lo0bits+0x2a>
 800bc88:	2000      	movs	r0, #0
 800bc8a:	4770      	bx	lr
 800bc8c:	2020      	movs	r0, #32
 800bc8e:	4770      	bx	lr

0800bc90 <__i2b>:
 800bc90:	b510      	push	{r4, lr}
 800bc92:	460c      	mov	r4, r1
 800bc94:	2101      	movs	r1, #1
 800bc96:	f7ff feb5 	bl	800ba04 <_Balloc>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	b928      	cbnz	r0, 800bcaa <__i2b+0x1a>
 800bc9e:	4b05      	ldr	r3, [pc, #20]	; (800bcb4 <__i2b+0x24>)
 800bca0:	4805      	ldr	r0, [pc, #20]	; (800bcb8 <__i2b+0x28>)
 800bca2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bca6:	f000 fdb7 	bl	800c818 <__assert_func>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	6144      	str	r4, [r0, #20]
 800bcae:	6103      	str	r3, [r0, #16]
 800bcb0:	bd10      	pop	{r4, pc}
 800bcb2:	bf00      	nop
 800bcb4:	0800d714 	.word	0x0800d714
 800bcb8:	0800d7a4 	.word	0x0800d7a4

0800bcbc <__multiply>:
 800bcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	4614      	mov	r4, r2
 800bcc2:	690a      	ldr	r2, [r1, #16]
 800bcc4:	6923      	ldr	r3, [r4, #16]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	bfb8      	it	lt
 800bcca:	460b      	movlt	r3, r1
 800bccc:	460d      	mov	r5, r1
 800bcce:	bfbc      	itt	lt
 800bcd0:	4625      	movlt	r5, r4
 800bcd2:	461c      	movlt	r4, r3
 800bcd4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bcd8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bcdc:	68ab      	ldr	r3, [r5, #8]
 800bcde:	6869      	ldr	r1, [r5, #4]
 800bce0:	eb0a 0709 	add.w	r7, sl, r9
 800bce4:	42bb      	cmp	r3, r7
 800bce6:	b085      	sub	sp, #20
 800bce8:	bfb8      	it	lt
 800bcea:	3101      	addlt	r1, #1
 800bcec:	f7ff fe8a 	bl	800ba04 <_Balloc>
 800bcf0:	b930      	cbnz	r0, 800bd00 <__multiply+0x44>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	4b42      	ldr	r3, [pc, #264]	; (800be00 <__multiply+0x144>)
 800bcf6:	4843      	ldr	r0, [pc, #268]	; (800be04 <__multiply+0x148>)
 800bcf8:	f240 115d 	movw	r1, #349	; 0x15d
 800bcfc:	f000 fd8c 	bl	800c818 <__assert_func>
 800bd00:	f100 0614 	add.w	r6, r0, #20
 800bd04:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bd08:	4633      	mov	r3, r6
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	4543      	cmp	r3, r8
 800bd0e:	d31e      	bcc.n	800bd4e <__multiply+0x92>
 800bd10:	f105 0c14 	add.w	ip, r5, #20
 800bd14:	f104 0314 	add.w	r3, r4, #20
 800bd18:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bd1c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bd20:	9202      	str	r2, [sp, #8]
 800bd22:	ebac 0205 	sub.w	r2, ip, r5
 800bd26:	3a15      	subs	r2, #21
 800bd28:	f022 0203 	bic.w	r2, r2, #3
 800bd2c:	3204      	adds	r2, #4
 800bd2e:	f105 0115 	add.w	r1, r5, #21
 800bd32:	458c      	cmp	ip, r1
 800bd34:	bf38      	it	cc
 800bd36:	2204      	movcc	r2, #4
 800bd38:	9201      	str	r2, [sp, #4]
 800bd3a:	9a02      	ldr	r2, [sp, #8]
 800bd3c:	9303      	str	r3, [sp, #12]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d808      	bhi.n	800bd54 <__multiply+0x98>
 800bd42:	2f00      	cmp	r7, #0
 800bd44:	dc55      	bgt.n	800bdf2 <__multiply+0x136>
 800bd46:	6107      	str	r7, [r0, #16]
 800bd48:	b005      	add	sp, #20
 800bd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd4e:	f843 2b04 	str.w	r2, [r3], #4
 800bd52:	e7db      	b.n	800bd0c <__multiply+0x50>
 800bd54:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd58:	f1ba 0f00 	cmp.w	sl, #0
 800bd5c:	d020      	beq.n	800bda0 <__multiply+0xe4>
 800bd5e:	f105 0e14 	add.w	lr, r5, #20
 800bd62:	46b1      	mov	r9, r6
 800bd64:	2200      	movs	r2, #0
 800bd66:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bd6a:	f8d9 b000 	ldr.w	fp, [r9]
 800bd6e:	b2a1      	uxth	r1, r4
 800bd70:	fa1f fb8b 	uxth.w	fp, fp
 800bd74:	fb0a b101 	mla	r1, sl, r1, fp
 800bd78:	4411      	add	r1, r2
 800bd7a:	f8d9 2000 	ldr.w	r2, [r9]
 800bd7e:	0c24      	lsrs	r4, r4, #16
 800bd80:	0c12      	lsrs	r2, r2, #16
 800bd82:	fb0a 2404 	mla	r4, sl, r4, r2
 800bd86:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bd8a:	b289      	uxth	r1, r1
 800bd8c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bd90:	45f4      	cmp	ip, lr
 800bd92:	f849 1b04 	str.w	r1, [r9], #4
 800bd96:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bd9a:	d8e4      	bhi.n	800bd66 <__multiply+0xaa>
 800bd9c:	9901      	ldr	r1, [sp, #4]
 800bd9e:	5072      	str	r2, [r6, r1]
 800bda0:	9a03      	ldr	r2, [sp, #12]
 800bda2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bda6:	3304      	adds	r3, #4
 800bda8:	f1b9 0f00 	cmp.w	r9, #0
 800bdac:	d01f      	beq.n	800bdee <__multiply+0x132>
 800bdae:	6834      	ldr	r4, [r6, #0]
 800bdb0:	f105 0114 	add.w	r1, r5, #20
 800bdb4:	46b6      	mov	lr, r6
 800bdb6:	f04f 0a00 	mov.w	sl, #0
 800bdba:	880a      	ldrh	r2, [r1, #0]
 800bdbc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bdc0:	fb09 b202 	mla	r2, r9, r2, fp
 800bdc4:	4492      	add	sl, r2
 800bdc6:	b2a4      	uxth	r4, r4
 800bdc8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bdcc:	f84e 4b04 	str.w	r4, [lr], #4
 800bdd0:	f851 4b04 	ldr.w	r4, [r1], #4
 800bdd4:	f8be 2000 	ldrh.w	r2, [lr]
 800bdd8:	0c24      	lsrs	r4, r4, #16
 800bdda:	fb09 2404 	mla	r4, r9, r4, r2
 800bdde:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bde2:	458c      	cmp	ip, r1
 800bde4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bde8:	d8e7      	bhi.n	800bdba <__multiply+0xfe>
 800bdea:	9a01      	ldr	r2, [sp, #4]
 800bdec:	50b4      	str	r4, [r6, r2]
 800bdee:	3604      	adds	r6, #4
 800bdf0:	e7a3      	b.n	800bd3a <__multiply+0x7e>
 800bdf2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1a5      	bne.n	800bd46 <__multiply+0x8a>
 800bdfa:	3f01      	subs	r7, #1
 800bdfc:	e7a1      	b.n	800bd42 <__multiply+0x86>
 800bdfe:	bf00      	nop
 800be00:	0800d714 	.word	0x0800d714
 800be04:	0800d7a4 	.word	0x0800d7a4

0800be08 <__pow5mult>:
 800be08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be0c:	4615      	mov	r5, r2
 800be0e:	f012 0203 	ands.w	r2, r2, #3
 800be12:	4606      	mov	r6, r0
 800be14:	460f      	mov	r7, r1
 800be16:	d007      	beq.n	800be28 <__pow5mult+0x20>
 800be18:	4c25      	ldr	r4, [pc, #148]	; (800beb0 <__pow5mult+0xa8>)
 800be1a:	3a01      	subs	r2, #1
 800be1c:	2300      	movs	r3, #0
 800be1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be22:	f7ff fe51 	bl	800bac8 <__multadd>
 800be26:	4607      	mov	r7, r0
 800be28:	10ad      	asrs	r5, r5, #2
 800be2a:	d03d      	beq.n	800bea8 <__pow5mult+0xa0>
 800be2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be2e:	b97c      	cbnz	r4, 800be50 <__pow5mult+0x48>
 800be30:	2010      	movs	r0, #16
 800be32:	f7ff fdcd 	bl	800b9d0 <malloc>
 800be36:	4602      	mov	r2, r0
 800be38:	6270      	str	r0, [r6, #36]	; 0x24
 800be3a:	b928      	cbnz	r0, 800be48 <__pow5mult+0x40>
 800be3c:	4b1d      	ldr	r3, [pc, #116]	; (800beb4 <__pow5mult+0xac>)
 800be3e:	481e      	ldr	r0, [pc, #120]	; (800beb8 <__pow5mult+0xb0>)
 800be40:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be44:	f000 fce8 	bl	800c818 <__assert_func>
 800be48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be4c:	6004      	str	r4, [r0, #0]
 800be4e:	60c4      	str	r4, [r0, #12]
 800be50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be58:	b94c      	cbnz	r4, 800be6e <__pow5mult+0x66>
 800be5a:	f240 2171 	movw	r1, #625	; 0x271
 800be5e:	4630      	mov	r0, r6
 800be60:	f7ff ff16 	bl	800bc90 <__i2b>
 800be64:	2300      	movs	r3, #0
 800be66:	f8c8 0008 	str.w	r0, [r8, #8]
 800be6a:	4604      	mov	r4, r0
 800be6c:	6003      	str	r3, [r0, #0]
 800be6e:	f04f 0900 	mov.w	r9, #0
 800be72:	07eb      	lsls	r3, r5, #31
 800be74:	d50a      	bpl.n	800be8c <__pow5mult+0x84>
 800be76:	4639      	mov	r1, r7
 800be78:	4622      	mov	r2, r4
 800be7a:	4630      	mov	r0, r6
 800be7c:	f7ff ff1e 	bl	800bcbc <__multiply>
 800be80:	4639      	mov	r1, r7
 800be82:	4680      	mov	r8, r0
 800be84:	4630      	mov	r0, r6
 800be86:	f7ff fdfd 	bl	800ba84 <_Bfree>
 800be8a:	4647      	mov	r7, r8
 800be8c:	106d      	asrs	r5, r5, #1
 800be8e:	d00b      	beq.n	800bea8 <__pow5mult+0xa0>
 800be90:	6820      	ldr	r0, [r4, #0]
 800be92:	b938      	cbnz	r0, 800bea4 <__pow5mult+0x9c>
 800be94:	4622      	mov	r2, r4
 800be96:	4621      	mov	r1, r4
 800be98:	4630      	mov	r0, r6
 800be9a:	f7ff ff0f 	bl	800bcbc <__multiply>
 800be9e:	6020      	str	r0, [r4, #0]
 800bea0:	f8c0 9000 	str.w	r9, [r0]
 800bea4:	4604      	mov	r4, r0
 800bea6:	e7e4      	b.n	800be72 <__pow5mult+0x6a>
 800bea8:	4638      	mov	r0, r7
 800beaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beae:	bf00      	nop
 800beb0:	0800d8f8 	.word	0x0800d8f8
 800beb4:	0800d69e 	.word	0x0800d69e
 800beb8:	0800d7a4 	.word	0x0800d7a4

0800bebc <__lshift>:
 800bebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bec0:	460c      	mov	r4, r1
 800bec2:	6849      	ldr	r1, [r1, #4]
 800bec4:	6923      	ldr	r3, [r4, #16]
 800bec6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800beca:	68a3      	ldr	r3, [r4, #8]
 800becc:	4607      	mov	r7, r0
 800bece:	4691      	mov	r9, r2
 800bed0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bed4:	f108 0601 	add.w	r6, r8, #1
 800bed8:	42b3      	cmp	r3, r6
 800beda:	db0b      	blt.n	800bef4 <__lshift+0x38>
 800bedc:	4638      	mov	r0, r7
 800bede:	f7ff fd91 	bl	800ba04 <_Balloc>
 800bee2:	4605      	mov	r5, r0
 800bee4:	b948      	cbnz	r0, 800befa <__lshift+0x3e>
 800bee6:	4602      	mov	r2, r0
 800bee8:	4b28      	ldr	r3, [pc, #160]	; (800bf8c <__lshift+0xd0>)
 800beea:	4829      	ldr	r0, [pc, #164]	; (800bf90 <__lshift+0xd4>)
 800beec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bef0:	f000 fc92 	bl	800c818 <__assert_func>
 800bef4:	3101      	adds	r1, #1
 800bef6:	005b      	lsls	r3, r3, #1
 800bef8:	e7ee      	b.n	800bed8 <__lshift+0x1c>
 800befa:	2300      	movs	r3, #0
 800befc:	f100 0114 	add.w	r1, r0, #20
 800bf00:	f100 0210 	add.w	r2, r0, #16
 800bf04:	4618      	mov	r0, r3
 800bf06:	4553      	cmp	r3, sl
 800bf08:	db33      	blt.n	800bf72 <__lshift+0xb6>
 800bf0a:	6920      	ldr	r0, [r4, #16]
 800bf0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf10:	f104 0314 	add.w	r3, r4, #20
 800bf14:	f019 091f 	ands.w	r9, r9, #31
 800bf18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf20:	d02b      	beq.n	800bf7a <__lshift+0xbe>
 800bf22:	f1c9 0e20 	rsb	lr, r9, #32
 800bf26:	468a      	mov	sl, r1
 800bf28:	2200      	movs	r2, #0
 800bf2a:	6818      	ldr	r0, [r3, #0]
 800bf2c:	fa00 f009 	lsl.w	r0, r0, r9
 800bf30:	4302      	orrs	r2, r0
 800bf32:	f84a 2b04 	str.w	r2, [sl], #4
 800bf36:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf3a:	459c      	cmp	ip, r3
 800bf3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf40:	d8f3      	bhi.n	800bf2a <__lshift+0x6e>
 800bf42:	ebac 0304 	sub.w	r3, ip, r4
 800bf46:	3b15      	subs	r3, #21
 800bf48:	f023 0303 	bic.w	r3, r3, #3
 800bf4c:	3304      	adds	r3, #4
 800bf4e:	f104 0015 	add.w	r0, r4, #21
 800bf52:	4584      	cmp	ip, r0
 800bf54:	bf38      	it	cc
 800bf56:	2304      	movcc	r3, #4
 800bf58:	50ca      	str	r2, [r1, r3]
 800bf5a:	b10a      	cbz	r2, 800bf60 <__lshift+0xa4>
 800bf5c:	f108 0602 	add.w	r6, r8, #2
 800bf60:	3e01      	subs	r6, #1
 800bf62:	4638      	mov	r0, r7
 800bf64:	612e      	str	r6, [r5, #16]
 800bf66:	4621      	mov	r1, r4
 800bf68:	f7ff fd8c 	bl	800ba84 <_Bfree>
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf72:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf76:	3301      	adds	r3, #1
 800bf78:	e7c5      	b.n	800bf06 <__lshift+0x4a>
 800bf7a:	3904      	subs	r1, #4
 800bf7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf80:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf84:	459c      	cmp	ip, r3
 800bf86:	d8f9      	bhi.n	800bf7c <__lshift+0xc0>
 800bf88:	e7ea      	b.n	800bf60 <__lshift+0xa4>
 800bf8a:	bf00      	nop
 800bf8c:	0800d714 	.word	0x0800d714
 800bf90:	0800d7a4 	.word	0x0800d7a4

0800bf94 <__mcmp>:
 800bf94:	b530      	push	{r4, r5, lr}
 800bf96:	6902      	ldr	r2, [r0, #16]
 800bf98:	690c      	ldr	r4, [r1, #16]
 800bf9a:	1b12      	subs	r2, r2, r4
 800bf9c:	d10e      	bne.n	800bfbc <__mcmp+0x28>
 800bf9e:	f100 0314 	add.w	r3, r0, #20
 800bfa2:	3114      	adds	r1, #20
 800bfa4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfa8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfb4:	42a5      	cmp	r5, r4
 800bfb6:	d003      	beq.n	800bfc0 <__mcmp+0x2c>
 800bfb8:	d305      	bcc.n	800bfc6 <__mcmp+0x32>
 800bfba:	2201      	movs	r2, #1
 800bfbc:	4610      	mov	r0, r2
 800bfbe:	bd30      	pop	{r4, r5, pc}
 800bfc0:	4283      	cmp	r3, r0
 800bfc2:	d3f3      	bcc.n	800bfac <__mcmp+0x18>
 800bfc4:	e7fa      	b.n	800bfbc <__mcmp+0x28>
 800bfc6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfca:	e7f7      	b.n	800bfbc <__mcmp+0x28>

0800bfcc <__mdiff>:
 800bfcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd0:	460c      	mov	r4, r1
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	4617      	mov	r7, r2
 800bfda:	f7ff ffdb 	bl	800bf94 <__mcmp>
 800bfde:	1e05      	subs	r5, r0, #0
 800bfe0:	d110      	bne.n	800c004 <__mdiff+0x38>
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	4630      	mov	r0, r6
 800bfe6:	f7ff fd0d 	bl	800ba04 <_Balloc>
 800bfea:	b930      	cbnz	r0, 800bffa <__mdiff+0x2e>
 800bfec:	4b39      	ldr	r3, [pc, #228]	; (800c0d4 <__mdiff+0x108>)
 800bfee:	4602      	mov	r2, r0
 800bff0:	f240 2132 	movw	r1, #562	; 0x232
 800bff4:	4838      	ldr	r0, [pc, #224]	; (800c0d8 <__mdiff+0x10c>)
 800bff6:	f000 fc0f 	bl	800c818 <__assert_func>
 800bffa:	2301      	movs	r3, #1
 800bffc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c000:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c004:	bfa4      	itt	ge
 800c006:	463b      	movge	r3, r7
 800c008:	4627      	movge	r7, r4
 800c00a:	4630      	mov	r0, r6
 800c00c:	6879      	ldr	r1, [r7, #4]
 800c00e:	bfa6      	itte	ge
 800c010:	461c      	movge	r4, r3
 800c012:	2500      	movge	r5, #0
 800c014:	2501      	movlt	r5, #1
 800c016:	f7ff fcf5 	bl	800ba04 <_Balloc>
 800c01a:	b920      	cbnz	r0, 800c026 <__mdiff+0x5a>
 800c01c:	4b2d      	ldr	r3, [pc, #180]	; (800c0d4 <__mdiff+0x108>)
 800c01e:	4602      	mov	r2, r0
 800c020:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c024:	e7e6      	b.n	800bff4 <__mdiff+0x28>
 800c026:	693e      	ldr	r6, [r7, #16]
 800c028:	60c5      	str	r5, [r0, #12]
 800c02a:	6925      	ldr	r5, [r4, #16]
 800c02c:	f107 0114 	add.w	r1, r7, #20
 800c030:	f104 0914 	add.w	r9, r4, #20
 800c034:	f100 0e14 	add.w	lr, r0, #20
 800c038:	f107 0210 	add.w	r2, r7, #16
 800c03c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c040:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c044:	46f2      	mov	sl, lr
 800c046:	2700      	movs	r7, #0
 800c048:	f859 3b04 	ldr.w	r3, [r9], #4
 800c04c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c050:	fa1f f883 	uxth.w	r8, r3
 800c054:	fa17 f78b 	uxtah	r7, r7, fp
 800c058:	0c1b      	lsrs	r3, r3, #16
 800c05a:	eba7 0808 	sub.w	r8, r7, r8
 800c05e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c062:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c066:	fa1f f888 	uxth.w	r8, r8
 800c06a:	141f      	asrs	r7, r3, #16
 800c06c:	454d      	cmp	r5, r9
 800c06e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c072:	f84a 3b04 	str.w	r3, [sl], #4
 800c076:	d8e7      	bhi.n	800c048 <__mdiff+0x7c>
 800c078:	1b2b      	subs	r3, r5, r4
 800c07a:	3b15      	subs	r3, #21
 800c07c:	f023 0303 	bic.w	r3, r3, #3
 800c080:	3304      	adds	r3, #4
 800c082:	3415      	adds	r4, #21
 800c084:	42a5      	cmp	r5, r4
 800c086:	bf38      	it	cc
 800c088:	2304      	movcc	r3, #4
 800c08a:	4419      	add	r1, r3
 800c08c:	4473      	add	r3, lr
 800c08e:	469e      	mov	lr, r3
 800c090:	460d      	mov	r5, r1
 800c092:	4565      	cmp	r5, ip
 800c094:	d30e      	bcc.n	800c0b4 <__mdiff+0xe8>
 800c096:	f10c 0203 	add.w	r2, ip, #3
 800c09a:	1a52      	subs	r2, r2, r1
 800c09c:	f022 0203 	bic.w	r2, r2, #3
 800c0a0:	3903      	subs	r1, #3
 800c0a2:	458c      	cmp	ip, r1
 800c0a4:	bf38      	it	cc
 800c0a6:	2200      	movcc	r2, #0
 800c0a8:	441a      	add	r2, r3
 800c0aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c0ae:	b17b      	cbz	r3, 800c0d0 <__mdiff+0x104>
 800c0b0:	6106      	str	r6, [r0, #16]
 800c0b2:	e7a5      	b.n	800c000 <__mdiff+0x34>
 800c0b4:	f855 8b04 	ldr.w	r8, [r5], #4
 800c0b8:	fa17 f488 	uxtah	r4, r7, r8
 800c0bc:	1422      	asrs	r2, r4, #16
 800c0be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c0c2:	b2a4      	uxth	r4, r4
 800c0c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c0c8:	f84e 4b04 	str.w	r4, [lr], #4
 800c0cc:	1417      	asrs	r7, r2, #16
 800c0ce:	e7e0      	b.n	800c092 <__mdiff+0xc6>
 800c0d0:	3e01      	subs	r6, #1
 800c0d2:	e7ea      	b.n	800c0aa <__mdiff+0xde>
 800c0d4:	0800d714 	.word	0x0800d714
 800c0d8:	0800d7a4 	.word	0x0800d7a4

0800c0dc <__ulp>:
 800c0dc:	b082      	sub	sp, #8
 800c0de:	ed8d 0b00 	vstr	d0, [sp]
 800c0e2:	9b01      	ldr	r3, [sp, #4]
 800c0e4:	4912      	ldr	r1, [pc, #72]	; (800c130 <__ulp+0x54>)
 800c0e6:	4019      	ands	r1, r3
 800c0e8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c0ec:	2900      	cmp	r1, #0
 800c0ee:	dd05      	ble.n	800c0fc <__ulp+0x20>
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	ec43 2b10 	vmov	d0, r2, r3
 800c0f8:	b002      	add	sp, #8
 800c0fa:	4770      	bx	lr
 800c0fc:	4249      	negs	r1, r1
 800c0fe:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c102:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c106:	f04f 0200 	mov.w	r2, #0
 800c10a:	f04f 0300 	mov.w	r3, #0
 800c10e:	da04      	bge.n	800c11a <__ulp+0x3e>
 800c110:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c114:	fa41 f300 	asr.w	r3, r1, r0
 800c118:	e7ec      	b.n	800c0f4 <__ulp+0x18>
 800c11a:	f1a0 0114 	sub.w	r1, r0, #20
 800c11e:	291e      	cmp	r1, #30
 800c120:	bfda      	itte	le
 800c122:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c126:	fa20 f101 	lsrle.w	r1, r0, r1
 800c12a:	2101      	movgt	r1, #1
 800c12c:	460a      	mov	r2, r1
 800c12e:	e7e1      	b.n	800c0f4 <__ulp+0x18>
 800c130:	7ff00000 	.word	0x7ff00000

0800c134 <__b2d>:
 800c134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c136:	6905      	ldr	r5, [r0, #16]
 800c138:	f100 0714 	add.w	r7, r0, #20
 800c13c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c140:	1f2e      	subs	r6, r5, #4
 800c142:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c146:	4620      	mov	r0, r4
 800c148:	f7ff fd52 	bl	800bbf0 <__hi0bits>
 800c14c:	f1c0 0320 	rsb	r3, r0, #32
 800c150:	280a      	cmp	r0, #10
 800c152:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c1d0 <__b2d+0x9c>
 800c156:	600b      	str	r3, [r1, #0]
 800c158:	dc14      	bgt.n	800c184 <__b2d+0x50>
 800c15a:	f1c0 0e0b 	rsb	lr, r0, #11
 800c15e:	fa24 f10e 	lsr.w	r1, r4, lr
 800c162:	42b7      	cmp	r7, r6
 800c164:	ea41 030c 	orr.w	r3, r1, ip
 800c168:	bf34      	ite	cc
 800c16a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c16e:	2100      	movcs	r1, #0
 800c170:	3015      	adds	r0, #21
 800c172:	fa04 f000 	lsl.w	r0, r4, r0
 800c176:	fa21 f10e 	lsr.w	r1, r1, lr
 800c17a:	ea40 0201 	orr.w	r2, r0, r1
 800c17e:	ec43 2b10 	vmov	d0, r2, r3
 800c182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c184:	42b7      	cmp	r7, r6
 800c186:	bf3a      	itte	cc
 800c188:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c18c:	f1a5 0608 	subcc.w	r6, r5, #8
 800c190:	2100      	movcs	r1, #0
 800c192:	380b      	subs	r0, #11
 800c194:	d017      	beq.n	800c1c6 <__b2d+0x92>
 800c196:	f1c0 0c20 	rsb	ip, r0, #32
 800c19a:	fa04 f500 	lsl.w	r5, r4, r0
 800c19e:	42be      	cmp	r6, r7
 800c1a0:	fa21 f40c 	lsr.w	r4, r1, ip
 800c1a4:	ea45 0504 	orr.w	r5, r5, r4
 800c1a8:	bf8c      	ite	hi
 800c1aa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c1ae:	2400      	movls	r4, #0
 800c1b0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c1b4:	fa01 f000 	lsl.w	r0, r1, r0
 800c1b8:	fa24 f40c 	lsr.w	r4, r4, ip
 800c1bc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c1c0:	ea40 0204 	orr.w	r2, r0, r4
 800c1c4:	e7db      	b.n	800c17e <__b2d+0x4a>
 800c1c6:	ea44 030c 	orr.w	r3, r4, ip
 800c1ca:	460a      	mov	r2, r1
 800c1cc:	e7d7      	b.n	800c17e <__b2d+0x4a>
 800c1ce:	bf00      	nop
 800c1d0:	3ff00000 	.word	0x3ff00000

0800c1d4 <__d2b>:
 800c1d4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1d8:	4689      	mov	r9, r1
 800c1da:	2101      	movs	r1, #1
 800c1dc:	ec57 6b10 	vmov	r6, r7, d0
 800c1e0:	4690      	mov	r8, r2
 800c1e2:	f7ff fc0f 	bl	800ba04 <_Balloc>
 800c1e6:	4604      	mov	r4, r0
 800c1e8:	b930      	cbnz	r0, 800c1f8 <__d2b+0x24>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	4b25      	ldr	r3, [pc, #148]	; (800c284 <__d2b+0xb0>)
 800c1ee:	4826      	ldr	r0, [pc, #152]	; (800c288 <__d2b+0xb4>)
 800c1f0:	f240 310a 	movw	r1, #778	; 0x30a
 800c1f4:	f000 fb10 	bl	800c818 <__assert_func>
 800c1f8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c1fc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c200:	bb35      	cbnz	r5, 800c250 <__d2b+0x7c>
 800c202:	2e00      	cmp	r6, #0
 800c204:	9301      	str	r3, [sp, #4]
 800c206:	d028      	beq.n	800c25a <__d2b+0x86>
 800c208:	4668      	mov	r0, sp
 800c20a:	9600      	str	r6, [sp, #0]
 800c20c:	f7ff fd10 	bl	800bc30 <__lo0bits>
 800c210:	9900      	ldr	r1, [sp, #0]
 800c212:	b300      	cbz	r0, 800c256 <__d2b+0x82>
 800c214:	9a01      	ldr	r2, [sp, #4]
 800c216:	f1c0 0320 	rsb	r3, r0, #32
 800c21a:	fa02 f303 	lsl.w	r3, r2, r3
 800c21e:	430b      	orrs	r3, r1
 800c220:	40c2      	lsrs	r2, r0
 800c222:	6163      	str	r3, [r4, #20]
 800c224:	9201      	str	r2, [sp, #4]
 800c226:	9b01      	ldr	r3, [sp, #4]
 800c228:	61a3      	str	r3, [r4, #24]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	bf14      	ite	ne
 800c22e:	2202      	movne	r2, #2
 800c230:	2201      	moveq	r2, #1
 800c232:	6122      	str	r2, [r4, #16]
 800c234:	b1d5      	cbz	r5, 800c26c <__d2b+0x98>
 800c236:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c23a:	4405      	add	r5, r0
 800c23c:	f8c9 5000 	str.w	r5, [r9]
 800c240:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c244:	f8c8 0000 	str.w	r0, [r8]
 800c248:	4620      	mov	r0, r4
 800c24a:	b003      	add	sp, #12
 800c24c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c250:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c254:	e7d5      	b.n	800c202 <__d2b+0x2e>
 800c256:	6161      	str	r1, [r4, #20]
 800c258:	e7e5      	b.n	800c226 <__d2b+0x52>
 800c25a:	a801      	add	r0, sp, #4
 800c25c:	f7ff fce8 	bl	800bc30 <__lo0bits>
 800c260:	9b01      	ldr	r3, [sp, #4]
 800c262:	6163      	str	r3, [r4, #20]
 800c264:	2201      	movs	r2, #1
 800c266:	6122      	str	r2, [r4, #16]
 800c268:	3020      	adds	r0, #32
 800c26a:	e7e3      	b.n	800c234 <__d2b+0x60>
 800c26c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c270:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c274:	f8c9 0000 	str.w	r0, [r9]
 800c278:	6918      	ldr	r0, [r3, #16]
 800c27a:	f7ff fcb9 	bl	800bbf0 <__hi0bits>
 800c27e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c282:	e7df      	b.n	800c244 <__d2b+0x70>
 800c284:	0800d714 	.word	0x0800d714
 800c288:	0800d7a4 	.word	0x0800d7a4

0800c28c <__ratio>:
 800c28c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c290:	4688      	mov	r8, r1
 800c292:	4669      	mov	r1, sp
 800c294:	4681      	mov	r9, r0
 800c296:	f7ff ff4d 	bl	800c134 <__b2d>
 800c29a:	a901      	add	r1, sp, #4
 800c29c:	4640      	mov	r0, r8
 800c29e:	ec55 4b10 	vmov	r4, r5, d0
 800c2a2:	f7ff ff47 	bl	800c134 <__b2d>
 800c2a6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c2aa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c2ae:	eba3 0c02 	sub.w	ip, r3, r2
 800c2b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c2b6:	1a9b      	subs	r3, r3, r2
 800c2b8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c2bc:	ec51 0b10 	vmov	r0, r1, d0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	bfd6      	itet	le
 800c2c4:	460a      	movle	r2, r1
 800c2c6:	462a      	movgt	r2, r5
 800c2c8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2cc:	468b      	mov	fp, r1
 800c2ce:	462f      	mov	r7, r5
 800c2d0:	bfd4      	ite	le
 800c2d2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c2d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2da:	4620      	mov	r0, r4
 800c2dc:	ee10 2a10 	vmov	r2, s0
 800c2e0:	465b      	mov	r3, fp
 800c2e2:	4639      	mov	r1, r7
 800c2e4:	f7f4 fab2 	bl	800084c <__aeabi_ddiv>
 800c2e8:	ec41 0b10 	vmov	d0, r0, r1
 800c2ec:	b003      	add	sp, #12
 800c2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2f2 <__copybits>:
 800c2f2:	3901      	subs	r1, #1
 800c2f4:	b570      	push	{r4, r5, r6, lr}
 800c2f6:	1149      	asrs	r1, r1, #5
 800c2f8:	6914      	ldr	r4, [r2, #16]
 800c2fa:	3101      	adds	r1, #1
 800c2fc:	f102 0314 	add.w	r3, r2, #20
 800c300:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c304:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c308:	1f05      	subs	r5, r0, #4
 800c30a:	42a3      	cmp	r3, r4
 800c30c:	d30c      	bcc.n	800c328 <__copybits+0x36>
 800c30e:	1aa3      	subs	r3, r4, r2
 800c310:	3b11      	subs	r3, #17
 800c312:	f023 0303 	bic.w	r3, r3, #3
 800c316:	3211      	adds	r2, #17
 800c318:	42a2      	cmp	r2, r4
 800c31a:	bf88      	it	hi
 800c31c:	2300      	movhi	r3, #0
 800c31e:	4418      	add	r0, r3
 800c320:	2300      	movs	r3, #0
 800c322:	4288      	cmp	r0, r1
 800c324:	d305      	bcc.n	800c332 <__copybits+0x40>
 800c326:	bd70      	pop	{r4, r5, r6, pc}
 800c328:	f853 6b04 	ldr.w	r6, [r3], #4
 800c32c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c330:	e7eb      	b.n	800c30a <__copybits+0x18>
 800c332:	f840 3b04 	str.w	r3, [r0], #4
 800c336:	e7f4      	b.n	800c322 <__copybits+0x30>

0800c338 <__any_on>:
 800c338:	f100 0214 	add.w	r2, r0, #20
 800c33c:	6900      	ldr	r0, [r0, #16]
 800c33e:	114b      	asrs	r3, r1, #5
 800c340:	4298      	cmp	r0, r3
 800c342:	b510      	push	{r4, lr}
 800c344:	db11      	blt.n	800c36a <__any_on+0x32>
 800c346:	dd0a      	ble.n	800c35e <__any_on+0x26>
 800c348:	f011 011f 	ands.w	r1, r1, #31
 800c34c:	d007      	beq.n	800c35e <__any_on+0x26>
 800c34e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c352:	fa24 f001 	lsr.w	r0, r4, r1
 800c356:	fa00 f101 	lsl.w	r1, r0, r1
 800c35a:	428c      	cmp	r4, r1
 800c35c:	d10b      	bne.n	800c376 <__any_on+0x3e>
 800c35e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c362:	4293      	cmp	r3, r2
 800c364:	d803      	bhi.n	800c36e <__any_on+0x36>
 800c366:	2000      	movs	r0, #0
 800c368:	bd10      	pop	{r4, pc}
 800c36a:	4603      	mov	r3, r0
 800c36c:	e7f7      	b.n	800c35e <__any_on+0x26>
 800c36e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c372:	2900      	cmp	r1, #0
 800c374:	d0f5      	beq.n	800c362 <__any_on+0x2a>
 800c376:	2001      	movs	r0, #1
 800c378:	e7f6      	b.n	800c368 <__any_on+0x30>

0800c37a <_calloc_r>:
 800c37a:	b513      	push	{r0, r1, r4, lr}
 800c37c:	434a      	muls	r2, r1
 800c37e:	4611      	mov	r1, r2
 800c380:	9201      	str	r2, [sp, #4]
 800c382:	f000 f859 	bl	800c438 <_malloc_r>
 800c386:	4604      	mov	r4, r0
 800c388:	b118      	cbz	r0, 800c392 <_calloc_r+0x18>
 800c38a:	9a01      	ldr	r2, [sp, #4]
 800c38c:	2100      	movs	r1, #0
 800c38e:	f7fc fbd5 	bl	8008b3c <memset>
 800c392:	4620      	mov	r0, r4
 800c394:	b002      	add	sp, #8
 800c396:	bd10      	pop	{r4, pc}

0800c398 <_free_r>:
 800c398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c39a:	2900      	cmp	r1, #0
 800c39c:	d048      	beq.n	800c430 <_free_r+0x98>
 800c39e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3a2:	9001      	str	r0, [sp, #4]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f1a1 0404 	sub.w	r4, r1, #4
 800c3aa:	bfb8      	it	lt
 800c3ac:	18e4      	addlt	r4, r4, r3
 800c3ae:	f000 fa7d 	bl	800c8ac <__malloc_lock>
 800c3b2:	4a20      	ldr	r2, [pc, #128]	; (800c434 <_free_r+0x9c>)
 800c3b4:	9801      	ldr	r0, [sp, #4]
 800c3b6:	6813      	ldr	r3, [r2, #0]
 800c3b8:	4615      	mov	r5, r2
 800c3ba:	b933      	cbnz	r3, 800c3ca <_free_r+0x32>
 800c3bc:	6063      	str	r3, [r4, #4]
 800c3be:	6014      	str	r4, [r2, #0]
 800c3c0:	b003      	add	sp, #12
 800c3c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3c6:	f000 ba77 	b.w	800c8b8 <__malloc_unlock>
 800c3ca:	42a3      	cmp	r3, r4
 800c3cc:	d90b      	bls.n	800c3e6 <_free_r+0x4e>
 800c3ce:	6821      	ldr	r1, [r4, #0]
 800c3d0:	1862      	adds	r2, r4, r1
 800c3d2:	4293      	cmp	r3, r2
 800c3d4:	bf04      	itt	eq
 800c3d6:	681a      	ldreq	r2, [r3, #0]
 800c3d8:	685b      	ldreq	r3, [r3, #4]
 800c3da:	6063      	str	r3, [r4, #4]
 800c3dc:	bf04      	itt	eq
 800c3de:	1852      	addeq	r2, r2, r1
 800c3e0:	6022      	streq	r2, [r4, #0]
 800c3e2:	602c      	str	r4, [r5, #0]
 800c3e4:	e7ec      	b.n	800c3c0 <_free_r+0x28>
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	b10b      	cbz	r3, 800c3f0 <_free_r+0x58>
 800c3ec:	42a3      	cmp	r3, r4
 800c3ee:	d9fa      	bls.n	800c3e6 <_free_r+0x4e>
 800c3f0:	6811      	ldr	r1, [r2, #0]
 800c3f2:	1855      	adds	r5, r2, r1
 800c3f4:	42a5      	cmp	r5, r4
 800c3f6:	d10b      	bne.n	800c410 <_free_r+0x78>
 800c3f8:	6824      	ldr	r4, [r4, #0]
 800c3fa:	4421      	add	r1, r4
 800c3fc:	1854      	adds	r4, r2, r1
 800c3fe:	42a3      	cmp	r3, r4
 800c400:	6011      	str	r1, [r2, #0]
 800c402:	d1dd      	bne.n	800c3c0 <_free_r+0x28>
 800c404:	681c      	ldr	r4, [r3, #0]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	6053      	str	r3, [r2, #4]
 800c40a:	4421      	add	r1, r4
 800c40c:	6011      	str	r1, [r2, #0]
 800c40e:	e7d7      	b.n	800c3c0 <_free_r+0x28>
 800c410:	d902      	bls.n	800c418 <_free_r+0x80>
 800c412:	230c      	movs	r3, #12
 800c414:	6003      	str	r3, [r0, #0]
 800c416:	e7d3      	b.n	800c3c0 <_free_r+0x28>
 800c418:	6825      	ldr	r5, [r4, #0]
 800c41a:	1961      	adds	r1, r4, r5
 800c41c:	428b      	cmp	r3, r1
 800c41e:	bf04      	itt	eq
 800c420:	6819      	ldreq	r1, [r3, #0]
 800c422:	685b      	ldreq	r3, [r3, #4]
 800c424:	6063      	str	r3, [r4, #4]
 800c426:	bf04      	itt	eq
 800c428:	1949      	addeq	r1, r1, r5
 800c42a:	6021      	streq	r1, [r4, #0]
 800c42c:	6054      	str	r4, [r2, #4]
 800c42e:	e7c7      	b.n	800c3c0 <_free_r+0x28>
 800c430:	b003      	add	sp, #12
 800c432:	bd30      	pop	{r4, r5, pc}
 800c434:	200042c8 	.word	0x200042c8

0800c438 <_malloc_r>:
 800c438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43a:	1ccd      	adds	r5, r1, #3
 800c43c:	f025 0503 	bic.w	r5, r5, #3
 800c440:	3508      	adds	r5, #8
 800c442:	2d0c      	cmp	r5, #12
 800c444:	bf38      	it	cc
 800c446:	250c      	movcc	r5, #12
 800c448:	2d00      	cmp	r5, #0
 800c44a:	4606      	mov	r6, r0
 800c44c:	db01      	blt.n	800c452 <_malloc_r+0x1a>
 800c44e:	42a9      	cmp	r1, r5
 800c450:	d903      	bls.n	800c45a <_malloc_r+0x22>
 800c452:	230c      	movs	r3, #12
 800c454:	6033      	str	r3, [r6, #0]
 800c456:	2000      	movs	r0, #0
 800c458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c45a:	f000 fa27 	bl	800c8ac <__malloc_lock>
 800c45e:	4921      	ldr	r1, [pc, #132]	; (800c4e4 <_malloc_r+0xac>)
 800c460:	680a      	ldr	r2, [r1, #0]
 800c462:	4614      	mov	r4, r2
 800c464:	b99c      	cbnz	r4, 800c48e <_malloc_r+0x56>
 800c466:	4f20      	ldr	r7, [pc, #128]	; (800c4e8 <_malloc_r+0xb0>)
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	b923      	cbnz	r3, 800c476 <_malloc_r+0x3e>
 800c46c:	4621      	mov	r1, r4
 800c46e:	4630      	mov	r0, r6
 800c470:	f000 f9a2 	bl	800c7b8 <_sbrk_r>
 800c474:	6038      	str	r0, [r7, #0]
 800c476:	4629      	mov	r1, r5
 800c478:	4630      	mov	r0, r6
 800c47a:	f000 f99d 	bl	800c7b8 <_sbrk_r>
 800c47e:	1c43      	adds	r3, r0, #1
 800c480:	d123      	bne.n	800c4ca <_malloc_r+0x92>
 800c482:	230c      	movs	r3, #12
 800c484:	6033      	str	r3, [r6, #0]
 800c486:	4630      	mov	r0, r6
 800c488:	f000 fa16 	bl	800c8b8 <__malloc_unlock>
 800c48c:	e7e3      	b.n	800c456 <_malloc_r+0x1e>
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	1b5b      	subs	r3, r3, r5
 800c492:	d417      	bmi.n	800c4c4 <_malloc_r+0x8c>
 800c494:	2b0b      	cmp	r3, #11
 800c496:	d903      	bls.n	800c4a0 <_malloc_r+0x68>
 800c498:	6023      	str	r3, [r4, #0]
 800c49a:	441c      	add	r4, r3
 800c49c:	6025      	str	r5, [r4, #0]
 800c49e:	e004      	b.n	800c4aa <_malloc_r+0x72>
 800c4a0:	6863      	ldr	r3, [r4, #4]
 800c4a2:	42a2      	cmp	r2, r4
 800c4a4:	bf0c      	ite	eq
 800c4a6:	600b      	streq	r3, [r1, #0]
 800c4a8:	6053      	strne	r3, [r2, #4]
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	f000 fa04 	bl	800c8b8 <__malloc_unlock>
 800c4b0:	f104 000b 	add.w	r0, r4, #11
 800c4b4:	1d23      	adds	r3, r4, #4
 800c4b6:	f020 0007 	bic.w	r0, r0, #7
 800c4ba:	1ac2      	subs	r2, r0, r3
 800c4bc:	d0cc      	beq.n	800c458 <_malloc_r+0x20>
 800c4be:	1a1b      	subs	r3, r3, r0
 800c4c0:	50a3      	str	r3, [r4, r2]
 800c4c2:	e7c9      	b.n	800c458 <_malloc_r+0x20>
 800c4c4:	4622      	mov	r2, r4
 800c4c6:	6864      	ldr	r4, [r4, #4]
 800c4c8:	e7cc      	b.n	800c464 <_malloc_r+0x2c>
 800c4ca:	1cc4      	adds	r4, r0, #3
 800c4cc:	f024 0403 	bic.w	r4, r4, #3
 800c4d0:	42a0      	cmp	r0, r4
 800c4d2:	d0e3      	beq.n	800c49c <_malloc_r+0x64>
 800c4d4:	1a21      	subs	r1, r4, r0
 800c4d6:	4630      	mov	r0, r6
 800c4d8:	f000 f96e 	bl	800c7b8 <_sbrk_r>
 800c4dc:	3001      	adds	r0, #1
 800c4de:	d1dd      	bne.n	800c49c <_malloc_r+0x64>
 800c4e0:	e7cf      	b.n	800c482 <_malloc_r+0x4a>
 800c4e2:	bf00      	nop
 800c4e4:	200042c8 	.word	0x200042c8
 800c4e8:	200042cc 	.word	0x200042cc

0800c4ec <__ssputs_r>:
 800c4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4f0:	688e      	ldr	r6, [r1, #8]
 800c4f2:	429e      	cmp	r6, r3
 800c4f4:	4682      	mov	sl, r0
 800c4f6:	460c      	mov	r4, r1
 800c4f8:	4690      	mov	r8, r2
 800c4fa:	461f      	mov	r7, r3
 800c4fc:	d838      	bhi.n	800c570 <__ssputs_r+0x84>
 800c4fe:	898a      	ldrh	r2, [r1, #12]
 800c500:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c504:	d032      	beq.n	800c56c <__ssputs_r+0x80>
 800c506:	6825      	ldr	r5, [r4, #0]
 800c508:	6909      	ldr	r1, [r1, #16]
 800c50a:	eba5 0901 	sub.w	r9, r5, r1
 800c50e:	6965      	ldr	r5, [r4, #20]
 800c510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c518:	3301      	adds	r3, #1
 800c51a:	444b      	add	r3, r9
 800c51c:	106d      	asrs	r5, r5, #1
 800c51e:	429d      	cmp	r5, r3
 800c520:	bf38      	it	cc
 800c522:	461d      	movcc	r5, r3
 800c524:	0553      	lsls	r3, r2, #21
 800c526:	d531      	bpl.n	800c58c <__ssputs_r+0xa0>
 800c528:	4629      	mov	r1, r5
 800c52a:	f7ff ff85 	bl	800c438 <_malloc_r>
 800c52e:	4606      	mov	r6, r0
 800c530:	b950      	cbnz	r0, 800c548 <__ssputs_r+0x5c>
 800c532:	230c      	movs	r3, #12
 800c534:	f8ca 3000 	str.w	r3, [sl]
 800c538:	89a3      	ldrh	r3, [r4, #12]
 800c53a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c53e:	81a3      	strh	r3, [r4, #12]
 800c540:	f04f 30ff 	mov.w	r0, #4294967295
 800c544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c548:	6921      	ldr	r1, [r4, #16]
 800c54a:	464a      	mov	r2, r9
 800c54c:	f7fc fae8 	bl	8008b20 <memcpy>
 800c550:	89a3      	ldrh	r3, [r4, #12]
 800c552:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c556:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c55a:	81a3      	strh	r3, [r4, #12]
 800c55c:	6126      	str	r6, [r4, #16]
 800c55e:	6165      	str	r5, [r4, #20]
 800c560:	444e      	add	r6, r9
 800c562:	eba5 0509 	sub.w	r5, r5, r9
 800c566:	6026      	str	r6, [r4, #0]
 800c568:	60a5      	str	r5, [r4, #8]
 800c56a:	463e      	mov	r6, r7
 800c56c:	42be      	cmp	r6, r7
 800c56e:	d900      	bls.n	800c572 <__ssputs_r+0x86>
 800c570:	463e      	mov	r6, r7
 800c572:	4632      	mov	r2, r6
 800c574:	6820      	ldr	r0, [r4, #0]
 800c576:	4641      	mov	r1, r8
 800c578:	f000 f97e 	bl	800c878 <memmove>
 800c57c:	68a3      	ldr	r3, [r4, #8]
 800c57e:	6822      	ldr	r2, [r4, #0]
 800c580:	1b9b      	subs	r3, r3, r6
 800c582:	4432      	add	r2, r6
 800c584:	60a3      	str	r3, [r4, #8]
 800c586:	6022      	str	r2, [r4, #0]
 800c588:	2000      	movs	r0, #0
 800c58a:	e7db      	b.n	800c544 <__ssputs_r+0x58>
 800c58c:	462a      	mov	r2, r5
 800c58e:	f000 f999 	bl	800c8c4 <_realloc_r>
 800c592:	4606      	mov	r6, r0
 800c594:	2800      	cmp	r0, #0
 800c596:	d1e1      	bne.n	800c55c <__ssputs_r+0x70>
 800c598:	6921      	ldr	r1, [r4, #16]
 800c59a:	4650      	mov	r0, sl
 800c59c:	f7ff fefc 	bl	800c398 <_free_r>
 800c5a0:	e7c7      	b.n	800c532 <__ssputs_r+0x46>
	...

0800c5a4 <_svfiprintf_r>:
 800c5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5a8:	4698      	mov	r8, r3
 800c5aa:	898b      	ldrh	r3, [r1, #12]
 800c5ac:	061b      	lsls	r3, r3, #24
 800c5ae:	b09d      	sub	sp, #116	; 0x74
 800c5b0:	4607      	mov	r7, r0
 800c5b2:	460d      	mov	r5, r1
 800c5b4:	4614      	mov	r4, r2
 800c5b6:	d50e      	bpl.n	800c5d6 <_svfiprintf_r+0x32>
 800c5b8:	690b      	ldr	r3, [r1, #16]
 800c5ba:	b963      	cbnz	r3, 800c5d6 <_svfiprintf_r+0x32>
 800c5bc:	2140      	movs	r1, #64	; 0x40
 800c5be:	f7ff ff3b 	bl	800c438 <_malloc_r>
 800c5c2:	6028      	str	r0, [r5, #0]
 800c5c4:	6128      	str	r0, [r5, #16]
 800c5c6:	b920      	cbnz	r0, 800c5d2 <_svfiprintf_r+0x2e>
 800c5c8:	230c      	movs	r3, #12
 800c5ca:	603b      	str	r3, [r7, #0]
 800c5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d0:	e0d1      	b.n	800c776 <_svfiprintf_r+0x1d2>
 800c5d2:	2340      	movs	r3, #64	; 0x40
 800c5d4:	616b      	str	r3, [r5, #20]
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800c5da:	2320      	movs	r3, #32
 800c5dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5e4:	2330      	movs	r3, #48	; 0x30
 800c5e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c790 <_svfiprintf_r+0x1ec>
 800c5ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5ee:	f04f 0901 	mov.w	r9, #1
 800c5f2:	4623      	mov	r3, r4
 800c5f4:	469a      	mov	sl, r3
 800c5f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5fa:	b10a      	cbz	r2, 800c600 <_svfiprintf_r+0x5c>
 800c5fc:	2a25      	cmp	r2, #37	; 0x25
 800c5fe:	d1f9      	bne.n	800c5f4 <_svfiprintf_r+0x50>
 800c600:	ebba 0b04 	subs.w	fp, sl, r4
 800c604:	d00b      	beq.n	800c61e <_svfiprintf_r+0x7a>
 800c606:	465b      	mov	r3, fp
 800c608:	4622      	mov	r2, r4
 800c60a:	4629      	mov	r1, r5
 800c60c:	4638      	mov	r0, r7
 800c60e:	f7ff ff6d 	bl	800c4ec <__ssputs_r>
 800c612:	3001      	adds	r0, #1
 800c614:	f000 80aa 	beq.w	800c76c <_svfiprintf_r+0x1c8>
 800c618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c61a:	445a      	add	r2, fp
 800c61c:	9209      	str	r2, [sp, #36]	; 0x24
 800c61e:	f89a 3000 	ldrb.w	r3, [sl]
 800c622:	2b00      	cmp	r3, #0
 800c624:	f000 80a2 	beq.w	800c76c <_svfiprintf_r+0x1c8>
 800c628:	2300      	movs	r3, #0
 800c62a:	f04f 32ff 	mov.w	r2, #4294967295
 800c62e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c632:	f10a 0a01 	add.w	sl, sl, #1
 800c636:	9304      	str	r3, [sp, #16]
 800c638:	9307      	str	r3, [sp, #28]
 800c63a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c63e:	931a      	str	r3, [sp, #104]	; 0x68
 800c640:	4654      	mov	r4, sl
 800c642:	2205      	movs	r2, #5
 800c644:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c648:	4851      	ldr	r0, [pc, #324]	; (800c790 <_svfiprintf_r+0x1ec>)
 800c64a:	f7f3 fdc9 	bl	80001e0 <memchr>
 800c64e:	9a04      	ldr	r2, [sp, #16]
 800c650:	b9d8      	cbnz	r0, 800c68a <_svfiprintf_r+0xe6>
 800c652:	06d0      	lsls	r0, r2, #27
 800c654:	bf44      	itt	mi
 800c656:	2320      	movmi	r3, #32
 800c658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c65c:	0711      	lsls	r1, r2, #28
 800c65e:	bf44      	itt	mi
 800c660:	232b      	movmi	r3, #43	; 0x2b
 800c662:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c666:	f89a 3000 	ldrb.w	r3, [sl]
 800c66a:	2b2a      	cmp	r3, #42	; 0x2a
 800c66c:	d015      	beq.n	800c69a <_svfiprintf_r+0xf6>
 800c66e:	9a07      	ldr	r2, [sp, #28]
 800c670:	4654      	mov	r4, sl
 800c672:	2000      	movs	r0, #0
 800c674:	f04f 0c0a 	mov.w	ip, #10
 800c678:	4621      	mov	r1, r4
 800c67a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c67e:	3b30      	subs	r3, #48	; 0x30
 800c680:	2b09      	cmp	r3, #9
 800c682:	d94e      	bls.n	800c722 <_svfiprintf_r+0x17e>
 800c684:	b1b0      	cbz	r0, 800c6b4 <_svfiprintf_r+0x110>
 800c686:	9207      	str	r2, [sp, #28]
 800c688:	e014      	b.n	800c6b4 <_svfiprintf_r+0x110>
 800c68a:	eba0 0308 	sub.w	r3, r0, r8
 800c68e:	fa09 f303 	lsl.w	r3, r9, r3
 800c692:	4313      	orrs	r3, r2
 800c694:	9304      	str	r3, [sp, #16]
 800c696:	46a2      	mov	sl, r4
 800c698:	e7d2      	b.n	800c640 <_svfiprintf_r+0x9c>
 800c69a:	9b03      	ldr	r3, [sp, #12]
 800c69c:	1d19      	adds	r1, r3, #4
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	9103      	str	r1, [sp, #12]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	bfbb      	ittet	lt
 800c6a6:	425b      	neglt	r3, r3
 800c6a8:	f042 0202 	orrlt.w	r2, r2, #2
 800c6ac:	9307      	strge	r3, [sp, #28]
 800c6ae:	9307      	strlt	r3, [sp, #28]
 800c6b0:	bfb8      	it	lt
 800c6b2:	9204      	strlt	r2, [sp, #16]
 800c6b4:	7823      	ldrb	r3, [r4, #0]
 800c6b6:	2b2e      	cmp	r3, #46	; 0x2e
 800c6b8:	d10c      	bne.n	800c6d4 <_svfiprintf_r+0x130>
 800c6ba:	7863      	ldrb	r3, [r4, #1]
 800c6bc:	2b2a      	cmp	r3, #42	; 0x2a
 800c6be:	d135      	bne.n	800c72c <_svfiprintf_r+0x188>
 800c6c0:	9b03      	ldr	r3, [sp, #12]
 800c6c2:	1d1a      	adds	r2, r3, #4
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	9203      	str	r2, [sp, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	bfb8      	it	lt
 800c6cc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6d0:	3402      	adds	r4, #2
 800c6d2:	9305      	str	r3, [sp, #20]
 800c6d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c7a0 <_svfiprintf_r+0x1fc>
 800c6d8:	7821      	ldrb	r1, [r4, #0]
 800c6da:	2203      	movs	r2, #3
 800c6dc:	4650      	mov	r0, sl
 800c6de:	f7f3 fd7f 	bl	80001e0 <memchr>
 800c6e2:	b140      	cbz	r0, 800c6f6 <_svfiprintf_r+0x152>
 800c6e4:	2340      	movs	r3, #64	; 0x40
 800c6e6:	eba0 000a 	sub.w	r0, r0, sl
 800c6ea:	fa03 f000 	lsl.w	r0, r3, r0
 800c6ee:	9b04      	ldr	r3, [sp, #16]
 800c6f0:	4303      	orrs	r3, r0
 800c6f2:	3401      	adds	r4, #1
 800c6f4:	9304      	str	r3, [sp, #16]
 800c6f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6fa:	4826      	ldr	r0, [pc, #152]	; (800c794 <_svfiprintf_r+0x1f0>)
 800c6fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c700:	2206      	movs	r2, #6
 800c702:	f7f3 fd6d 	bl	80001e0 <memchr>
 800c706:	2800      	cmp	r0, #0
 800c708:	d038      	beq.n	800c77c <_svfiprintf_r+0x1d8>
 800c70a:	4b23      	ldr	r3, [pc, #140]	; (800c798 <_svfiprintf_r+0x1f4>)
 800c70c:	bb1b      	cbnz	r3, 800c756 <_svfiprintf_r+0x1b2>
 800c70e:	9b03      	ldr	r3, [sp, #12]
 800c710:	3307      	adds	r3, #7
 800c712:	f023 0307 	bic.w	r3, r3, #7
 800c716:	3308      	adds	r3, #8
 800c718:	9303      	str	r3, [sp, #12]
 800c71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c71c:	4433      	add	r3, r6
 800c71e:	9309      	str	r3, [sp, #36]	; 0x24
 800c720:	e767      	b.n	800c5f2 <_svfiprintf_r+0x4e>
 800c722:	fb0c 3202 	mla	r2, ip, r2, r3
 800c726:	460c      	mov	r4, r1
 800c728:	2001      	movs	r0, #1
 800c72a:	e7a5      	b.n	800c678 <_svfiprintf_r+0xd4>
 800c72c:	2300      	movs	r3, #0
 800c72e:	3401      	adds	r4, #1
 800c730:	9305      	str	r3, [sp, #20]
 800c732:	4619      	mov	r1, r3
 800c734:	f04f 0c0a 	mov.w	ip, #10
 800c738:	4620      	mov	r0, r4
 800c73a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c73e:	3a30      	subs	r2, #48	; 0x30
 800c740:	2a09      	cmp	r2, #9
 800c742:	d903      	bls.n	800c74c <_svfiprintf_r+0x1a8>
 800c744:	2b00      	cmp	r3, #0
 800c746:	d0c5      	beq.n	800c6d4 <_svfiprintf_r+0x130>
 800c748:	9105      	str	r1, [sp, #20]
 800c74a:	e7c3      	b.n	800c6d4 <_svfiprintf_r+0x130>
 800c74c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c750:	4604      	mov	r4, r0
 800c752:	2301      	movs	r3, #1
 800c754:	e7f0      	b.n	800c738 <_svfiprintf_r+0x194>
 800c756:	ab03      	add	r3, sp, #12
 800c758:	9300      	str	r3, [sp, #0]
 800c75a:	462a      	mov	r2, r5
 800c75c:	4b0f      	ldr	r3, [pc, #60]	; (800c79c <_svfiprintf_r+0x1f8>)
 800c75e:	a904      	add	r1, sp, #16
 800c760:	4638      	mov	r0, r7
 800c762:	f7fc fa93 	bl	8008c8c <_printf_float>
 800c766:	1c42      	adds	r2, r0, #1
 800c768:	4606      	mov	r6, r0
 800c76a:	d1d6      	bne.n	800c71a <_svfiprintf_r+0x176>
 800c76c:	89ab      	ldrh	r3, [r5, #12]
 800c76e:	065b      	lsls	r3, r3, #25
 800c770:	f53f af2c 	bmi.w	800c5cc <_svfiprintf_r+0x28>
 800c774:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c776:	b01d      	add	sp, #116	; 0x74
 800c778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c77c:	ab03      	add	r3, sp, #12
 800c77e:	9300      	str	r3, [sp, #0]
 800c780:	462a      	mov	r2, r5
 800c782:	4b06      	ldr	r3, [pc, #24]	; (800c79c <_svfiprintf_r+0x1f8>)
 800c784:	a904      	add	r1, sp, #16
 800c786:	4638      	mov	r0, r7
 800c788:	f7fc fd24 	bl	80091d4 <_printf_i>
 800c78c:	e7eb      	b.n	800c766 <_svfiprintf_r+0x1c2>
 800c78e:	bf00      	nop
 800c790:	0800d904 	.word	0x0800d904
 800c794:	0800d90e 	.word	0x0800d90e
 800c798:	08008c8d 	.word	0x08008c8d
 800c79c:	0800c4ed 	.word	0x0800c4ed
 800c7a0:	0800d90a 	.word	0x0800d90a
 800c7a4:	00000000 	.word	0x00000000

0800c7a8 <nan>:
 800c7a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c7b0 <nan+0x8>
 800c7ac:	4770      	bx	lr
 800c7ae:	bf00      	nop
 800c7b0:	00000000 	.word	0x00000000
 800c7b4:	7ff80000 	.word	0x7ff80000

0800c7b8 <_sbrk_r>:
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	4d06      	ldr	r5, [pc, #24]	; (800c7d4 <_sbrk_r+0x1c>)
 800c7bc:	2300      	movs	r3, #0
 800c7be:	4604      	mov	r4, r0
 800c7c0:	4608      	mov	r0, r1
 800c7c2:	602b      	str	r3, [r5, #0]
 800c7c4:	f7f7 fad2 	bl	8003d6c <_sbrk>
 800c7c8:	1c43      	adds	r3, r0, #1
 800c7ca:	d102      	bne.n	800c7d2 <_sbrk_r+0x1a>
 800c7cc:	682b      	ldr	r3, [r5, #0]
 800c7ce:	b103      	cbz	r3, 800c7d2 <_sbrk_r+0x1a>
 800c7d0:	6023      	str	r3, [r4, #0]
 800c7d2:	bd38      	pop	{r3, r4, r5, pc}
 800c7d4:	20004d70 	.word	0x20004d70

0800c7d8 <strncmp>:
 800c7d8:	b510      	push	{r4, lr}
 800c7da:	b16a      	cbz	r2, 800c7f8 <strncmp+0x20>
 800c7dc:	3901      	subs	r1, #1
 800c7de:	1884      	adds	r4, r0, r2
 800c7e0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c7e4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d103      	bne.n	800c7f4 <strncmp+0x1c>
 800c7ec:	42a0      	cmp	r0, r4
 800c7ee:	d001      	beq.n	800c7f4 <strncmp+0x1c>
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d1f5      	bne.n	800c7e0 <strncmp+0x8>
 800c7f4:	1a98      	subs	r0, r3, r2
 800c7f6:	bd10      	pop	{r4, pc}
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	e7fc      	b.n	800c7f6 <strncmp+0x1e>

0800c7fc <__ascii_wctomb>:
 800c7fc:	b149      	cbz	r1, 800c812 <__ascii_wctomb+0x16>
 800c7fe:	2aff      	cmp	r2, #255	; 0xff
 800c800:	bf85      	ittet	hi
 800c802:	238a      	movhi	r3, #138	; 0x8a
 800c804:	6003      	strhi	r3, [r0, #0]
 800c806:	700a      	strbls	r2, [r1, #0]
 800c808:	f04f 30ff 	movhi.w	r0, #4294967295
 800c80c:	bf98      	it	ls
 800c80e:	2001      	movls	r0, #1
 800c810:	4770      	bx	lr
 800c812:	4608      	mov	r0, r1
 800c814:	4770      	bx	lr
	...

0800c818 <__assert_func>:
 800c818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c81a:	4614      	mov	r4, r2
 800c81c:	461a      	mov	r2, r3
 800c81e:	4b09      	ldr	r3, [pc, #36]	; (800c844 <__assert_func+0x2c>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4605      	mov	r5, r0
 800c824:	68d8      	ldr	r0, [r3, #12]
 800c826:	b14c      	cbz	r4, 800c83c <__assert_func+0x24>
 800c828:	4b07      	ldr	r3, [pc, #28]	; (800c848 <__assert_func+0x30>)
 800c82a:	9100      	str	r1, [sp, #0]
 800c82c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c830:	4906      	ldr	r1, [pc, #24]	; (800c84c <__assert_func+0x34>)
 800c832:	462b      	mov	r3, r5
 800c834:	f000 f80e 	bl	800c854 <fiprintf>
 800c838:	f000 fa84 	bl	800cd44 <abort>
 800c83c:	4b04      	ldr	r3, [pc, #16]	; (800c850 <__assert_func+0x38>)
 800c83e:	461c      	mov	r4, r3
 800c840:	e7f3      	b.n	800c82a <__assert_func+0x12>
 800c842:	bf00      	nop
 800c844:	20000010 	.word	0x20000010
 800c848:	0800d915 	.word	0x0800d915
 800c84c:	0800d922 	.word	0x0800d922
 800c850:	0800d950 	.word	0x0800d950

0800c854 <fiprintf>:
 800c854:	b40e      	push	{r1, r2, r3}
 800c856:	b503      	push	{r0, r1, lr}
 800c858:	4601      	mov	r1, r0
 800c85a:	ab03      	add	r3, sp, #12
 800c85c:	4805      	ldr	r0, [pc, #20]	; (800c874 <fiprintf+0x20>)
 800c85e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c862:	6800      	ldr	r0, [r0, #0]
 800c864:	9301      	str	r3, [sp, #4]
 800c866:	f000 f87d 	bl	800c964 <_vfiprintf_r>
 800c86a:	b002      	add	sp, #8
 800c86c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c870:	b003      	add	sp, #12
 800c872:	4770      	bx	lr
 800c874:	20000010 	.word	0x20000010

0800c878 <memmove>:
 800c878:	4288      	cmp	r0, r1
 800c87a:	b510      	push	{r4, lr}
 800c87c:	eb01 0402 	add.w	r4, r1, r2
 800c880:	d902      	bls.n	800c888 <memmove+0x10>
 800c882:	4284      	cmp	r4, r0
 800c884:	4623      	mov	r3, r4
 800c886:	d807      	bhi.n	800c898 <memmove+0x20>
 800c888:	1e43      	subs	r3, r0, #1
 800c88a:	42a1      	cmp	r1, r4
 800c88c:	d008      	beq.n	800c8a0 <memmove+0x28>
 800c88e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c892:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c896:	e7f8      	b.n	800c88a <memmove+0x12>
 800c898:	4402      	add	r2, r0
 800c89a:	4601      	mov	r1, r0
 800c89c:	428a      	cmp	r2, r1
 800c89e:	d100      	bne.n	800c8a2 <memmove+0x2a>
 800c8a0:	bd10      	pop	{r4, pc}
 800c8a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8aa:	e7f7      	b.n	800c89c <memmove+0x24>

0800c8ac <__malloc_lock>:
 800c8ac:	4801      	ldr	r0, [pc, #4]	; (800c8b4 <__malloc_lock+0x8>)
 800c8ae:	f000 bc09 	b.w	800d0c4 <__retarget_lock_acquire_recursive>
 800c8b2:	bf00      	nop
 800c8b4:	20004d78 	.word	0x20004d78

0800c8b8 <__malloc_unlock>:
 800c8b8:	4801      	ldr	r0, [pc, #4]	; (800c8c0 <__malloc_unlock+0x8>)
 800c8ba:	f000 bc04 	b.w	800d0c6 <__retarget_lock_release_recursive>
 800c8be:	bf00      	nop
 800c8c0:	20004d78 	.word	0x20004d78

0800c8c4 <_realloc_r>:
 800c8c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c6:	4607      	mov	r7, r0
 800c8c8:	4614      	mov	r4, r2
 800c8ca:	460e      	mov	r6, r1
 800c8cc:	b921      	cbnz	r1, 800c8d8 <_realloc_r+0x14>
 800c8ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c8d2:	4611      	mov	r1, r2
 800c8d4:	f7ff bdb0 	b.w	800c438 <_malloc_r>
 800c8d8:	b922      	cbnz	r2, 800c8e4 <_realloc_r+0x20>
 800c8da:	f7ff fd5d 	bl	800c398 <_free_r>
 800c8de:	4625      	mov	r5, r4
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8e4:	f000 fc54 	bl	800d190 <_malloc_usable_size_r>
 800c8e8:	42a0      	cmp	r0, r4
 800c8ea:	d20f      	bcs.n	800c90c <_realloc_r+0x48>
 800c8ec:	4621      	mov	r1, r4
 800c8ee:	4638      	mov	r0, r7
 800c8f0:	f7ff fda2 	bl	800c438 <_malloc_r>
 800c8f4:	4605      	mov	r5, r0
 800c8f6:	2800      	cmp	r0, #0
 800c8f8:	d0f2      	beq.n	800c8e0 <_realloc_r+0x1c>
 800c8fa:	4631      	mov	r1, r6
 800c8fc:	4622      	mov	r2, r4
 800c8fe:	f7fc f90f 	bl	8008b20 <memcpy>
 800c902:	4631      	mov	r1, r6
 800c904:	4638      	mov	r0, r7
 800c906:	f7ff fd47 	bl	800c398 <_free_r>
 800c90a:	e7e9      	b.n	800c8e0 <_realloc_r+0x1c>
 800c90c:	4635      	mov	r5, r6
 800c90e:	e7e7      	b.n	800c8e0 <_realloc_r+0x1c>

0800c910 <__sfputc_r>:
 800c910:	6893      	ldr	r3, [r2, #8]
 800c912:	3b01      	subs	r3, #1
 800c914:	2b00      	cmp	r3, #0
 800c916:	b410      	push	{r4}
 800c918:	6093      	str	r3, [r2, #8]
 800c91a:	da08      	bge.n	800c92e <__sfputc_r+0x1e>
 800c91c:	6994      	ldr	r4, [r2, #24]
 800c91e:	42a3      	cmp	r3, r4
 800c920:	db01      	blt.n	800c926 <__sfputc_r+0x16>
 800c922:	290a      	cmp	r1, #10
 800c924:	d103      	bne.n	800c92e <__sfputc_r+0x1e>
 800c926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c92a:	f000 b94b 	b.w	800cbc4 <__swbuf_r>
 800c92e:	6813      	ldr	r3, [r2, #0]
 800c930:	1c58      	adds	r0, r3, #1
 800c932:	6010      	str	r0, [r2, #0]
 800c934:	7019      	strb	r1, [r3, #0]
 800c936:	4608      	mov	r0, r1
 800c938:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c93c:	4770      	bx	lr

0800c93e <__sfputs_r>:
 800c93e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c940:	4606      	mov	r6, r0
 800c942:	460f      	mov	r7, r1
 800c944:	4614      	mov	r4, r2
 800c946:	18d5      	adds	r5, r2, r3
 800c948:	42ac      	cmp	r4, r5
 800c94a:	d101      	bne.n	800c950 <__sfputs_r+0x12>
 800c94c:	2000      	movs	r0, #0
 800c94e:	e007      	b.n	800c960 <__sfputs_r+0x22>
 800c950:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c954:	463a      	mov	r2, r7
 800c956:	4630      	mov	r0, r6
 800c958:	f7ff ffda 	bl	800c910 <__sfputc_r>
 800c95c:	1c43      	adds	r3, r0, #1
 800c95e:	d1f3      	bne.n	800c948 <__sfputs_r+0xa>
 800c960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c964 <_vfiprintf_r>:
 800c964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c968:	460d      	mov	r5, r1
 800c96a:	b09d      	sub	sp, #116	; 0x74
 800c96c:	4614      	mov	r4, r2
 800c96e:	4698      	mov	r8, r3
 800c970:	4606      	mov	r6, r0
 800c972:	b118      	cbz	r0, 800c97c <_vfiprintf_r+0x18>
 800c974:	6983      	ldr	r3, [r0, #24]
 800c976:	b90b      	cbnz	r3, 800c97c <_vfiprintf_r+0x18>
 800c978:	f000 fb06 	bl	800cf88 <__sinit>
 800c97c:	4b89      	ldr	r3, [pc, #548]	; (800cba4 <_vfiprintf_r+0x240>)
 800c97e:	429d      	cmp	r5, r3
 800c980:	d11b      	bne.n	800c9ba <_vfiprintf_r+0x56>
 800c982:	6875      	ldr	r5, [r6, #4]
 800c984:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c986:	07d9      	lsls	r1, r3, #31
 800c988:	d405      	bmi.n	800c996 <_vfiprintf_r+0x32>
 800c98a:	89ab      	ldrh	r3, [r5, #12]
 800c98c:	059a      	lsls	r2, r3, #22
 800c98e:	d402      	bmi.n	800c996 <_vfiprintf_r+0x32>
 800c990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c992:	f000 fb97 	bl	800d0c4 <__retarget_lock_acquire_recursive>
 800c996:	89ab      	ldrh	r3, [r5, #12]
 800c998:	071b      	lsls	r3, r3, #28
 800c99a:	d501      	bpl.n	800c9a0 <_vfiprintf_r+0x3c>
 800c99c:	692b      	ldr	r3, [r5, #16]
 800c99e:	b9eb      	cbnz	r3, 800c9dc <_vfiprintf_r+0x78>
 800c9a0:	4629      	mov	r1, r5
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	f000 f960 	bl	800cc68 <__swsetup_r>
 800c9a8:	b1c0      	cbz	r0, 800c9dc <_vfiprintf_r+0x78>
 800c9aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9ac:	07dc      	lsls	r4, r3, #31
 800c9ae:	d50e      	bpl.n	800c9ce <_vfiprintf_r+0x6a>
 800c9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b4:	b01d      	add	sp, #116	; 0x74
 800c9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ba:	4b7b      	ldr	r3, [pc, #492]	; (800cba8 <_vfiprintf_r+0x244>)
 800c9bc:	429d      	cmp	r5, r3
 800c9be:	d101      	bne.n	800c9c4 <_vfiprintf_r+0x60>
 800c9c0:	68b5      	ldr	r5, [r6, #8]
 800c9c2:	e7df      	b.n	800c984 <_vfiprintf_r+0x20>
 800c9c4:	4b79      	ldr	r3, [pc, #484]	; (800cbac <_vfiprintf_r+0x248>)
 800c9c6:	429d      	cmp	r5, r3
 800c9c8:	bf08      	it	eq
 800c9ca:	68f5      	ldreq	r5, [r6, #12]
 800c9cc:	e7da      	b.n	800c984 <_vfiprintf_r+0x20>
 800c9ce:	89ab      	ldrh	r3, [r5, #12]
 800c9d0:	0598      	lsls	r0, r3, #22
 800c9d2:	d4ed      	bmi.n	800c9b0 <_vfiprintf_r+0x4c>
 800c9d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9d6:	f000 fb76 	bl	800d0c6 <__retarget_lock_release_recursive>
 800c9da:	e7e9      	b.n	800c9b0 <_vfiprintf_r+0x4c>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	9309      	str	r3, [sp, #36]	; 0x24
 800c9e0:	2320      	movs	r3, #32
 800c9e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9ea:	2330      	movs	r3, #48	; 0x30
 800c9ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cbb0 <_vfiprintf_r+0x24c>
 800c9f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9f4:	f04f 0901 	mov.w	r9, #1
 800c9f8:	4623      	mov	r3, r4
 800c9fa:	469a      	mov	sl, r3
 800c9fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca00:	b10a      	cbz	r2, 800ca06 <_vfiprintf_r+0xa2>
 800ca02:	2a25      	cmp	r2, #37	; 0x25
 800ca04:	d1f9      	bne.n	800c9fa <_vfiprintf_r+0x96>
 800ca06:	ebba 0b04 	subs.w	fp, sl, r4
 800ca0a:	d00b      	beq.n	800ca24 <_vfiprintf_r+0xc0>
 800ca0c:	465b      	mov	r3, fp
 800ca0e:	4622      	mov	r2, r4
 800ca10:	4629      	mov	r1, r5
 800ca12:	4630      	mov	r0, r6
 800ca14:	f7ff ff93 	bl	800c93e <__sfputs_r>
 800ca18:	3001      	adds	r0, #1
 800ca1a:	f000 80aa 	beq.w	800cb72 <_vfiprintf_r+0x20e>
 800ca1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca20:	445a      	add	r2, fp
 800ca22:	9209      	str	r2, [sp, #36]	; 0x24
 800ca24:	f89a 3000 	ldrb.w	r3, [sl]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	f000 80a2 	beq.w	800cb72 <_vfiprintf_r+0x20e>
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f04f 32ff 	mov.w	r2, #4294967295
 800ca34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca38:	f10a 0a01 	add.w	sl, sl, #1
 800ca3c:	9304      	str	r3, [sp, #16]
 800ca3e:	9307      	str	r3, [sp, #28]
 800ca40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca44:	931a      	str	r3, [sp, #104]	; 0x68
 800ca46:	4654      	mov	r4, sl
 800ca48:	2205      	movs	r2, #5
 800ca4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca4e:	4858      	ldr	r0, [pc, #352]	; (800cbb0 <_vfiprintf_r+0x24c>)
 800ca50:	f7f3 fbc6 	bl	80001e0 <memchr>
 800ca54:	9a04      	ldr	r2, [sp, #16]
 800ca56:	b9d8      	cbnz	r0, 800ca90 <_vfiprintf_r+0x12c>
 800ca58:	06d1      	lsls	r1, r2, #27
 800ca5a:	bf44      	itt	mi
 800ca5c:	2320      	movmi	r3, #32
 800ca5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca62:	0713      	lsls	r3, r2, #28
 800ca64:	bf44      	itt	mi
 800ca66:	232b      	movmi	r3, #43	; 0x2b
 800ca68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ca70:	2b2a      	cmp	r3, #42	; 0x2a
 800ca72:	d015      	beq.n	800caa0 <_vfiprintf_r+0x13c>
 800ca74:	9a07      	ldr	r2, [sp, #28]
 800ca76:	4654      	mov	r4, sl
 800ca78:	2000      	movs	r0, #0
 800ca7a:	f04f 0c0a 	mov.w	ip, #10
 800ca7e:	4621      	mov	r1, r4
 800ca80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca84:	3b30      	subs	r3, #48	; 0x30
 800ca86:	2b09      	cmp	r3, #9
 800ca88:	d94e      	bls.n	800cb28 <_vfiprintf_r+0x1c4>
 800ca8a:	b1b0      	cbz	r0, 800caba <_vfiprintf_r+0x156>
 800ca8c:	9207      	str	r2, [sp, #28]
 800ca8e:	e014      	b.n	800caba <_vfiprintf_r+0x156>
 800ca90:	eba0 0308 	sub.w	r3, r0, r8
 800ca94:	fa09 f303 	lsl.w	r3, r9, r3
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	9304      	str	r3, [sp, #16]
 800ca9c:	46a2      	mov	sl, r4
 800ca9e:	e7d2      	b.n	800ca46 <_vfiprintf_r+0xe2>
 800caa0:	9b03      	ldr	r3, [sp, #12]
 800caa2:	1d19      	adds	r1, r3, #4
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	9103      	str	r1, [sp, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	bfbb      	ittet	lt
 800caac:	425b      	neglt	r3, r3
 800caae:	f042 0202 	orrlt.w	r2, r2, #2
 800cab2:	9307      	strge	r3, [sp, #28]
 800cab4:	9307      	strlt	r3, [sp, #28]
 800cab6:	bfb8      	it	lt
 800cab8:	9204      	strlt	r2, [sp, #16]
 800caba:	7823      	ldrb	r3, [r4, #0]
 800cabc:	2b2e      	cmp	r3, #46	; 0x2e
 800cabe:	d10c      	bne.n	800cada <_vfiprintf_r+0x176>
 800cac0:	7863      	ldrb	r3, [r4, #1]
 800cac2:	2b2a      	cmp	r3, #42	; 0x2a
 800cac4:	d135      	bne.n	800cb32 <_vfiprintf_r+0x1ce>
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	1d1a      	adds	r2, r3, #4
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	9203      	str	r2, [sp, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	bfb8      	it	lt
 800cad2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cad6:	3402      	adds	r4, #2
 800cad8:	9305      	str	r3, [sp, #20]
 800cada:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cbc0 <_vfiprintf_r+0x25c>
 800cade:	7821      	ldrb	r1, [r4, #0]
 800cae0:	2203      	movs	r2, #3
 800cae2:	4650      	mov	r0, sl
 800cae4:	f7f3 fb7c 	bl	80001e0 <memchr>
 800cae8:	b140      	cbz	r0, 800cafc <_vfiprintf_r+0x198>
 800caea:	2340      	movs	r3, #64	; 0x40
 800caec:	eba0 000a 	sub.w	r0, r0, sl
 800caf0:	fa03 f000 	lsl.w	r0, r3, r0
 800caf4:	9b04      	ldr	r3, [sp, #16]
 800caf6:	4303      	orrs	r3, r0
 800caf8:	3401      	adds	r4, #1
 800cafa:	9304      	str	r3, [sp, #16]
 800cafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb00:	482c      	ldr	r0, [pc, #176]	; (800cbb4 <_vfiprintf_r+0x250>)
 800cb02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb06:	2206      	movs	r2, #6
 800cb08:	f7f3 fb6a 	bl	80001e0 <memchr>
 800cb0c:	2800      	cmp	r0, #0
 800cb0e:	d03f      	beq.n	800cb90 <_vfiprintf_r+0x22c>
 800cb10:	4b29      	ldr	r3, [pc, #164]	; (800cbb8 <_vfiprintf_r+0x254>)
 800cb12:	bb1b      	cbnz	r3, 800cb5c <_vfiprintf_r+0x1f8>
 800cb14:	9b03      	ldr	r3, [sp, #12]
 800cb16:	3307      	adds	r3, #7
 800cb18:	f023 0307 	bic.w	r3, r3, #7
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	9303      	str	r3, [sp, #12]
 800cb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb22:	443b      	add	r3, r7
 800cb24:	9309      	str	r3, [sp, #36]	; 0x24
 800cb26:	e767      	b.n	800c9f8 <_vfiprintf_r+0x94>
 800cb28:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb2c:	460c      	mov	r4, r1
 800cb2e:	2001      	movs	r0, #1
 800cb30:	e7a5      	b.n	800ca7e <_vfiprintf_r+0x11a>
 800cb32:	2300      	movs	r3, #0
 800cb34:	3401      	adds	r4, #1
 800cb36:	9305      	str	r3, [sp, #20]
 800cb38:	4619      	mov	r1, r3
 800cb3a:	f04f 0c0a 	mov.w	ip, #10
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb44:	3a30      	subs	r2, #48	; 0x30
 800cb46:	2a09      	cmp	r2, #9
 800cb48:	d903      	bls.n	800cb52 <_vfiprintf_r+0x1ee>
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d0c5      	beq.n	800cada <_vfiprintf_r+0x176>
 800cb4e:	9105      	str	r1, [sp, #20]
 800cb50:	e7c3      	b.n	800cada <_vfiprintf_r+0x176>
 800cb52:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb56:	4604      	mov	r4, r0
 800cb58:	2301      	movs	r3, #1
 800cb5a:	e7f0      	b.n	800cb3e <_vfiprintf_r+0x1da>
 800cb5c:	ab03      	add	r3, sp, #12
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	462a      	mov	r2, r5
 800cb62:	4b16      	ldr	r3, [pc, #88]	; (800cbbc <_vfiprintf_r+0x258>)
 800cb64:	a904      	add	r1, sp, #16
 800cb66:	4630      	mov	r0, r6
 800cb68:	f7fc f890 	bl	8008c8c <_printf_float>
 800cb6c:	4607      	mov	r7, r0
 800cb6e:	1c78      	adds	r0, r7, #1
 800cb70:	d1d6      	bne.n	800cb20 <_vfiprintf_r+0x1bc>
 800cb72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb74:	07d9      	lsls	r1, r3, #31
 800cb76:	d405      	bmi.n	800cb84 <_vfiprintf_r+0x220>
 800cb78:	89ab      	ldrh	r3, [r5, #12]
 800cb7a:	059a      	lsls	r2, r3, #22
 800cb7c:	d402      	bmi.n	800cb84 <_vfiprintf_r+0x220>
 800cb7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb80:	f000 faa1 	bl	800d0c6 <__retarget_lock_release_recursive>
 800cb84:	89ab      	ldrh	r3, [r5, #12]
 800cb86:	065b      	lsls	r3, r3, #25
 800cb88:	f53f af12 	bmi.w	800c9b0 <_vfiprintf_r+0x4c>
 800cb8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb8e:	e711      	b.n	800c9b4 <_vfiprintf_r+0x50>
 800cb90:	ab03      	add	r3, sp, #12
 800cb92:	9300      	str	r3, [sp, #0]
 800cb94:	462a      	mov	r2, r5
 800cb96:	4b09      	ldr	r3, [pc, #36]	; (800cbbc <_vfiprintf_r+0x258>)
 800cb98:	a904      	add	r1, sp, #16
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	f7fc fb1a 	bl	80091d4 <_printf_i>
 800cba0:	e7e4      	b.n	800cb6c <_vfiprintf_r+0x208>
 800cba2:	bf00      	nop
 800cba4:	0800d974 	.word	0x0800d974
 800cba8:	0800d994 	.word	0x0800d994
 800cbac:	0800d954 	.word	0x0800d954
 800cbb0:	0800d904 	.word	0x0800d904
 800cbb4:	0800d90e 	.word	0x0800d90e
 800cbb8:	08008c8d 	.word	0x08008c8d
 800cbbc:	0800c93f 	.word	0x0800c93f
 800cbc0:	0800d90a 	.word	0x0800d90a

0800cbc4 <__swbuf_r>:
 800cbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbc6:	460e      	mov	r6, r1
 800cbc8:	4614      	mov	r4, r2
 800cbca:	4605      	mov	r5, r0
 800cbcc:	b118      	cbz	r0, 800cbd6 <__swbuf_r+0x12>
 800cbce:	6983      	ldr	r3, [r0, #24]
 800cbd0:	b90b      	cbnz	r3, 800cbd6 <__swbuf_r+0x12>
 800cbd2:	f000 f9d9 	bl	800cf88 <__sinit>
 800cbd6:	4b21      	ldr	r3, [pc, #132]	; (800cc5c <__swbuf_r+0x98>)
 800cbd8:	429c      	cmp	r4, r3
 800cbda:	d12b      	bne.n	800cc34 <__swbuf_r+0x70>
 800cbdc:	686c      	ldr	r4, [r5, #4]
 800cbde:	69a3      	ldr	r3, [r4, #24]
 800cbe0:	60a3      	str	r3, [r4, #8]
 800cbe2:	89a3      	ldrh	r3, [r4, #12]
 800cbe4:	071a      	lsls	r2, r3, #28
 800cbe6:	d52f      	bpl.n	800cc48 <__swbuf_r+0x84>
 800cbe8:	6923      	ldr	r3, [r4, #16]
 800cbea:	b36b      	cbz	r3, 800cc48 <__swbuf_r+0x84>
 800cbec:	6923      	ldr	r3, [r4, #16]
 800cbee:	6820      	ldr	r0, [r4, #0]
 800cbf0:	1ac0      	subs	r0, r0, r3
 800cbf2:	6963      	ldr	r3, [r4, #20]
 800cbf4:	b2f6      	uxtb	r6, r6
 800cbf6:	4283      	cmp	r3, r0
 800cbf8:	4637      	mov	r7, r6
 800cbfa:	dc04      	bgt.n	800cc06 <__swbuf_r+0x42>
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	4628      	mov	r0, r5
 800cc00:	f000 f92e 	bl	800ce60 <_fflush_r>
 800cc04:	bb30      	cbnz	r0, 800cc54 <__swbuf_r+0x90>
 800cc06:	68a3      	ldr	r3, [r4, #8]
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	60a3      	str	r3, [r4, #8]
 800cc0c:	6823      	ldr	r3, [r4, #0]
 800cc0e:	1c5a      	adds	r2, r3, #1
 800cc10:	6022      	str	r2, [r4, #0]
 800cc12:	701e      	strb	r6, [r3, #0]
 800cc14:	6963      	ldr	r3, [r4, #20]
 800cc16:	3001      	adds	r0, #1
 800cc18:	4283      	cmp	r3, r0
 800cc1a:	d004      	beq.n	800cc26 <__swbuf_r+0x62>
 800cc1c:	89a3      	ldrh	r3, [r4, #12]
 800cc1e:	07db      	lsls	r3, r3, #31
 800cc20:	d506      	bpl.n	800cc30 <__swbuf_r+0x6c>
 800cc22:	2e0a      	cmp	r6, #10
 800cc24:	d104      	bne.n	800cc30 <__swbuf_r+0x6c>
 800cc26:	4621      	mov	r1, r4
 800cc28:	4628      	mov	r0, r5
 800cc2a:	f000 f919 	bl	800ce60 <_fflush_r>
 800cc2e:	b988      	cbnz	r0, 800cc54 <__swbuf_r+0x90>
 800cc30:	4638      	mov	r0, r7
 800cc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc34:	4b0a      	ldr	r3, [pc, #40]	; (800cc60 <__swbuf_r+0x9c>)
 800cc36:	429c      	cmp	r4, r3
 800cc38:	d101      	bne.n	800cc3e <__swbuf_r+0x7a>
 800cc3a:	68ac      	ldr	r4, [r5, #8]
 800cc3c:	e7cf      	b.n	800cbde <__swbuf_r+0x1a>
 800cc3e:	4b09      	ldr	r3, [pc, #36]	; (800cc64 <__swbuf_r+0xa0>)
 800cc40:	429c      	cmp	r4, r3
 800cc42:	bf08      	it	eq
 800cc44:	68ec      	ldreq	r4, [r5, #12]
 800cc46:	e7ca      	b.n	800cbde <__swbuf_r+0x1a>
 800cc48:	4621      	mov	r1, r4
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	f000 f80c 	bl	800cc68 <__swsetup_r>
 800cc50:	2800      	cmp	r0, #0
 800cc52:	d0cb      	beq.n	800cbec <__swbuf_r+0x28>
 800cc54:	f04f 37ff 	mov.w	r7, #4294967295
 800cc58:	e7ea      	b.n	800cc30 <__swbuf_r+0x6c>
 800cc5a:	bf00      	nop
 800cc5c:	0800d974 	.word	0x0800d974
 800cc60:	0800d994 	.word	0x0800d994
 800cc64:	0800d954 	.word	0x0800d954

0800cc68 <__swsetup_r>:
 800cc68:	4b32      	ldr	r3, [pc, #200]	; (800cd34 <__swsetup_r+0xcc>)
 800cc6a:	b570      	push	{r4, r5, r6, lr}
 800cc6c:	681d      	ldr	r5, [r3, #0]
 800cc6e:	4606      	mov	r6, r0
 800cc70:	460c      	mov	r4, r1
 800cc72:	b125      	cbz	r5, 800cc7e <__swsetup_r+0x16>
 800cc74:	69ab      	ldr	r3, [r5, #24]
 800cc76:	b913      	cbnz	r3, 800cc7e <__swsetup_r+0x16>
 800cc78:	4628      	mov	r0, r5
 800cc7a:	f000 f985 	bl	800cf88 <__sinit>
 800cc7e:	4b2e      	ldr	r3, [pc, #184]	; (800cd38 <__swsetup_r+0xd0>)
 800cc80:	429c      	cmp	r4, r3
 800cc82:	d10f      	bne.n	800cca4 <__swsetup_r+0x3c>
 800cc84:	686c      	ldr	r4, [r5, #4]
 800cc86:	89a3      	ldrh	r3, [r4, #12]
 800cc88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc8c:	0719      	lsls	r1, r3, #28
 800cc8e:	d42c      	bmi.n	800ccea <__swsetup_r+0x82>
 800cc90:	06dd      	lsls	r5, r3, #27
 800cc92:	d411      	bmi.n	800ccb8 <__swsetup_r+0x50>
 800cc94:	2309      	movs	r3, #9
 800cc96:	6033      	str	r3, [r6, #0]
 800cc98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc9c:	81a3      	strh	r3, [r4, #12]
 800cc9e:	f04f 30ff 	mov.w	r0, #4294967295
 800cca2:	e03e      	b.n	800cd22 <__swsetup_r+0xba>
 800cca4:	4b25      	ldr	r3, [pc, #148]	; (800cd3c <__swsetup_r+0xd4>)
 800cca6:	429c      	cmp	r4, r3
 800cca8:	d101      	bne.n	800ccae <__swsetup_r+0x46>
 800ccaa:	68ac      	ldr	r4, [r5, #8]
 800ccac:	e7eb      	b.n	800cc86 <__swsetup_r+0x1e>
 800ccae:	4b24      	ldr	r3, [pc, #144]	; (800cd40 <__swsetup_r+0xd8>)
 800ccb0:	429c      	cmp	r4, r3
 800ccb2:	bf08      	it	eq
 800ccb4:	68ec      	ldreq	r4, [r5, #12]
 800ccb6:	e7e6      	b.n	800cc86 <__swsetup_r+0x1e>
 800ccb8:	0758      	lsls	r0, r3, #29
 800ccba:	d512      	bpl.n	800cce2 <__swsetup_r+0x7a>
 800ccbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccbe:	b141      	cbz	r1, 800ccd2 <__swsetup_r+0x6a>
 800ccc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccc4:	4299      	cmp	r1, r3
 800ccc6:	d002      	beq.n	800ccce <__swsetup_r+0x66>
 800ccc8:	4630      	mov	r0, r6
 800ccca:	f7ff fb65 	bl	800c398 <_free_r>
 800ccce:	2300      	movs	r3, #0
 800ccd0:	6363      	str	r3, [r4, #52]	; 0x34
 800ccd2:	89a3      	ldrh	r3, [r4, #12]
 800ccd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ccd8:	81a3      	strh	r3, [r4, #12]
 800ccda:	2300      	movs	r3, #0
 800ccdc:	6063      	str	r3, [r4, #4]
 800ccde:	6923      	ldr	r3, [r4, #16]
 800cce0:	6023      	str	r3, [r4, #0]
 800cce2:	89a3      	ldrh	r3, [r4, #12]
 800cce4:	f043 0308 	orr.w	r3, r3, #8
 800cce8:	81a3      	strh	r3, [r4, #12]
 800ccea:	6923      	ldr	r3, [r4, #16]
 800ccec:	b94b      	cbnz	r3, 800cd02 <__swsetup_r+0x9a>
 800ccee:	89a3      	ldrh	r3, [r4, #12]
 800ccf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ccf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccf8:	d003      	beq.n	800cd02 <__swsetup_r+0x9a>
 800ccfa:	4621      	mov	r1, r4
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	f000 fa07 	bl	800d110 <__smakebuf_r>
 800cd02:	89a0      	ldrh	r0, [r4, #12]
 800cd04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd08:	f010 0301 	ands.w	r3, r0, #1
 800cd0c:	d00a      	beq.n	800cd24 <__swsetup_r+0xbc>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60a3      	str	r3, [r4, #8]
 800cd12:	6963      	ldr	r3, [r4, #20]
 800cd14:	425b      	negs	r3, r3
 800cd16:	61a3      	str	r3, [r4, #24]
 800cd18:	6923      	ldr	r3, [r4, #16]
 800cd1a:	b943      	cbnz	r3, 800cd2e <__swsetup_r+0xc6>
 800cd1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd20:	d1ba      	bne.n	800cc98 <__swsetup_r+0x30>
 800cd22:	bd70      	pop	{r4, r5, r6, pc}
 800cd24:	0781      	lsls	r1, r0, #30
 800cd26:	bf58      	it	pl
 800cd28:	6963      	ldrpl	r3, [r4, #20]
 800cd2a:	60a3      	str	r3, [r4, #8]
 800cd2c:	e7f4      	b.n	800cd18 <__swsetup_r+0xb0>
 800cd2e:	2000      	movs	r0, #0
 800cd30:	e7f7      	b.n	800cd22 <__swsetup_r+0xba>
 800cd32:	bf00      	nop
 800cd34:	20000010 	.word	0x20000010
 800cd38:	0800d974 	.word	0x0800d974
 800cd3c:	0800d994 	.word	0x0800d994
 800cd40:	0800d954 	.word	0x0800d954

0800cd44 <abort>:
 800cd44:	b508      	push	{r3, lr}
 800cd46:	2006      	movs	r0, #6
 800cd48:	f000 fa52 	bl	800d1f0 <raise>
 800cd4c:	2001      	movs	r0, #1
 800cd4e:	f7f6 ff95 	bl	8003c7c <_exit>
	...

0800cd54 <__sflush_r>:
 800cd54:	898a      	ldrh	r2, [r1, #12]
 800cd56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd5a:	4605      	mov	r5, r0
 800cd5c:	0710      	lsls	r0, r2, #28
 800cd5e:	460c      	mov	r4, r1
 800cd60:	d458      	bmi.n	800ce14 <__sflush_r+0xc0>
 800cd62:	684b      	ldr	r3, [r1, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	dc05      	bgt.n	800cd74 <__sflush_r+0x20>
 800cd68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	dc02      	bgt.n	800cd74 <__sflush_r+0x20>
 800cd6e:	2000      	movs	r0, #0
 800cd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd76:	2e00      	cmp	r6, #0
 800cd78:	d0f9      	beq.n	800cd6e <__sflush_r+0x1a>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd80:	682f      	ldr	r7, [r5, #0]
 800cd82:	602b      	str	r3, [r5, #0]
 800cd84:	d032      	beq.n	800cdec <__sflush_r+0x98>
 800cd86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd88:	89a3      	ldrh	r3, [r4, #12]
 800cd8a:	075a      	lsls	r2, r3, #29
 800cd8c:	d505      	bpl.n	800cd9a <__sflush_r+0x46>
 800cd8e:	6863      	ldr	r3, [r4, #4]
 800cd90:	1ac0      	subs	r0, r0, r3
 800cd92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd94:	b10b      	cbz	r3, 800cd9a <__sflush_r+0x46>
 800cd96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd98:	1ac0      	subs	r0, r0, r3
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cda0:	6a21      	ldr	r1, [r4, #32]
 800cda2:	4628      	mov	r0, r5
 800cda4:	47b0      	blx	r6
 800cda6:	1c43      	adds	r3, r0, #1
 800cda8:	89a3      	ldrh	r3, [r4, #12]
 800cdaa:	d106      	bne.n	800cdba <__sflush_r+0x66>
 800cdac:	6829      	ldr	r1, [r5, #0]
 800cdae:	291d      	cmp	r1, #29
 800cdb0:	d82c      	bhi.n	800ce0c <__sflush_r+0xb8>
 800cdb2:	4a2a      	ldr	r2, [pc, #168]	; (800ce5c <__sflush_r+0x108>)
 800cdb4:	40ca      	lsrs	r2, r1
 800cdb6:	07d6      	lsls	r6, r2, #31
 800cdb8:	d528      	bpl.n	800ce0c <__sflush_r+0xb8>
 800cdba:	2200      	movs	r2, #0
 800cdbc:	6062      	str	r2, [r4, #4]
 800cdbe:	04d9      	lsls	r1, r3, #19
 800cdc0:	6922      	ldr	r2, [r4, #16]
 800cdc2:	6022      	str	r2, [r4, #0]
 800cdc4:	d504      	bpl.n	800cdd0 <__sflush_r+0x7c>
 800cdc6:	1c42      	adds	r2, r0, #1
 800cdc8:	d101      	bne.n	800cdce <__sflush_r+0x7a>
 800cdca:	682b      	ldr	r3, [r5, #0]
 800cdcc:	b903      	cbnz	r3, 800cdd0 <__sflush_r+0x7c>
 800cdce:	6560      	str	r0, [r4, #84]	; 0x54
 800cdd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdd2:	602f      	str	r7, [r5, #0]
 800cdd4:	2900      	cmp	r1, #0
 800cdd6:	d0ca      	beq.n	800cd6e <__sflush_r+0x1a>
 800cdd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cddc:	4299      	cmp	r1, r3
 800cdde:	d002      	beq.n	800cde6 <__sflush_r+0x92>
 800cde0:	4628      	mov	r0, r5
 800cde2:	f7ff fad9 	bl	800c398 <_free_r>
 800cde6:	2000      	movs	r0, #0
 800cde8:	6360      	str	r0, [r4, #52]	; 0x34
 800cdea:	e7c1      	b.n	800cd70 <__sflush_r+0x1c>
 800cdec:	6a21      	ldr	r1, [r4, #32]
 800cdee:	2301      	movs	r3, #1
 800cdf0:	4628      	mov	r0, r5
 800cdf2:	47b0      	blx	r6
 800cdf4:	1c41      	adds	r1, r0, #1
 800cdf6:	d1c7      	bne.n	800cd88 <__sflush_r+0x34>
 800cdf8:	682b      	ldr	r3, [r5, #0]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d0c4      	beq.n	800cd88 <__sflush_r+0x34>
 800cdfe:	2b1d      	cmp	r3, #29
 800ce00:	d001      	beq.n	800ce06 <__sflush_r+0xb2>
 800ce02:	2b16      	cmp	r3, #22
 800ce04:	d101      	bne.n	800ce0a <__sflush_r+0xb6>
 800ce06:	602f      	str	r7, [r5, #0]
 800ce08:	e7b1      	b.n	800cd6e <__sflush_r+0x1a>
 800ce0a:	89a3      	ldrh	r3, [r4, #12]
 800ce0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce10:	81a3      	strh	r3, [r4, #12]
 800ce12:	e7ad      	b.n	800cd70 <__sflush_r+0x1c>
 800ce14:	690f      	ldr	r7, [r1, #16]
 800ce16:	2f00      	cmp	r7, #0
 800ce18:	d0a9      	beq.n	800cd6e <__sflush_r+0x1a>
 800ce1a:	0793      	lsls	r3, r2, #30
 800ce1c:	680e      	ldr	r6, [r1, #0]
 800ce1e:	bf08      	it	eq
 800ce20:	694b      	ldreq	r3, [r1, #20]
 800ce22:	600f      	str	r7, [r1, #0]
 800ce24:	bf18      	it	ne
 800ce26:	2300      	movne	r3, #0
 800ce28:	eba6 0807 	sub.w	r8, r6, r7
 800ce2c:	608b      	str	r3, [r1, #8]
 800ce2e:	f1b8 0f00 	cmp.w	r8, #0
 800ce32:	dd9c      	ble.n	800cd6e <__sflush_r+0x1a>
 800ce34:	6a21      	ldr	r1, [r4, #32]
 800ce36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ce38:	4643      	mov	r3, r8
 800ce3a:	463a      	mov	r2, r7
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	47b0      	blx	r6
 800ce40:	2800      	cmp	r0, #0
 800ce42:	dc06      	bgt.n	800ce52 <__sflush_r+0xfe>
 800ce44:	89a3      	ldrh	r3, [r4, #12]
 800ce46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce4a:	81a3      	strh	r3, [r4, #12]
 800ce4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce50:	e78e      	b.n	800cd70 <__sflush_r+0x1c>
 800ce52:	4407      	add	r7, r0
 800ce54:	eba8 0800 	sub.w	r8, r8, r0
 800ce58:	e7e9      	b.n	800ce2e <__sflush_r+0xda>
 800ce5a:	bf00      	nop
 800ce5c:	20400001 	.word	0x20400001

0800ce60 <_fflush_r>:
 800ce60:	b538      	push	{r3, r4, r5, lr}
 800ce62:	690b      	ldr	r3, [r1, #16]
 800ce64:	4605      	mov	r5, r0
 800ce66:	460c      	mov	r4, r1
 800ce68:	b913      	cbnz	r3, 800ce70 <_fflush_r+0x10>
 800ce6a:	2500      	movs	r5, #0
 800ce6c:	4628      	mov	r0, r5
 800ce6e:	bd38      	pop	{r3, r4, r5, pc}
 800ce70:	b118      	cbz	r0, 800ce7a <_fflush_r+0x1a>
 800ce72:	6983      	ldr	r3, [r0, #24]
 800ce74:	b90b      	cbnz	r3, 800ce7a <_fflush_r+0x1a>
 800ce76:	f000 f887 	bl	800cf88 <__sinit>
 800ce7a:	4b14      	ldr	r3, [pc, #80]	; (800cecc <_fflush_r+0x6c>)
 800ce7c:	429c      	cmp	r4, r3
 800ce7e:	d11b      	bne.n	800ceb8 <_fflush_r+0x58>
 800ce80:	686c      	ldr	r4, [r5, #4]
 800ce82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d0ef      	beq.n	800ce6a <_fflush_r+0xa>
 800ce8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce8c:	07d0      	lsls	r0, r2, #31
 800ce8e:	d404      	bmi.n	800ce9a <_fflush_r+0x3a>
 800ce90:	0599      	lsls	r1, r3, #22
 800ce92:	d402      	bmi.n	800ce9a <_fflush_r+0x3a>
 800ce94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce96:	f000 f915 	bl	800d0c4 <__retarget_lock_acquire_recursive>
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	4621      	mov	r1, r4
 800ce9e:	f7ff ff59 	bl	800cd54 <__sflush_r>
 800cea2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cea4:	07da      	lsls	r2, r3, #31
 800cea6:	4605      	mov	r5, r0
 800cea8:	d4e0      	bmi.n	800ce6c <_fflush_r+0xc>
 800ceaa:	89a3      	ldrh	r3, [r4, #12]
 800ceac:	059b      	lsls	r3, r3, #22
 800ceae:	d4dd      	bmi.n	800ce6c <_fflush_r+0xc>
 800ceb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ceb2:	f000 f908 	bl	800d0c6 <__retarget_lock_release_recursive>
 800ceb6:	e7d9      	b.n	800ce6c <_fflush_r+0xc>
 800ceb8:	4b05      	ldr	r3, [pc, #20]	; (800ced0 <_fflush_r+0x70>)
 800ceba:	429c      	cmp	r4, r3
 800cebc:	d101      	bne.n	800cec2 <_fflush_r+0x62>
 800cebe:	68ac      	ldr	r4, [r5, #8]
 800cec0:	e7df      	b.n	800ce82 <_fflush_r+0x22>
 800cec2:	4b04      	ldr	r3, [pc, #16]	; (800ced4 <_fflush_r+0x74>)
 800cec4:	429c      	cmp	r4, r3
 800cec6:	bf08      	it	eq
 800cec8:	68ec      	ldreq	r4, [r5, #12]
 800ceca:	e7da      	b.n	800ce82 <_fflush_r+0x22>
 800cecc:	0800d974 	.word	0x0800d974
 800ced0:	0800d994 	.word	0x0800d994
 800ced4:	0800d954 	.word	0x0800d954

0800ced8 <std>:
 800ced8:	2300      	movs	r3, #0
 800ceda:	b510      	push	{r4, lr}
 800cedc:	4604      	mov	r4, r0
 800cede:	e9c0 3300 	strd	r3, r3, [r0]
 800cee2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cee6:	6083      	str	r3, [r0, #8]
 800cee8:	8181      	strh	r1, [r0, #12]
 800ceea:	6643      	str	r3, [r0, #100]	; 0x64
 800ceec:	81c2      	strh	r2, [r0, #14]
 800ceee:	6183      	str	r3, [r0, #24]
 800cef0:	4619      	mov	r1, r3
 800cef2:	2208      	movs	r2, #8
 800cef4:	305c      	adds	r0, #92	; 0x5c
 800cef6:	f7fb fe21 	bl	8008b3c <memset>
 800cefa:	4b05      	ldr	r3, [pc, #20]	; (800cf10 <std+0x38>)
 800cefc:	6263      	str	r3, [r4, #36]	; 0x24
 800cefe:	4b05      	ldr	r3, [pc, #20]	; (800cf14 <std+0x3c>)
 800cf00:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf02:	4b05      	ldr	r3, [pc, #20]	; (800cf18 <std+0x40>)
 800cf04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf06:	4b05      	ldr	r3, [pc, #20]	; (800cf1c <std+0x44>)
 800cf08:	6224      	str	r4, [r4, #32]
 800cf0a:	6323      	str	r3, [r4, #48]	; 0x30
 800cf0c:	bd10      	pop	{r4, pc}
 800cf0e:	bf00      	nop
 800cf10:	0800d229 	.word	0x0800d229
 800cf14:	0800d24b 	.word	0x0800d24b
 800cf18:	0800d283 	.word	0x0800d283
 800cf1c:	0800d2a7 	.word	0x0800d2a7

0800cf20 <_cleanup_r>:
 800cf20:	4901      	ldr	r1, [pc, #4]	; (800cf28 <_cleanup_r+0x8>)
 800cf22:	f000 b8af 	b.w	800d084 <_fwalk_reent>
 800cf26:	bf00      	nop
 800cf28:	0800ce61 	.word	0x0800ce61

0800cf2c <__sfmoreglue>:
 800cf2c:	b570      	push	{r4, r5, r6, lr}
 800cf2e:	1e4a      	subs	r2, r1, #1
 800cf30:	2568      	movs	r5, #104	; 0x68
 800cf32:	4355      	muls	r5, r2
 800cf34:	460e      	mov	r6, r1
 800cf36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cf3a:	f7ff fa7d 	bl	800c438 <_malloc_r>
 800cf3e:	4604      	mov	r4, r0
 800cf40:	b140      	cbz	r0, 800cf54 <__sfmoreglue+0x28>
 800cf42:	2100      	movs	r1, #0
 800cf44:	e9c0 1600 	strd	r1, r6, [r0]
 800cf48:	300c      	adds	r0, #12
 800cf4a:	60a0      	str	r0, [r4, #8]
 800cf4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cf50:	f7fb fdf4 	bl	8008b3c <memset>
 800cf54:	4620      	mov	r0, r4
 800cf56:	bd70      	pop	{r4, r5, r6, pc}

0800cf58 <__sfp_lock_acquire>:
 800cf58:	4801      	ldr	r0, [pc, #4]	; (800cf60 <__sfp_lock_acquire+0x8>)
 800cf5a:	f000 b8b3 	b.w	800d0c4 <__retarget_lock_acquire_recursive>
 800cf5e:	bf00      	nop
 800cf60:	20004d7c 	.word	0x20004d7c

0800cf64 <__sfp_lock_release>:
 800cf64:	4801      	ldr	r0, [pc, #4]	; (800cf6c <__sfp_lock_release+0x8>)
 800cf66:	f000 b8ae 	b.w	800d0c6 <__retarget_lock_release_recursive>
 800cf6a:	bf00      	nop
 800cf6c:	20004d7c 	.word	0x20004d7c

0800cf70 <__sinit_lock_acquire>:
 800cf70:	4801      	ldr	r0, [pc, #4]	; (800cf78 <__sinit_lock_acquire+0x8>)
 800cf72:	f000 b8a7 	b.w	800d0c4 <__retarget_lock_acquire_recursive>
 800cf76:	bf00      	nop
 800cf78:	20004d77 	.word	0x20004d77

0800cf7c <__sinit_lock_release>:
 800cf7c:	4801      	ldr	r0, [pc, #4]	; (800cf84 <__sinit_lock_release+0x8>)
 800cf7e:	f000 b8a2 	b.w	800d0c6 <__retarget_lock_release_recursive>
 800cf82:	bf00      	nop
 800cf84:	20004d77 	.word	0x20004d77

0800cf88 <__sinit>:
 800cf88:	b510      	push	{r4, lr}
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	f7ff fff0 	bl	800cf70 <__sinit_lock_acquire>
 800cf90:	69a3      	ldr	r3, [r4, #24]
 800cf92:	b11b      	cbz	r3, 800cf9c <__sinit+0x14>
 800cf94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf98:	f7ff bff0 	b.w	800cf7c <__sinit_lock_release>
 800cf9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cfa0:	6523      	str	r3, [r4, #80]	; 0x50
 800cfa2:	4b13      	ldr	r3, [pc, #76]	; (800cff0 <__sinit+0x68>)
 800cfa4:	4a13      	ldr	r2, [pc, #76]	; (800cff4 <__sinit+0x6c>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	62a2      	str	r2, [r4, #40]	; 0x28
 800cfaa:	42a3      	cmp	r3, r4
 800cfac:	bf04      	itt	eq
 800cfae:	2301      	moveq	r3, #1
 800cfb0:	61a3      	streq	r3, [r4, #24]
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	f000 f820 	bl	800cff8 <__sfp>
 800cfb8:	6060      	str	r0, [r4, #4]
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f000 f81c 	bl	800cff8 <__sfp>
 800cfc0:	60a0      	str	r0, [r4, #8]
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	f000 f818 	bl	800cff8 <__sfp>
 800cfc8:	2200      	movs	r2, #0
 800cfca:	60e0      	str	r0, [r4, #12]
 800cfcc:	2104      	movs	r1, #4
 800cfce:	6860      	ldr	r0, [r4, #4]
 800cfd0:	f7ff ff82 	bl	800ced8 <std>
 800cfd4:	68a0      	ldr	r0, [r4, #8]
 800cfd6:	2201      	movs	r2, #1
 800cfd8:	2109      	movs	r1, #9
 800cfda:	f7ff ff7d 	bl	800ced8 <std>
 800cfde:	68e0      	ldr	r0, [r4, #12]
 800cfe0:	2202      	movs	r2, #2
 800cfe2:	2112      	movs	r1, #18
 800cfe4:	f7ff ff78 	bl	800ced8 <std>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	61a3      	str	r3, [r4, #24]
 800cfec:	e7d2      	b.n	800cf94 <__sinit+0xc>
 800cfee:	bf00      	nop
 800cff0:	0800d500 	.word	0x0800d500
 800cff4:	0800cf21 	.word	0x0800cf21

0800cff8 <__sfp>:
 800cff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cffa:	4607      	mov	r7, r0
 800cffc:	f7ff ffac 	bl	800cf58 <__sfp_lock_acquire>
 800d000:	4b1e      	ldr	r3, [pc, #120]	; (800d07c <__sfp+0x84>)
 800d002:	681e      	ldr	r6, [r3, #0]
 800d004:	69b3      	ldr	r3, [r6, #24]
 800d006:	b913      	cbnz	r3, 800d00e <__sfp+0x16>
 800d008:	4630      	mov	r0, r6
 800d00a:	f7ff ffbd 	bl	800cf88 <__sinit>
 800d00e:	3648      	adds	r6, #72	; 0x48
 800d010:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d014:	3b01      	subs	r3, #1
 800d016:	d503      	bpl.n	800d020 <__sfp+0x28>
 800d018:	6833      	ldr	r3, [r6, #0]
 800d01a:	b30b      	cbz	r3, 800d060 <__sfp+0x68>
 800d01c:	6836      	ldr	r6, [r6, #0]
 800d01e:	e7f7      	b.n	800d010 <__sfp+0x18>
 800d020:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d024:	b9d5      	cbnz	r5, 800d05c <__sfp+0x64>
 800d026:	4b16      	ldr	r3, [pc, #88]	; (800d080 <__sfp+0x88>)
 800d028:	60e3      	str	r3, [r4, #12]
 800d02a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d02e:	6665      	str	r5, [r4, #100]	; 0x64
 800d030:	f000 f847 	bl	800d0c2 <__retarget_lock_init_recursive>
 800d034:	f7ff ff96 	bl	800cf64 <__sfp_lock_release>
 800d038:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d03c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d040:	6025      	str	r5, [r4, #0]
 800d042:	61a5      	str	r5, [r4, #24]
 800d044:	2208      	movs	r2, #8
 800d046:	4629      	mov	r1, r5
 800d048:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d04c:	f7fb fd76 	bl	8008b3c <memset>
 800d050:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d054:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d058:	4620      	mov	r0, r4
 800d05a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d05c:	3468      	adds	r4, #104	; 0x68
 800d05e:	e7d9      	b.n	800d014 <__sfp+0x1c>
 800d060:	2104      	movs	r1, #4
 800d062:	4638      	mov	r0, r7
 800d064:	f7ff ff62 	bl	800cf2c <__sfmoreglue>
 800d068:	4604      	mov	r4, r0
 800d06a:	6030      	str	r0, [r6, #0]
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d1d5      	bne.n	800d01c <__sfp+0x24>
 800d070:	f7ff ff78 	bl	800cf64 <__sfp_lock_release>
 800d074:	230c      	movs	r3, #12
 800d076:	603b      	str	r3, [r7, #0]
 800d078:	e7ee      	b.n	800d058 <__sfp+0x60>
 800d07a:	bf00      	nop
 800d07c:	0800d500 	.word	0x0800d500
 800d080:	ffff0001 	.word	0xffff0001

0800d084 <_fwalk_reent>:
 800d084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d088:	4606      	mov	r6, r0
 800d08a:	4688      	mov	r8, r1
 800d08c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d090:	2700      	movs	r7, #0
 800d092:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d096:	f1b9 0901 	subs.w	r9, r9, #1
 800d09a:	d505      	bpl.n	800d0a8 <_fwalk_reent+0x24>
 800d09c:	6824      	ldr	r4, [r4, #0]
 800d09e:	2c00      	cmp	r4, #0
 800d0a0:	d1f7      	bne.n	800d092 <_fwalk_reent+0xe>
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0a8:	89ab      	ldrh	r3, [r5, #12]
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d907      	bls.n	800d0be <_fwalk_reent+0x3a>
 800d0ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	d003      	beq.n	800d0be <_fwalk_reent+0x3a>
 800d0b6:	4629      	mov	r1, r5
 800d0b8:	4630      	mov	r0, r6
 800d0ba:	47c0      	blx	r8
 800d0bc:	4307      	orrs	r7, r0
 800d0be:	3568      	adds	r5, #104	; 0x68
 800d0c0:	e7e9      	b.n	800d096 <_fwalk_reent+0x12>

0800d0c2 <__retarget_lock_init_recursive>:
 800d0c2:	4770      	bx	lr

0800d0c4 <__retarget_lock_acquire_recursive>:
 800d0c4:	4770      	bx	lr

0800d0c6 <__retarget_lock_release_recursive>:
 800d0c6:	4770      	bx	lr

0800d0c8 <__swhatbuf_r>:
 800d0c8:	b570      	push	{r4, r5, r6, lr}
 800d0ca:	460e      	mov	r6, r1
 800d0cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0d0:	2900      	cmp	r1, #0
 800d0d2:	b096      	sub	sp, #88	; 0x58
 800d0d4:	4614      	mov	r4, r2
 800d0d6:	461d      	mov	r5, r3
 800d0d8:	da07      	bge.n	800d0ea <__swhatbuf_r+0x22>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	602b      	str	r3, [r5, #0]
 800d0de:	89b3      	ldrh	r3, [r6, #12]
 800d0e0:	061a      	lsls	r2, r3, #24
 800d0e2:	d410      	bmi.n	800d106 <__swhatbuf_r+0x3e>
 800d0e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0e8:	e00e      	b.n	800d108 <__swhatbuf_r+0x40>
 800d0ea:	466a      	mov	r2, sp
 800d0ec:	f000 f902 	bl	800d2f4 <_fstat_r>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	dbf2      	blt.n	800d0da <__swhatbuf_r+0x12>
 800d0f4:	9a01      	ldr	r2, [sp, #4]
 800d0f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d0fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d0fe:	425a      	negs	r2, r3
 800d100:	415a      	adcs	r2, r3
 800d102:	602a      	str	r2, [r5, #0]
 800d104:	e7ee      	b.n	800d0e4 <__swhatbuf_r+0x1c>
 800d106:	2340      	movs	r3, #64	; 0x40
 800d108:	2000      	movs	r0, #0
 800d10a:	6023      	str	r3, [r4, #0]
 800d10c:	b016      	add	sp, #88	; 0x58
 800d10e:	bd70      	pop	{r4, r5, r6, pc}

0800d110 <__smakebuf_r>:
 800d110:	898b      	ldrh	r3, [r1, #12]
 800d112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d114:	079d      	lsls	r5, r3, #30
 800d116:	4606      	mov	r6, r0
 800d118:	460c      	mov	r4, r1
 800d11a:	d507      	bpl.n	800d12c <__smakebuf_r+0x1c>
 800d11c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d120:	6023      	str	r3, [r4, #0]
 800d122:	6123      	str	r3, [r4, #16]
 800d124:	2301      	movs	r3, #1
 800d126:	6163      	str	r3, [r4, #20]
 800d128:	b002      	add	sp, #8
 800d12a:	bd70      	pop	{r4, r5, r6, pc}
 800d12c:	ab01      	add	r3, sp, #4
 800d12e:	466a      	mov	r2, sp
 800d130:	f7ff ffca 	bl	800d0c8 <__swhatbuf_r>
 800d134:	9900      	ldr	r1, [sp, #0]
 800d136:	4605      	mov	r5, r0
 800d138:	4630      	mov	r0, r6
 800d13a:	f7ff f97d 	bl	800c438 <_malloc_r>
 800d13e:	b948      	cbnz	r0, 800d154 <__smakebuf_r+0x44>
 800d140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d144:	059a      	lsls	r2, r3, #22
 800d146:	d4ef      	bmi.n	800d128 <__smakebuf_r+0x18>
 800d148:	f023 0303 	bic.w	r3, r3, #3
 800d14c:	f043 0302 	orr.w	r3, r3, #2
 800d150:	81a3      	strh	r3, [r4, #12]
 800d152:	e7e3      	b.n	800d11c <__smakebuf_r+0xc>
 800d154:	4b0d      	ldr	r3, [pc, #52]	; (800d18c <__smakebuf_r+0x7c>)
 800d156:	62b3      	str	r3, [r6, #40]	; 0x28
 800d158:	89a3      	ldrh	r3, [r4, #12]
 800d15a:	6020      	str	r0, [r4, #0]
 800d15c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d160:	81a3      	strh	r3, [r4, #12]
 800d162:	9b00      	ldr	r3, [sp, #0]
 800d164:	6163      	str	r3, [r4, #20]
 800d166:	9b01      	ldr	r3, [sp, #4]
 800d168:	6120      	str	r0, [r4, #16]
 800d16a:	b15b      	cbz	r3, 800d184 <__smakebuf_r+0x74>
 800d16c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d170:	4630      	mov	r0, r6
 800d172:	f000 f8d1 	bl	800d318 <_isatty_r>
 800d176:	b128      	cbz	r0, 800d184 <__smakebuf_r+0x74>
 800d178:	89a3      	ldrh	r3, [r4, #12]
 800d17a:	f023 0303 	bic.w	r3, r3, #3
 800d17e:	f043 0301 	orr.w	r3, r3, #1
 800d182:	81a3      	strh	r3, [r4, #12]
 800d184:	89a0      	ldrh	r0, [r4, #12]
 800d186:	4305      	orrs	r5, r0
 800d188:	81a5      	strh	r5, [r4, #12]
 800d18a:	e7cd      	b.n	800d128 <__smakebuf_r+0x18>
 800d18c:	0800cf21 	.word	0x0800cf21

0800d190 <_malloc_usable_size_r>:
 800d190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d194:	1f18      	subs	r0, r3, #4
 800d196:	2b00      	cmp	r3, #0
 800d198:	bfbc      	itt	lt
 800d19a:	580b      	ldrlt	r3, [r1, r0]
 800d19c:	18c0      	addlt	r0, r0, r3
 800d19e:	4770      	bx	lr

0800d1a0 <_raise_r>:
 800d1a0:	291f      	cmp	r1, #31
 800d1a2:	b538      	push	{r3, r4, r5, lr}
 800d1a4:	4604      	mov	r4, r0
 800d1a6:	460d      	mov	r5, r1
 800d1a8:	d904      	bls.n	800d1b4 <_raise_r+0x14>
 800d1aa:	2316      	movs	r3, #22
 800d1ac:	6003      	str	r3, [r0, #0]
 800d1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b2:	bd38      	pop	{r3, r4, r5, pc}
 800d1b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d1b6:	b112      	cbz	r2, 800d1be <_raise_r+0x1e>
 800d1b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1bc:	b94b      	cbnz	r3, 800d1d2 <_raise_r+0x32>
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f000 f830 	bl	800d224 <_getpid_r>
 800d1c4:	462a      	mov	r2, r5
 800d1c6:	4601      	mov	r1, r0
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1ce:	f000 b817 	b.w	800d200 <_kill_r>
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	d00a      	beq.n	800d1ec <_raise_r+0x4c>
 800d1d6:	1c59      	adds	r1, r3, #1
 800d1d8:	d103      	bne.n	800d1e2 <_raise_r+0x42>
 800d1da:	2316      	movs	r3, #22
 800d1dc:	6003      	str	r3, [r0, #0]
 800d1de:	2001      	movs	r0, #1
 800d1e0:	e7e7      	b.n	800d1b2 <_raise_r+0x12>
 800d1e2:	2400      	movs	r4, #0
 800d1e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	4798      	blx	r3
 800d1ec:	2000      	movs	r0, #0
 800d1ee:	e7e0      	b.n	800d1b2 <_raise_r+0x12>

0800d1f0 <raise>:
 800d1f0:	4b02      	ldr	r3, [pc, #8]	; (800d1fc <raise+0xc>)
 800d1f2:	4601      	mov	r1, r0
 800d1f4:	6818      	ldr	r0, [r3, #0]
 800d1f6:	f7ff bfd3 	b.w	800d1a0 <_raise_r>
 800d1fa:	bf00      	nop
 800d1fc:	20000010 	.word	0x20000010

0800d200 <_kill_r>:
 800d200:	b538      	push	{r3, r4, r5, lr}
 800d202:	4d07      	ldr	r5, [pc, #28]	; (800d220 <_kill_r+0x20>)
 800d204:	2300      	movs	r3, #0
 800d206:	4604      	mov	r4, r0
 800d208:	4608      	mov	r0, r1
 800d20a:	4611      	mov	r1, r2
 800d20c:	602b      	str	r3, [r5, #0]
 800d20e:	f7f6 fd25 	bl	8003c5c <_kill>
 800d212:	1c43      	adds	r3, r0, #1
 800d214:	d102      	bne.n	800d21c <_kill_r+0x1c>
 800d216:	682b      	ldr	r3, [r5, #0]
 800d218:	b103      	cbz	r3, 800d21c <_kill_r+0x1c>
 800d21a:	6023      	str	r3, [r4, #0]
 800d21c:	bd38      	pop	{r3, r4, r5, pc}
 800d21e:	bf00      	nop
 800d220:	20004d70 	.word	0x20004d70

0800d224 <_getpid_r>:
 800d224:	f7f6 bd12 	b.w	8003c4c <_getpid>

0800d228 <__sread>:
 800d228:	b510      	push	{r4, lr}
 800d22a:	460c      	mov	r4, r1
 800d22c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d230:	f000 f894 	bl	800d35c <_read_r>
 800d234:	2800      	cmp	r0, #0
 800d236:	bfab      	itete	ge
 800d238:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d23a:	89a3      	ldrhlt	r3, [r4, #12]
 800d23c:	181b      	addge	r3, r3, r0
 800d23e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d242:	bfac      	ite	ge
 800d244:	6563      	strge	r3, [r4, #84]	; 0x54
 800d246:	81a3      	strhlt	r3, [r4, #12]
 800d248:	bd10      	pop	{r4, pc}

0800d24a <__swrite>:
 800d24a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d24e:	461f      	mov	r7, r3
 800d250:	898b      	ldrh	r3, [r1, #12]
 800d252:	05db      	lsls	r3, r3, #23
 800d254:	4605      	mov	r5, r0
 800d256:	460c      	mov	r4, r1
 800d258:	4616      	mov	r6, r2
 800d25a:	d505      	bpl.n	800d268 <__swrite+0x1e>
 800d25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d260:	2302      	movs	r3, #2
 800d262:	2200      	movs	r2, #0
 800d264:	f000 f868 	bl	800d338 <_lseek_r>
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d26e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d272:	81a3      	strh	r3, [r4, #12]
 800d274:	4632      	mov	r2, r6
 800d276:	463b      	mov	r3, r7
 800d278:	4628      	mov	r0, r5
 800d27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d27e:	f000 b817 	b.w	800d2b0 <_write_r>

0800d282 <__sseek>:
 800d282:	b510      	push	{r4, lr}
 800d284:	460c      	mov	r4, r1
 800d286:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d28a:	f000 f855 	bl	800d338 <_lseek_r>
 800d28e:	1c43      	adds	r3, r0, #1
 800d290:	89a3      	ldrh	r3, [r4, #12]
 800d292:	bf15      	itete	ne
 800d294:	6560      	strne	r0, [r4, #84]	; 0x54
 800d296:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d29a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d29e:	81a3      	strheq	r3, [r4, #12]
 800d2a0:	bf18      	it	ne
 800d2a2:	81a3      	strhne	r3, [r4, #12]
 800d2a4:	bd10      	pop	{r4, pc}

0800d2a6 <__sclose>:
 800d2a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2aa:	f000 b813 	b.w	800d2d4 <_close_r>
	...

0800d2b0 <_write_r>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	4d07      	ldr	r5, [pc, #28]	; (800d2d0 <_write_r+0x20>)
 800d2b4:	4604      	mov	r4, r0
 800d2b6:	4608      	mov	r0, r1
 800d2b8:	4611      	mov	r1, r2
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	602a      	str	r2, [r5, #0]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	f7f6 fd03 	bl	8003cca <_write>
 800d2c4:	1c43      	adds	r3, r0, #1
 800d2c6:	d102      	bne.n	800d2ce <_write_r+0x1e>
 800d2c8:	682b      	ldr	r3, [r5, #0]
 800d2ca:	b103      	cbz	r3, 800d2ce <_write_r+0x1e>
 800d2cc:	6023      	str	r3, [r4, #0]
 800d2ce:	bd38      	pop	{r3, r4, r5, pc}
 800d2d0:	20004d70 	.word	0x20004d70

0800d2d4 <_close_r>:
 800d2d4:	b538      	push	{r3, r4, r5, lr}
 800d2d6:	4d06      	ldr	r5, [pc, #24]	; (800d2f0 <_close_r+0x1c>)
 800d2d8:	2300      	movs	r3, #0
 800d2da:	4604      	mov	r4, r0
 800d2dc:	4608      	mov	r0, r1
 800d2de:	602b      	str	r3, [r5, #0]
 800d2e0:	f7f6 fd0f 	bl	8003d02 <_close>
 800d2e4:	1c43      	adds	r3, r0, #1
 800d2e6:	d102      	bne.n	800d2ee <_close_r+0x1a>
 800d2e8:	682b      	ldr	r3, [r5, #0]
 800d2ea:	b103      	cbz	r3, 800d2ee <_close_r+0x1a>
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	bd38      	pop	{r3, r4, r5, pc}
 800d2f0:	20004d70 	.word	0x20004d70

0800d2f4 <_fstat_r>:
 800d2f4:	b538      	push	{r3, r4, r5, lr}
 800d2f6:	4d07      	ldr	r5, [pc, #28]	; (800d314 <_fstat_r+0x20>)
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	4604      	mov	r4, r0
 800d2fc:	4608      	mov	r0, r1
 800d2fe:	4611      	mov	r1, r2
 800d300:	602b      	str	r3, [r5, #0]
 800d302:	f7f6 fd0a 	bl	8003d1a <_fstat>
 800d306:	1c43      	adds	r3, r0, #1
 800d308:	d102      	bne.n	800d310 <_fstat_r+0x1c>
 800d30a:	682b      	ldr	r3, [r5, #0]
 800d30c:	b103      	cbz	r3, 800d310 <_fstat_r+0x1c>
 800d30e:	6023      	str	r3, [r4, #0]
 800d310:	bd38      	pop	{r3, r4, r5, pc}
 800d312:	bf00      	nop
 800d314:	20004d70 	.word	0x20004d70

0800d318 <_isatty_r>:
 800d318:	b538      	push	{r3, r4, r5, lr}
 800d31a:	4d06      	ldr	r5, [pc, #24]	; (800d334 <_isatty_r+0x1c>)
 800d31c:	2300      	movs	r3, #0
 800d31e:	4604      	mov	r4, r0
 800d320:	4608      	mov	r0, r1
 800d322:	602b      	str	r3, [r5, #0]
 800d324:	f7f6 fd09 	bl	8003d3a <_isatty>
 800d328:	1c43      	adds	r3, r0, #1
 800d32a:	d102      	bne.n	800d332 <_isatty_r+0x1a>
 800d32c:	682b      	ldr	r3, [r5, #0]
 800d32e:	b103      	cbz	r3, 800d332 <_isatty_r+0x1a>
 800d330:	6023      	str	r3, [r4, #0]
 800d332:	bd38      	pop	{r3, r4, r5, pc}
 800d334:	20004d70 	.word	0x20004d70

0800d338 <_lseek_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4d07      	ldr	r5, [pc, #28]	; (800d358 <_lseek_r+0x20>)
 800d33c:	4604      	mov	r4, r0
 800d33e:	4608      	mov	r0, r1
 800d340:	4611      	mov	r1, r2
 800d342:	2200      	movs	r2, #0
 800d344:	602a      	str	r2, [r5, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	f7f6 fd02 	bl	8003d50 <_lseek>
 800d34c:	1c43      	adds	r3, r0, #1
 800d34e:	d102      	bne.n	800d356 <_lseek_r+0x1e>
 800d350:	682b      	ldr	r3, [r5, #0]
 800d352:	b103      	cbz	r3, 800d356 <_lseek_r+0x1e>
 800d354:	6023      	str	r3, [r4, #0]
 800d356:	bd38      	pop	{r3, r4, r5, pc}
 800d358:	20004d70 	.word	0x20004d70

0800d35c <_read_r>:
 800d35c:	b538      	push	{r3, r4, r5, lr}
 800d35e:	4d07      	ldr	r5, [pc, #28]	; (800d37c <_read_r+0x20>)
 800d360:	4604      	mov	r4, r0
 800d362:	4608      	mov	r0, r1
 800d364:	4611      	mov	r1, r2
 800d366:	2200      	movs	r2, #0
 800d368:	602a      	str	r2, [r5, #0]
 800d36a:	461a      	mov	r2, r3
 800d36c:	f7f6 fc90 	bl	8003c90 <_read>
 800d370:	1c43      	adds	r3, r0, #1
 800d372:	d102      	bne.n	800d37a <_read_r+0x1e>
 800d374:	682b      	ldr	r3, [r5, #0]
 800d376:	b103      	cbz	r3, 800d37a <_read_r+0x1e>
 800d378:	6023      	str	r3, [r4, #0]
 800d37a:	bd38      	pop	{r3, r4, r5, pc}
 800d37c:	20004d70 	.word	0x20004d70

0800d380 <_init>:
 800d380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d382:	bf00      	nop
 800d384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d386:	bc08      	pop	{r3}
 800d388:	469e      	mov	lr, r3
 800d38a:	4770      	bx	lr

0800d38c <_fini>:
 800d38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d38e:	bf00      	nop
 800d390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d392:	bc08      	pop	{r3}
 800d394:	469e      	mov	lr, r3
 800d396:	4770      	bx	lr
